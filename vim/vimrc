set nocompatible " not vi compatible

"------------------------------------------------------------------------------
" Pathogen Initialization
"------------------------------------------------------------------------------

runtime bundle/pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()

filetype plugin indent on " enable file type detection

"------------------------------------------------------------------------------
" Theme/Colors
"------------------------------------------------------------------------------

syntax on

" vim can autodetect this based on $TERM (e.g. 'xterm-256color')
" but it can be set to force 256 colors
" set t_Co=256
if &t_Co < 256
    colorscheme desert
    set nocursorline " looks bad in this mode
else
    set background=dark
    let g:solarized_termcolors=256 " instead of 16 color with mapping in terminal
    colorscheme solarized

    " customized colors
    highlight SignColumn ctermbg=234
    highlight StatusLine cterm=bold ctermfg=245 ctermbg=235
    highlight StatusLineNC cterm=bold ctermfg=245 ctermbg=235
    let g:NeatStatusLine_color_normal='ctermfg=64 ctermbg=235 cterm=bold'
    let g:NeatStatusLine_color_insert='ctermfg=136 ctermbg=235 cterm=bold'
    let g:NeatStatusLine_color_replace='ctermfg=160 ctermbg=235 cterm=bold'
    let g:NeatStatusLine_color_visual='ctermfg=33 ctermbg=235 cterm=bold'
    let g:NeatStatusLine_color_position='ctermfg=245 ctermbg=235 cterm=bold'
    let g:NeatStatusLine_color_modified='ctermfg=166 ctermbg=235 cterm=bold'
    let g:NeatStatusLine_color_line='ctermfg=61 ctermbg=235 cterm=bold'
    let g:NeatStatusLine_color_filetype='ctermfg=37 ctermbg=235 cterm=bold'
endif

" set filetype and syntax of certain file extensions
autocmd BufRead,BufNewFile *.xpl set filetype=perl syntax=perl
autocmd BufRead,BufNewFile *.tap set filetype=perl syntax=perl
autocmd BufRead,BufNewFile *.psgi set filetype=perl syntax=perl
autocmd BufRead,BufNewFile *.ddl set filetype=sql  syntax=sql
autocmd BufRead,BufNewFile *.func set filetype=sh  syntax=sh

"------------------------------------------------------------------------------
" Easy Align Plugin
"------------------------------------------------------------------------------

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

let g:easy_align_delimiters = {
\ '>': { 'pattern': '>>\|=>\|>\|->' },
\ '<': { 'pattern': '<<\|<=\|<-\|<' },
\ '/': {
\     'pattern':         '//\+\|/\*\|\*/',
\     'delimiter_align': 'l',
\     'ignore_groups':   ['!Comment'] }
\ }

"------------------------------------------------------------------------------
" Mulitple Cursors Plugin
"------------------------------------------------------------------------------

" If set to 0, then pressing g:multi_cursor_quit_key in Visual mode will not
" quit and delete all existing cursors. This is useful if you want to press
" Escape and go back to Normal mode, and still be able to operate on all the
" cursors.
let g:multi_cursor_exit_from_visual_mode=0

" If set to 0, then pressing g:multi_cursor_quit_key in Insert mode will not
" quit and delete all existing cursors. This is useful if you want to press
" Escape and go back to Normal mode, and still be able to operate on all the
" cursors.
let g:multi_cursor_exit_from_insert_mode=0

" TODO: find a better mapping since Alt-J collides with Tmux's adjusting split
" screens
" This allows one to a) search for the keyword using * b) turn search results
" into cursors with Alt-j.
" nnoremap <silent> <M-j> :MultipleCursorsFind <C-R>/<CR>
" vnoremap <silent> <M-j> :MultipleCursorsFind <C-R>/<CR>

"------------------------------------------------------------------------------
" General
"------------------------------------------------------------------------------

let mapleader=","

"set autoread                    " reload files changed outside vim
"set backspace=indent,eol,start  " allow backspace over everything in insert mode
"set enc=utf8                    " set character encoding to utf8
set fileformats="unix,dos,mac"  " what is this?
set formatoptions=qrn1          " when wrapping paragraphs, don't end lines with 1-letter words (not sure about qrn)
set gcr=a:blinkon0              " disable cursor blink
"set history=1000                " store lots of :cmdline history
set mouse=a                     " enable using the mouse if terminal emulator supports it
set nojoinspaces                " suppress inserting two spaces between sentences
"set nrformats=                  " make <C-a> and <C-x> play well with zero padded numbers (i.e. don't consider them octal or hex)
set number                      " line numbers are good
set pastetoggle=<F2>            " press <F2> in any mode to toggle paste
set shortmess+=I                " hide the launch screen
set showcmd                     " show incomplete cmds down the bottom
set showmatch                   " set show matching parenthesis
set showmode                    " show current mode down the bottom
set smartcase                   " ignore case if search pattern is all lowercase, case-sensitive otherwise

" toggle show/hide invisible chars
nnoremap <leader>i :set list!<cr>

" toggle line numbers
nnoremap <leader>N :setlocal number!<cr>

" speed up scrolling of the viewport slightly
nnoremap <C-e> 2<C-e>
nnoremap <C-y> 2<C-y>

" movement by file line instead of screen line
nnoremap j gj
nnoremap k gk

" use of zz, which centers your current line, made easier
nmap <space> zz
nmap n nzz
nmap N Nzz

" F1 key brings up help menu, map it to escape key
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" write all files when focus of Vim is lost
au FocusLost * :wa

" quickly strip all trailing whitespace in the current file
nnoremap <leader>rw :%s/\s\+$//<cr>:let @/=''<CR>

" quickly replace all tabs with spaces
nnoremap <leader>rt :%s/\t/  /g<Enter>

" search and replace selected text
vnoremap <C-r> "hy:%s/<C-r>h//g<left><left>

" quickly escape from insert mode
inoremap jj <ESC>

" reselect the text that was just pasted
nnoremap <leader>v V`]

" sudo write a file when inside it
cmap w!! w !sudo tee % > /dev/null %

" this makes vim act like all other editors, buffers can
" exist in the background without being in a window.
" http://items.sjbach.com/319/configuring-vim-right
set hidden

" do not redraw while running macros (much faster) (LazyRedraw)
set lazyredraw

" quickly edit/reload the vimrc file
nmap <silent> <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

"------------------------------------------------------------------------------
" Editing/Navigation
"------------------------------------------------------------------------------

" disable use of arrow keys in both normal and insert mode
nnoremap <Left>  :echoerr "USE H TO GO LEFT"<CR>
nnoremap <Right> :echoerr "USE L TO GO RIGHT"<CR>
nnoremap <Up>    :echoerr "USE K TO GO UP"<CR>
nnoremap <Down>  :echoerr "USE J TO GO DOWN"<CR>
inoremap <Left>  <ESC>:echoerr "USE H TO GO LEFT"<CR>
inoremap <Right> <ESC>:echoerr "USE L TO GO RIGHT"<CR>
inoremap <Up>    <ESC>:echoerr "USE K TO GO UP"<CR>
inoremap <Down>  <ESC>:echoerr "USE J TO GO DOWN"<CR>

" inserting a new-line w/o entering insert mode
map <S-Enter> O<ESC>
map <Enter> o<ESC>

" navigate between splits
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-H> <C-W>h
map <C-L> <C-W>l

" open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" TODO: not sure what a good mapping is
" split vertically/horizontally and switch over
"nmap <C-i> <C-w>v<C-l>:e .<CR>
"nmap <C-o> <C-w>s<C-j>:e .<CR>

" open split screen and switch over
nnoremap <leader>w <C-w>v<C-w>l

" handles swapping one window with another
function! MarkWindowSwap()
  let g:markedWinNum = winnr()
endfunction

function! DoWindowSwap()
  "Mark destination
  let curNum = winnr()
  let curBuf = bufnr( "%" )
  exe g:markedWinNum . "wincmd w"
  "Switch to source and shuffle dest->source
  let markedBuf = bufnr( "%" )
  "Hide and open so that we aren't prompted and keep history
  exe 'hide buf' curBuf
  "Switch to dest and shuffle source->dest
  exe curNum . "wincmd w"
  "Hide and open so that we aren't prompted and keep history
  exe 'hide buf' markedBuf
endfunction

nmap <silent> <leader>mw :call MarkWindowSwap()<CR>
nmap <silent> <leader>pw :call DoWindowSwap()<CR>

"------------------------------------------------------------------------------
" Folding
"
" Enable folding, but by default make it act like folding is off, because
" folding is annoying in anything but a few rare cases
"------------------------------------------------------------------------------

" Map toggle folding Space key.
" noremap <space> :call ToggleFold()<CR>

" turn on folding
set foldenable

" make folding indent sensitive
set foldmethod=indent

" don't autofold anything (but I can still fold manually)
set foldlevel=100

" don't open folds when you search into them
set foldopen-=search

" don't open folds when you undo stuff
set foldopen-=undo

" set vim to fold by braces (instead of, say, by indentation)
fun! FoldBraces()
  set foldmethod=marker
  set foldmarker={,}
  set foldtext=getline(v:foldstart)
endfun

" fold on braces instead of indentation
autocmd BufRead *.php* call FoldBraces()
autocmd BufRead *.php call FoldBraces()
autocmd BufRead *.inc call FoldBraces()
autocmd BufRead *.c call FoldBraces()
autocmd BufRead *.cpp call FoldBraces()
autocmd BufRead *.em call FoldBraces()  // source insight
autocmd BufRead *.idl call FoldBraces()
autocmd BufRead *.cc call FoldBraces()
autocmd BufRead *.java call FoldBraces()
autocmd BufRead *.h call FoldBraces()
autocmd BufRead *.pl call FoldBraces()
autocmd BufRead *.pm call FoldBraces()
autocmd BufRead *.scala call FoldBraces()

" - counts is not word delimiter in xml
autocmd BufRead *.xml set iskeyword+=-
autocmd BufRead *.xsd set iskeyword+=-
autocmd BufRead *.xsd set tabstop=2 | set softtabstop=2 | set shiftwidth=2
autocmd BufRead *.xml set tabstop=2 | set softtabstop=2 | set shiftwidth=2
autocmd BufRead *.sls set iskeyword-=$

"------------------------------------------------------------------------------
" Search Settings
"------------------------------------------------------------------------------

set ignorecase        " ignore case when searching
"set incsearch         " find the next match as we type the search
set hlsearch          " highlight searches by default
set viminfo='100,f1   " save up to 100 marks, enable capital marks
set matchpairs+=<:>   " allow % to bounce between angles too

" search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

"------------------------------------------------------------------------------
" Turn Off Swap Files
"------------------------------------------------------------------------------

set nobackup
set noswapfile
set nowb
set nowritebackup

"------------------------------------------------------------------------------
" Indentation
"------------------------------------------------------------------------------

set autoindent    " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting
set expandtab     " expand tabs by default (overloadable per file type)
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set shiftwidth=2  " number of spaces to use for autoindenting
set smartindent
set smarttab      " insert tabs on the start of a line according to shiftwidth, not tabstop
set softtabstop=2 " when hitting <BS>, pretend like a tab is removed, even if spaces
set tabstop=2     " tabs are n spaces

autocmd BufRead,BufNewFile *.xml setlocal sw=4 ts=4 sts=4 expandtab
autocmd BufRead,BufNewFile *.java setlocal sw=4 ts=4 sts=4 expandtab
autocmd BufRead,BufNewFile *.js setlocal sw=4 ts=4 sts=4 expandtab
autocmd BufRead,BufNewFile *.func setlocal sw=2 ts=2 sts=2 expandtab

" display tabs and trailing spaces visually
set list listchars=tab:>-,trail:•,extends:#,nbsp:.

"set nowrap     " don't wrap lines
set linebreak  " wrap lines at convenient points

"------------------------------------------------------------------------------
" Completion
"------------------------------------------------------------------------------

set wildmode=list:longest
"set wildmenu                                          " enable ctrl-n and ctrl-p to scroll thru matches (seems to be enabled by default)
set wildignore=*.o,*.obj,*~,*.swp,*.bak,*.pyc,*.class " stuff to ignore when tab completing
set wildignore+=*vim/backups*

"------------------------------------------------------------------------------
" Scrolling
"------------------------------------------------------------------------------

set scrolloff=8     " start scrolling when we're 8 lines away from margins
"set sidescrolloff=15
set sidescroll=4
set virtualedit=all " allow the cursor to go into invalid places

"------------------------------------------------------------------------------
" Highlighting
"------------------------------------------------------------------------------

hi CursorLine cterm=underline
hi CursorColumn cterm=NONE ctermbg=cyan ctermfg=white guibg=darkred guifg=white
nnoremap <leader>l :set cursorline! <CR>
nnoremap <leader>c :set cursorcolumn! <CR>
nnoremap <leader><space> :noh<cr>

set cursorline

"------------------------------------------------------------------------------
" Local customizations
"------------------------------------------------------------------------------

" local customizations in ~/.vimrc_local
let $LOCALFILE=expand("~/.vimrc_local")
if filereadable($LOCALFILE)
    source $LOCALFILE
endif

