[ {
  "elapsedMillis" : 5877,
  "totalScheduledMillis" : 327019,
  "cpuMillis" : 91637,
  "queuedMillis" : 1,
  "executeMillis" : 2999,
  "getResultMillis" : 0,
  "iterateMillis" : 3291,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 611863325,
  "query" : "SELECT COUNT(DISTINCT accountid) AS distinct_account_count\nFROM datalake.imhotep.passsigninattempt\nWHERE unixtime > IMHOTEP_UNIXTIME('1month') AND successful = 1",
  "queryTables" : [ "datalakehive.imhotep.passsigninattempt" ],
  "queryIndex" : 0,
  "runStartToQueryComplete" : 8
}, {
  "elapsedMillis" : 1647,
  "totalScheduledMillis" : 3428,
  "cpuMillis" : 370,
  "queuedMillis" : 1,
  "executeMillis" : 917,
  "getResultMillis" : 0,
  "iterateMillis" : 1004,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 17750674,
  "query" : "SELECT *\nFROM datalake.imhotep.ruleContentResult_communications\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.rulecontentresult_communications" ],
  "queryIndex" : 1,
  "runStartToQueryComplete" : 8
}, {
  "elapsedMillis" : 12578,
  "totalScheduledMillis" : 52010645,
  "cpuMillis" : 5233402,
  "queuedMillis" : 1,
  "executeMillis" : 2643,
  "getResultMillis" : 0,
  "iterateMillis" : 10014,
  "rows" : 988,
  "error" : null,
  "scannedBytes" : 155855508987,
  "query" : "-- Calculate the block rate change for each day compared to a rolling average of the previous 7 (over a total window of 30 days)\nWITH daily_data AS (\n    SELECT\n        date(from_unixtime(lp.unixtime)) AS date,\n        appName,\n        moderationApi, \n        moderationType, \n\t\tSUM(CAST(lp.flagged  AS DOUBLE)) as block_count,\n        COUNT(*) AS request_count,\n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by appName, moderationApi, moderationType ORDER BY date(from_unixtime(lp.unixtime)) ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING) AS weekly_block_count,\n\t\tSUM(COUNT(*)) OVER (partition by appName, moderationApi, moderationType ORDER BY date(from_unixtime(lp.unixtime)) ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING) AS weekly_request_count\n    FROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.flagged IS NOT NULL\n        AND lp.metric = 'moderation-text'\n        AND unixtime BETWEEN imhotep_unixtime(DATE(CURRENT_DATE) - interval '60' day) AND imhotep_unixtime(DATE(CURRENT_DATE))\n        -- see rate_change query for filters by appName etc.\n    GROUP BY\n        date(from_unixtime(lp.unixtime)),\n        appName, \n        moderationApi, \n        moderationType \n),\nblock_rate AS (\n    SELECT\n        date,\n        appName, \n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        block_count * 1.0 / request_count as raw_block_rate,\n        -- We adjust the proportion estimates by adding z^2/2 successes and z^2/2 failures (z^2 obs total) to the counts.\n        -- This can be thought of as a Bayesian prior, or as a correction to the Normal approximation for rates close to 0 or 1.\n        -- For large values of request_count this converges to the raw proportion (block_rate ~ raw_block_rate).\n        -- Using z=3.0, in other words, we're going to require a \"3-sigma\" detection.\n        (block_count + 4.5) * 1.0 / (request_count + 9.0) as block_rate, -- corrected/smoothed\n        weekly_block_count * 1.0 /  weekly_request_count as raw_weekly_block_rate,  \n        (weekly_block_count + 4.5) * 1.0 / ( weekly_request_count + 9.0) as  weekly_block_rate, -- corrected/smoothed\n        ((block_count + 4.5) * 1.0 / (request_count + 9.0)) - ((weekly_block_count + 4.5) * 1.0 / ( weekly_request_count + 9.0)) as change,\n        sum(1.0) over (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING) as previous_dates_count\n    FROM\n        daily_data\n),\n\nblock_rate_change AS (\n    SELECT\n        date,\n        appName, \n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        STDDEV(block_rate-weekly_block_rate) OVER (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING) AS stddev_obs,\n        SQRT((block_rate * (1.0 - block_rate) / request_count) + ((weekly_block_rate * (1.0 - weekly_block_rate) / weekly_request_count))) as stddev_approx,\n        raw_block_rate,  \n        block_rate,\n        raw_weekly_block_rate,  \n        weekly_block_rate, -- corrected/smoothed\n        block_rate - weekly_block_rate as change,\n\t\tprevious_dates_count        \n    FROM\n        block_rate\n),\nconfidence_interval AS (\n    SELECT\n        date,\n        appName, \n        moderationApi, \n        moderationType,\n        stddev_obs,\n\t\tstddev_approx,\n        greatest(stddev_approx, stddev_obs) as stddev,\n        block_rate,\n        block_rate - 3.0 * greatest(stddev_approx, stddev_obs)  AS block_rate_lower_bound,\n        block_rate + 3.0 * greatest(stddev_approx, stddev_obs) AS block_rate_upper_bound,          \n        weekly_block_rate,\n\t\tweekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,        \n        change,\n        request_count,\n        change - 3.0 * greatest(stddev_approx, stddev_obs) AS change_lower_bound,\n        change + 3.0 * greatest(stddev_approx, stddev_obs) AS change_upper_bound,\n        previous_dates_count        \n    FROM\n        block_rate_change\n    WHERE\n    \tweekly_request_count > 100\n        and request_count > 100\n)\nSELECT\n    date,\n    appName, \n    moderationApi, \n    moderationType,\n    request_count,\n    stddev_obs,\n    stddev_approx,\n    stddev,\n    block_rate,\n\tblock_rate_lower_bound,\n    block_rate_upper_bound,\n    weekly_block_rate,\n    weekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,    \n    change,\n    change_lower_bound,\n    change_upper_bound,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (previous_dates_count > 6), 1, 0) as is_sig_change,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (date = (max(date) over ())) and (previous_dates_count > 6), 1, 0) as is_latest_date_sig_change,\n    change/stddev as z_score,\n    IF(date = (max(date) over ()), change/stddev, NULL) as latest_date_z_score, \n    max(date) over () as latest_data_date,\n    previous_dates_count            \nFROM\n    confidence_interval -- Note: return values for all dates unlike with the alerting query\nWHERE\n    (change/stddev) IS NOT NULL\n     -- see rate_change query for filters by appName etc.    \nORDER BY\n    date DESC, appName ASC, moderationApi ASC, moderationType DESC",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 2,
  "runStartToQueryComplete" : 22
}, {
  "elapsedMillis" : 12158,
  "totalScheduledMillis" : 2247689,
  "cpuMillis" : 1337507,
  "queuedMillis" : 1,
  "executeMillis" : 6444,
  "getResultMillis" : 0,
  "iterateMillis" : 5764,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    t3,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0\n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '')\nORDER BY date, teamId, project, t0, t1, t2, t3 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 3,
  "runStartToQueryComplete" : 22
}, {
  "elapsedMillis" : 11941,
  "totalScheduledMillis" : 3367701,
  "cpuMillis" : 1932726,
  "queuedMillis" : 1,
  "executeMillis" : 5781,
  "getResultMillis" : 0,
  "iterateMillis" : 6211,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        tw.tier_4 != 'Unspecified' AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0  \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '')\nORDER BY date, teamId, project, t0, t1, t2, t3, t4 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 4,
  "runStartToQueryComplete" : 21
}, {
  "elapsedMillis" : 7951,
  "totalScheduledMillis" : 27393344,
  "cpuMillis" : 3914242,
  "queuedMillis" : 1,
  "executeMillis" : 1427,
  "getResultMillis" : 0,
  "iterateMillis" : 6586,
  "rows" : 698,
  "error" : null,
  "scannedBytes" : 155831148140,
  "query" : "-- Calculate the block rate change for each day compared to a rolling average of the previous 7 (over a total window of 30 days)\nWITH expected_stats AS (\n    SELECT * FROM (\n        VALUES\n        ('autojob-v2', 'mcmurdoDenylist', 'output', 0.0000592),\n        ('autojob-v2', 'mcmurdoDetoxify', 'output', 0.0238791),\n        ('ContentGenerationService', 'openAIModerations', 'input', 0.000150625942320615), -- 0.0017878\n        ('ContentGenerationService', 'mcmurdoDenylist', 'output', 0.0000442415572580617), -- 0.0000505\n        ('ContentGenerationService', 'mcmurdoDetoxify', 'output', 0.018290404666108200), -- 0.0190764\n        ('ContentGenerationService', 'openAIModerations', 'output', 0.00000863446347650164), --0.0000279\n        ('hire-candidate-rematch-api', 'openAIModerations', 'input', 0.001641), \n        ('hire-candidate-rematch-api', 'mcmurdoDenylist', 'output', 0.0002042),\n        ('hire-candidate-rematch-api', 'openAIModerations', 'output', 0.0000157),\n        ('jobsearch-chatbot', 'openAIModerations', 'input', 0.000245824682575176), --0.0003198\n        ('jobsearch-chatbot', 'mcmurdoDenylist', 'output', 0.0000542340524768692), -- 0.0001485\n        ('jobsearch-chatbot', 'openAIModerations', 'output', 0.0), -- 0.000308 why did this one change so much?\n        ('monai', 'openAIModerations', 'input', 0.0054594),\n        ('mrp-rm-explore-match-labeler', 'openAIModerations', 'input', 0.0035183),\n        ('mrp-rm-explore-match-labeler', 'mcmurdoDenylist', 'output', 0.0016293),\n        ('mrp-rm-explore-match-labeler', 'openAIModerations', 'output', 0.0000355),\n        ('pathfinder-llm-service', 'mcmurdoDenylist', 'output', 0.0),\n      \t('pathfinder-llm-service', 'openAIModerations', 'input', 0.0036826247070639400),\n      \t('pathfinder-llm-service', 'openAIModerations', 'output', 0.0),\n        ('profile-suggestion-service', 'mcmurdoDenylist', 'output', 0.0000481), -- 0.0000217362277708256\n        ('profile-suggestion-service', 'mcmurdoDetoxify', 'output', 0.0449264), -- 0.0454137542347355\n        ('sourcing-match-explanation', 'mcmurdoDenylist', 'output', 0.000552),\n        ('sourcing-match-explanation', 'openAIModerations', 'output', 0.0001181)\n    ) AS t(appName, moderationApi, moderationType, expected_block_rate)),\n\nweekly_data AS (\n    SELECT\n        date(from_unixtime(lp.unixtime)) AS date,\n        appName,\n        moderationApi, \n        moderationType, \n\t\tSUM(CAST(lp.flagged  AS DOUBLE)) as block_count,\n        COUNT(*) AS request_count,\n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by appName, moderationApi, moderationType ORDER BY date(from_unixtime(lp.unixtime)) ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING) AS weekly_block_count,\n\t\tSUM(COUNT(*)) OVER (partition by appName, moderationApi, moderationType ORDER BY date(from_unixtime(lp.unixtime)) ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING) AS weekly_request_count\n    FROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp   \n    WHERE\n        lp.flagged IS NOT NULL\n        AND lp.metric = 'moderation-text'\n        AND unixtime BETWEEN imhotep_unixtime(DATE(CURRENT_DATE) - interval '60' day) AND imhotep_unixtime(DATE(CURRENT_DATE))\n        -- see rate_change query for filters by appName etc.        \n    GROUP BY\n        date(from_unixtime(lp.unixtime)),\n        appName, \n        moderationApi, \n        moderationType \n),\nblock_rate AS (\n    SELECT\n        wd.date,\n        wd.appName, \n        wd.moderationApi, \n        wd.moderationType,\n        es.expected_block_rate as raw_expected_block_rate,\n        request_count,\n        weekly_request_count,\n        weekly_block_count,\n        block_count * 1.0 / request_count as raw_block_rate,\n        -- We adjust the proportion estimates by adding z^2/2 successes and z^2/2 failures (z^2 obs total) to the counts.\n        -- This can be thought of as a Bayesian prior, or as a correction to the Normal approximation for rates close to 0 or 1.\n        -- For large values of request_count this converges to the raw proportion (block_rate ~ raw_block_rate).\n        -- Using z=3.0, in other words, we're going to require a \"3-sigma\" detection.\n        (block_count + 4.5) * 1.0 / (request_count + 9.0) as block_rate, -- corrected/smoothed\n        weekly_block_count * 1.0 /  weekly_request_count as raw_weekly_block_rate,  \n        (weekly_block_count + 4.5) * 1.0 / ( weekly_request_count + 9.0) as  weekly_block_rate, -- corrected/smoothed\n        ((es.expected_block_rate * weekly_request_count)  + 4.5) * 1.0 / ( weekly_request_count + 9.0) as  expected_block_rate, -- corrected/smoothed\n        --((block_count + 4.5) * 1.0 / (request_count + 9.0)) - ((weekly_block_count + 4.5) * 1.0 / ( weekly_request_count + 9.0)) as change,\n        sum(1.0) over (partition by wd.appName, wd.moderationApi, wd.moderationType ORDER BY date ROWS BETWEEN unbounded PRECEDING AND 1 PRECEDING) as previous_dates_count\n    FROM\n        weekly_data wd\n    JOIN \n    \texpected_stats as es\n    ON \n        wd.appName = es.appName \n        AND wd.moderationApi = es.moderationApi\n        AND wd.moderationType = es.moderationType              \n),\n\nblock_rate_estimates AS (\n    SELECT\n        date,\n        appName, \n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n\t\tweekly_block_count,        \n--        STDDEV(block_rate-weekly_block_rate) OVER (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING) AS stddev_obs,\n--        SQRT((block_rate * (1.0 - block_rate) / request_count) + ((weekly_block_rate * (1.0 - weekly_block_rate) / weekly_request_count))) as stddev_approx,\n--\t\tSQRT(block_rate * (1.0 - block_rate) / request_count) as stddev_approx,        \n        SQRT(weekly_block_rate * (1.0 - weekly_block_rate) / weekly_request_count) as stddev_approx_weekly,\n\t\tSTDDEV(weekly_block_rate - expected_block_rate) OVER (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING) AS stddev_obs_weekly,\n\t\texpected_block_rate,        \n\t\tweekly_block_rate,        \n        weekly_block_rate - expected_block_rate as change,\n        raw_weekly_block_rate,\n\t\traw_expected_block_rate,        \n\t\tprevious_dates_count        \n    FROM\n        block_rate\n),\n\nconfidence_interval AS (\n    SELECT\n\t\tdate,    \n        appName, \n        moderationApi, \n        moderationType,\n        expected_block_rate,\n\t\tgreatest(stddev_obs_weekly,stddev_approx_weekly) as stddev_weekly,\n\t\tstddev_obs_weekly,\n        stddev_approx_weekly,       \n        weekly_block_rate,\n        weekly_block_rate - 3.0 * greatest(stddev_obs_weekly,stddev_approx_weekly) AS weekly_block_rate_lower_bound,\n        weekly_block_rate + 3.0 * greatest(stddev_obs_weekly,stddev_approx_weekly) AS weekly_block_rate_upper_bound,       \n\t\traw_weekly_block_rate,\n\t\traw_expected_block_rate,                \n        change,\n        change/expected_block_rate as relative_change,\n        change - 3.0 * greatest(stddev_obs_weekly,stddev_approx_weekly) AS change_lower_bound,\n        change + 3.0 * greatest(stddev_obs_weekly,stddev_approx_weekly) AS change_upper_bound,\n        weekly_request_count,\n\t\tweekly_block_count,\n\t\tprevious_dates_count        \n    FROM\n        block_rate_estimates\n)\nSELECT\n\tdate,\n    appName, \n    moderationApi, \n    moderationType,\n\texpected_block_rate,\n    weekly_block_rate,\n\tweekly_block_rate_lower_bound,\n    weekly_block_rate_upper_bound,\n    raw_weekly_block_rate, \n\traw_expected_block_rate,            \n    change,\n    relative_change,\n    change_lower_bound,\n    change_upper_bound,\n    weekly_request_count,\n\tweekly_block_count, \n\tstddev_obs_weekly,\n    stddev_approx_weekly,      \n    IF(abs(change/stddev_weekly) > 3.0, 1, 0) as is_sig_change,\n    IF(abs(change/stddev_weekly) > 3.0 and (date = (max(date) over ())), 1, 0) as is_latest_date_sig_change,\n    change/stddev_approx_weekly as z_score_alternate,\n    change/stddev_weekly as z_score,\n\tprevious_dates_count    \nFROM\n    confidence_interval -- Note: r",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 5,
  "runStartToQueryComplete" : 22
}, {
  "elapsedMillis" : 5790,
  "totalScheduledMillis" : 438911,
  "cpuMillis" : 338539,
  "queuedMillis" : 1,
  "executeMillis" : 4990,
  "getResultMillis" : 0,
  "iterateMillis" : 861,
  "rows" : 478,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_3 != 'Unspecified'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    t3,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '')\nORDER BY date, t0, t1, t2, t3 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 6,
  "runStartToQueryComplete" : 22
}, {
  "elapsedMillis" : 5349,
  "totalScheduledMillis" : 251551,
  "cpuMillis" : 164285,
  "queuedMillis" : 1,
  "executeMillis" : 4567,
  "getResultMillis" : 0,
  "iterateMillis" : 813,
  "rows" : 1237,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 as t4,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_4 != 'Unspecified'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '')\nORDER BY date, t0, t1, t2, t3, t4 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 7,
  "runStartToQueryComplete" : 23
}, {
  "elapsedMillis" : 5614,
  "totalScheduledMillis" : 1178736,
  "cpuMillis" : 1062264,
  "queuedMillis" : 1,
  "executeMillis" : 3139,
  "getResultMillis" : 0,
  "iterateMillis" : 2519,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    t7,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        tw.tier_7 AS t7,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        tw.tier_7 != 'Unspecified' AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5, tw.tier_6, tw.tier_7\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '') AND\n    (''='' OR t7 = '')\nORDER BY date, teamId, project, t0, t1, t2, t3, t4, t5, t6, t7 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 8,
  "runStartToQueryComplete" : 27
}, {
  "elapsedMillis" : 4806,
  "totalScheduledMillis" : 228440,
  "cpuMillis" : 134227,
  "queuedMillis" : 1,
  "executeMillis" : 3685,
  "getResultMillis" : 0,
  "iterateMillis" : 1145,
  "rows" : 2806,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 as t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_6 != 'Unspecified'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5, tw.tier_6\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '')\nORDER BY date, t0, t1, t2, t3, t4, t5, t6 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 9,
  "runStartToQueryComplete" : 26
}, {
  "elapsedMillis" : 3133,
  "totalScheduledMillis" : 205458,
  "cpuMillis" : 126210,
  "queuedMillis" : 1,
  "executeMillis" : 2506,
  "getResultMillis" : 0,
  "iterateMillis" : 659,
  "rows" : 90,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        Lower(tw.tier_1) NOT IN ('global revenue', 'marketing')\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n\t(''='' OR t1 = '')\nORDER BY date, t0, t1 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 10,
  "runStartToQueryComplete" : 28
}, {
  "elapsedMillis" : 11485,
  "totalScheduledMillis" : 400603,
  "cpuMillis" : 191131,
  "queuedMillis" : 0,
  "executeMillis" : 6663,
  "getResultMillis" : 0,
  "iterateMillis" : 4857,
  "rows" : 3772,
  "error" : null,
  "scannedBytes" : 145400714,
  "query" : "WITH ec2_instances AS (\n  SELECT name, id, image_id, account_id, launched_on\n  FROM datalake.imhotep.aws_ec2\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n  AND state='running' \n  AND (emr_role is NULL or emr_role = '') -- Don't pull in EMR. Not Centos, centrally managed mostly, and has lots of churn. \n)\n, golden_name_amis AS (\n  SELECT id, name, display_name\n  FROM datalake.imhotep.aws_ami\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n  AND LOWER(display_name) LIKE '%golden%'\n)\n, amis AS (\n  SELECT id, name, display_name\n  FROM datalake.imhotep.aws_ami\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n)\n, aws_accounts AS (\n  SELECT \"key\" AS account_id, accountablePartyId AS teamId, accountablePartyType AS teamType\n  FROM datalake.imhotep.ownershipsnapshot\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n  AND namespace='AWS_ACCOUNT' AND statusflagvalue='ACTIVE'\n)\n, all_hosts AS (\n\tSELECT resource_id\n    FROM aws_inspector_findings\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n)\n, ownership AS (\n  SELECT teamid, displayname, intakejira, tier_0, tier_1, tier_2, tier_3, tier_4, tier_5, tier_6, email, engineeringleadldap, productleadldap, programleadldap, technologyleadldap, usersslackchannel\n  FROM datalake.imhotep.teamwrkssnapshot \n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n)\n\nSELECT DISTINCT(e.id), e.name AS ec2_name, e.account_id, o.teamid, o.tier_0, o.tier_1, o.tier_2, o.tier_3, o.tier_4, o.tier_5, o.tier_6, ch.resource_id, amis.name AS ami_name, amis.display_name AS ami_display_name\n\t, CASE WHEN ch.resource_id IS NOT NULL AND LOWER(amis.display_name) LIKE '%golden%' THEN 1 ELSE 0 END AS is_golden\n    , 1 as count\nFROM ec2_instances e\nLEFT OUTER JOIN aws_accounts a ON e.account_id= a.account_id\nLEFT OUTER JOIN all_hosts ch ON ch.resource_id = e.id\nLEFT OUTER JOIN amis ON amis.id = e.image_id\nLEFT OUTER JOIN ownership o ON a.teamId=o.teamid\nWHERE \n\t(''='' OR o.tier_0 = '')\n    AND (''='' OR o.tier_1 = '')\n    AND (''='' OR o.tier_2 = '')\n    AND (''='' OR o.tier_3 = '')\n    AND (''='' OR o.tier_4 = '')\n    AND o.tier_6 != 'Cluster'",
  "queryTables" : [ "datalakehive.imhotep.aws_ami", "datalakehive.imhotep.aws_ec2", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot", "skipperhive.imhotep.aws_inspector_findings" ],
  "queryIndex" : 11,
  "runStartToQueryComplete" : 36
}, {
  "elapsedMillis" : 4999,
  "totalScheduledMillis" : 57998,
  "cpuMillis" : 23027,
  "queuedMillis" : 1,
  "executeMillis" : 3955,
  "getResultMillis" : 0,
  "iterateMillis" : 1101,
  "rows" : 191,
  "error" : null,
  "scannedBytes" : 276112327,
  "query" : "WITH populated_day AS (\n    SELECT MIN(day) AS most_recent_day\n    FROM (\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"jiracloudissues$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n\n        UNION ALL\n\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"ownershipSnapshot$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n\n        UNION ALL\n\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"teamwrksSnapshot$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n    )\n)\n\n-- Count of a11y violations remediated within SLO in the last 30 days / (All a11y violations remediated within last 30 days + Open issues outside SLO)\nSELECT\n    teamId,\n\tproject,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Closed_Within_SLO,\n    ALL_REM_30 AS All_Remediated_Last_30,\n    UNREM AS Open_Outside_SLO,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    t7\nFROM (\n\tSELECT\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        tw.tier_7 AS t7,\n        \n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- last 30 days\n                  ((ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 1000) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  ((TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 1000) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- last 30 days\n                  (ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT) / 1000) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n                -- last 30 days\n                (ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.day = (SELECT most_recent_day from populated_day) AND\n        ow.day = (SELECT most_recent_day from populated_day) AND\n        tw.day = (SELECT most_recent_day from populated_day) AND\n        ji.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        ow.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        tw.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        tw.tier_1 NOT IN ('Global Revenue', 'Marketing')\n    GROUP BY ow.accountablePartyId, ji.projectkey, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5, tw.tier_6, tw.tier_7\n        HAVING COUNT(\n        CASE WHEN\n            ji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            -- last 30 days\n            (ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 86400 <= 30\n            THEN 1 END\n    ) IS NOT NULL AND (\n        COUNT(\n            CASE WHEN\n                ji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n                -- last 30 days\n                (ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 86400 <= 30\n                THEN 1 END\n        ) + COUNT(\n            CASE WHEN\n                (\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n                ) AND (\n                    (\n                        ji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                        (ji.unixtime - TRY_CAST(ji.createtimestamp AS BIGINT) / 1000) / 86400 > 30\n                    ) OR (\n                        -- SLO days to complete\n                        ji.priority NOT IN ('Blocker') AND\n                        (ji.unixtime - TRY_CAST(ji.createtimestamp AS BIGINT) / 1000) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) > 0\n    )\n)\nWHERE\n\t(''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '') AND\n    (''='' OR t7 = '')\nORDER BY teamId, project, t1, t2, t3, t4, t5, t6, t7 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.jiracloudissues$partitions", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.ownershipsnapshot$partitions", "datalakehive.imhotep.teamwrkssnapshot", "datalakehive.imhotep.teamwrkssnapshot$partitions" ],
  "queryIndex" : 12,
  "runStartToQueryComplete" : 29
}, {
  "elapsedMillis" : 2266,
  "totalScheduledMillis" : 1964,
  "cpuMillis" : 1456,
  "queuedMillis" : 1,
  "executeMillis" : 2179,
  "getResultMillis" : 0,
  "iterateMillis" : 116,
  "rows" : 1581,
  "error" : null,
  "scannedBytes" : 967746,
  "query" : "WITH golden_amis AS (\n    SELECT name, id, created_on, day\n    FROM datalake.imhotep.aws_ami\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n    AND REGEXP_LIKE(name, '^indeed_(ubuntu|(dsp_ecs_)?centos_7|amzn2|AL2023).*')\n)\n, ec2 AS (\n\tSELECT name, image_id, id, account_id, launched_on\n    FROM datalake.imhotep.aws_ec2\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n    AND state='running'\n    AND (emr_role='' OR emr_role IS NULL)\n)\nSELECT DISTINCT(e.id) AS ec2_id, e.name AS ec2_name, e.image_id, e.account_id, e.launched_on, g.name as ami_name\n\t, day(current_timestamp - from_iso8601_timestamp(e.launched_on)) as ec2_age_days\n    , day(current_timestamp - from_iso8601_timestamp(g.created_on)) as ami_age_days\n    /*\n    Cases:\n    \tlaunched_on > 90 days ago = not patched\n        launched_on < 90 days ago\n        \tcreated_on > 120 days ago = not patched -- Giving 30 day buffer given the golden AMI rebuild schedule. \n            created_on <= 120 days ago = patched \n    This does not flag instances that are not picking up the newest image on rebuild but that image is still less than 120 days old. Technically still patched, but on track to not be patched. \n    */\n    , CASE WHEN \n        day(current_timestamp - from_iso8601_timestamp(e.launched_on)) <= 90 -- Must update at least every 90 days\n        \tAND day(current_timestamp - from_iso8601_timestamp(g.created_on)) <= 120 -- If the image it built from is over 120 days old, it's not following the golden image releases\n        THEN 1\n        ELSE 0\n      END AS patched\n    , 1 AS count\nfrom ec2 e\nINNER JOIN golden_amis g\nON e.image_id=g.id\n\n",
  "queryTables" : [ "datalakehive.imhotep.aws_ami", "datalakehive.imhotep.aws_ec2" ],
  "queryIndex" : 13,
  "runStartToQueryComplete" : 31
}, {
  "elapsedMillis" : 7529,
  "totalScheduledMillis" : 1711814,
  "cpuMillis" : 1155309,
  "queuedMillis" : 1,
  "executeMillis" : 2855,
  "getResultMillis" : 0,
  "iterateMillis" : 4925,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '')\nORDER BY date, teamId, project, t0, t1 ASC ",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 14,
  "runStartToQueryComplete" : 37
}, {
  "elapsedMillis" : 8240,
  "totalScheduledMillis" : 1702261,
  "cpuMillis" : 1200383,
  "queuedMillis" : 2,
  "executeMillis" : 3213,
  "getResultMillis" : 0,
  "iterateMillis" : 5065,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '')\nORDER BY date, teamId, project, t0, t1, t2 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 15,
  "runStartToQueryComplete" : 38
}, {
  "elapsedMillis" : 8384,
  "totalScheduledMillis" : 136287,
  "cpuMillis" : 54386,
  "queuedMillis" : 1,
  "executeMillis" : 5317,
  "getResultMillis" : 0,
  "iterateMillis" : 3120,
  "rows" : 3772,
  "error" : null,
  "scannedBytes" : 145400714,
  "query" : "WITH ec2_instances AS (\n  SELECT name, id, image_id, account_id, launched_on\n  FROM datalake.imhotep.aws_ec2\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n  AND state='running' \n  AND (emr_role is NULL or emr_role = '') -- Don't pull in EMR. Not Centos, centrally managed mostly, and has lots of churn. \n)\n, golden_name_amis AS (\n  SELECT id, name, display_name\n  FROM datalake.imhotep.aws_ami\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n  AND LOWER(display_name) LIKE '%golden%'\n)\n, amis AS (\n  SELECT id, name, display_name\n  FROM datalake.imhotep.aws_ami\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n)\n, aws_accounts AS (\n  SELECT \"key\" AS account_id, accountablePartyId AS teamId, accountablePartyType AS teamType\n  FROM datalake.imhotep.ownershipsnapshot\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n  AND namespace='AWS_ACCOUNT' AND statusflagvalue='ACTIVE'\n)\n, all_hosts AS (\n\tSELECT resource_id\n    FROM aws_inspector_findings\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n)\n, ownership AS (\n  SELECT teamid, displayname, intakejira, tier_0, tier_1, tier_2, tier_3, tier_4, tier_5, tier_6, email, engineeringleadldap, productleadldap, programleadldap, technologyleadldap, usersslackchannel\n  FROM datalake.imhotep.teamwrkssnapshot \n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n)\n\nSELECT DISTINCT(e.id), e.name AS ec2_name, e.account_id, o.teamid, o.tier_0, o.tier_1, o.tier_2, o.tier_3, o.tier_4, o.tier_5, o.tier_6, ch.resource_id, amis.name AS ami_name, amis.display_name AS ami_display_name\n\t, CASE WHEN ch.resource_id IS NOT NULL AND LOWER(amis.display_name) LIKE '%golden%' THEN 1 ELSE 0 END AS is_golden\n    , 1 as count\nFROM ec2_instances e\nLEFT OUTER JOIN aws_accounts a ON e.account_id= a.account_id\nLEFT OUTER JOIN all_hosts ch ON ch.resource_id = e.id\nLEFT OUTER JOIN amis ON amis.id = e.image_id\nLEFT OUTER JOIN ownership o ON a.teamId=o.teamid\nWHERE \n\t(''='' OR o.tier_0 = '')\n    AND (''='' OR o.tier_1 = '')\n    AND (''='' OR o.tier_2 = '')\n    AND (''='' OR o.tier_3 = '')\n    AND (''='' OR o.tier_4 = '')\n    AND o.tier_6 != 'Cluster'",
  "queryTables" : [ "datalakehive.imhotep.aws_ami", "datalakehive.imhotep.aws_ec2", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot", "skipperhive.imhotep.aws_inspector_findings" ],
  "queryIndex" : 16,
  "runStartToQueryComplete" : 38
}, {
  "elapsedMillis" : 6818,
  "totalScheduledMillis" : 25099216,
  "cpuMillis" : 3580473,
  "queuedMillis" : 1,
  "executeMillis" : 1153,
  "getResultMillis" : 0,
  "iterateMillis" : 5698,
  "rows" : 988,
  "error" : null,
  "scannedBytes" : 155851172564,
  "query" : "-- Calculate the block rate change for each day compared to a rolling average of the previous 7 (over a total window of 30 days)\nWITH daily_data AS (\n    SELECT\n        date(from_unixtime(lp.unixtime)) AS date,\n        appName,\n        moderationApi, \n        moderationType, \n\t\tSUM(CAST(lp.flagged  AS DOUBLE)) as block_count,\n        COUNT(*) AS request_count,\n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by appName, moderationApi, moderationType ORDER BY date(from_unixtime(lp.unixtime)) ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING) AS weekly_block_count,\n\t\tSUM(COUNT(*)) OVER (partition by appName, moderationApi, moderationType ORDER BY date(from_unixtime(lp.unixtime)) ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING) AS weekly_request_count\n    FROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.flagged IS NOT NULL\n        AND lp.metric = 'moderation-text'\n        AND unixtime BETWEEN imhotep_unixtime(DATE(CURRENT_DATE) - interval '60' day) AND imhotep_unixtime(DATE(CURRENT_DATE))\n        -- see rate_change query for filters by appName etc.\n    GROUP BY\n        date(from_unixtime(lp.unixtime)),\n        appName, \n        moderationApi, \n        moderationType \n),\nblock_rate AS (\n    SELECT\n        date,\n        appName, \n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        block_count * 1.0 / request_count as raw_block_rate,\n        -- We adjust the proportion estimates by adding z^2/2 successes and z^2/2 failures (z^2 obs total) to the counts.\n        -- This can be thought of as a Bayesian prior, or as a correction to the Normal approximation for rates close to 0 or 1.\n        -- For large values of request_count this converges to the raw proportion (block_rate ~ raw_block_rate).\n        -- Using z=3.0, in other words, we're going to require a \"3-sigma\" detection.\n        (block_count + 4.5) * 1.0 / (request_count + 9.0) as block_rate, -- corrected/smoothed\n        weekly_block_count * 1.0 /  weekly_request_count as raw_weekly_block_rate,  \n        (weekly_block_count + 4.5) * 1.0 / ( weekly_request_count + 9.0) as  weekly_block_rate, -- corrected/smoothed\n        ((block_count + 4.5) * 1.0 / (request_count + 9.0)) - ((weekly_block_count + 4.5) * 1.0 / ( weekly_request_count + 9.0)) as change,\n        sum(1.0) over (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING) as previous_dates_count\n    FROM\n        daily_data\n),\n\nblock_rate_change AS (\n    SELECT\n        date,\n        appName, \n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        STDDEV(block_rate-weekly_block_rate) OVER (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING) AS stddev_obs,\n        SQRT((block_rate * (1.0 - block_rate) / request_count) + ((weekly_block_rate * (1.0 - weekly_block_rate) / weekly_request_count))) as stddev_approx,\n        raw_block_rate,  \n        block_rate,\n        raw_weekly_block_rate,  \n        weekly_block_rate, -- corrected/smoothed\n        block_rate - weekly_block_rate as change,\n\t\tprevious_dates_count        \n    FROM\n        block_rate\n),\nconfidence_interval AS (\n    SELECT\n        date,\n        appName, \n        moderationApi, \n        moderationType,\n        stddev_obs,\n\t\tstddev_approx,\n        greatest(stddev_approx, stddev_obs) as stddev,\n        block_rate,\n        block_rate - 3.0 * greatest(stddev_approx, stddev_obs)  AS block_rate_lower_bound,\n        block_rate + 3.0 * greatest(stddev_approx, stddev_obs) AS block_rate_upper_bound,          \n        weekly_block_rate,\n\t\tweekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,        \n        change,\n        request_count,\n        change - 3.0 * greatest(stddev_approx, stddev_obs) AS change_lower_bound,\n        change + 3.0 * greatest(stddev_approx, stddev_obs) AS change_upper_bound,\n        previous_dates_count        \n    FROM\n        block_rate_change\n    WHERE\n    \tweekly_request_count > 100\n        and request_count > 100\n)\nSELECT\n    date,\n    appName, \n    moderationApi, \n    moderationType,\n    request_count,\n    stddev_obs,\n    stddev_approx,\n    stddev,\n    block_rate,\n\tblock_rate_lower_bound,\n    block_rate_upper_bound,\n    weekly_block_rate,\n    weekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,    \n    change,\n    change_lower_bound,\n    change_upper_bound,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (previous_dates_count > 6), 1, 0) as is_sig_change,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (date = (max(date) over ())) and (previous_dates_count > 6), 1, 0) as is_latest_date_sig_change,\n    change/stddev as z_score,\n    IF(date = (max(date) over ()), change/stddev, NULL) as latest_date_z_score, \n    max(date) over () as latest_data_date,\n    previous_dates_count            \nFROM\n    confidence_interval -- Note: return values for all dates unlike with the alerting query\nWHERE\n    (change/stddev) IS NOT NULL\n     -- see rate_change query for filters by appName etc.    \nORDER BY\n    date DESC, appName ASC, moderationApi ASC, moderationType DESC",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 17,
  "runStartToQueryComplete" : 36
}, {
  "elapsedMillis" : 5397,
  "totalScheduledMillis" : 24104772,
  "cpuMillis" : 3620588,
  "queuedMillis" : 1,
  "executeMillis" : 1081,
  "getResultMillis" : 0,
  "iterateMillis" : 4332,
  "rows" : 988,
  "error" : null,
  "scannedBytes" : 155850086856,
  "query" : "-- Calculate the block rate change for each day compared to a rolling average of the previous 7 (over a total window of 30 days)\nWITH daily_data AS (\n    SELECT\n        date(from_unixtime(lp.unixtime)) AS date,\n        appName,\n        moderationApi, \n        moderationType, \n\t\tSUM(CAST(lp.flagged  AS DOUBLE)) as block_count,\n        COUNT(*) AS request_count,\n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by appName, moderationApi, moderationType ORDER BY date(from_unixtime(lp.unixtime)) ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING) AS weekly_block_count,\n\t\tSUM(COUNT(*)) OVER (partition by appName, moderationApi, moderationType ORDER BY date(from_unixtime(lp.unixtime)) ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING) AS weekly_request_count\n    FROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.flagged IS NOT NULL\n        AND lp.metric = 'moderation-text'\n        AND unixtime BETWEEN imhotep_unixtime(DATE(CURRENT_DATE) - interval '60' day) AND imhotep_unixtime(DATE(CURRENT_DATE))\n        -- see rate_change query for filters by appName etc.\n    GROUP BY\n        date(from_unixtime(lp.unixtime)),\n        appName, \n        moderationApi, \n        moderationType \n),\nblock_rate AS (\n    SELECT\n        date,\n        appName, \n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        block_count * 1.0 / request_count as raw_block_rate,\n        -- We adjust the proportion estimates by adding z^2/2 successes and z^2/2 failures (z^2 obs total) to the counts.\n        -- This can be thought of as a Bayesian prior, or as a correction to the Normal approximation for rates close to 0 or 1.\n        -- For large values of request_count this converges to the raw proportion (block_rate ~ raw_block_rate).\n        -- Using z=3.0, in other words, we're going to require a \"3-sigma\" detection.\n        (block_count + 4.5) * 1.0 / (request_count + 9.0) as block_rate, -- corrected/smoothed\n        weekly_block_count * 1.0 /  weekly_request_count as raw_weekly_block_rate,  \n        (weekly_block_count + 4.5) * 1.0 / ( weekly_request_count + 9.0) as  weekly_block_rate, -- corrected/smoothed\n        ((block_count + 4.5) * 1.0 / (request_count + 9.0)) - ((weekly_block_count + 4.5) * 1.0 / ( weekly_request_count + 9.0)) as change,\n        sum(1.0) over (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING) as previous_dates_count\n    FROM\n        daily_data\n),\n\nblock_rate_change AS (\n    SELECT\n        date,\n        appName, \n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        STDDEV(block_rate-weekly_block_rate) OVER (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING) AS stddev_obs,\n        SQRT((block_rate * (1.0 - block_rate) / request_count) + ((weekly_block_rate * (1.0 - weekly_block_rate) / weekly_request_count))) as stddev_approx,\n        raw_block_rate,  \n        block_rate,\n        raw_weekly_block_rate,  \n        weekly_block_rate, -- corrected/smoothed\n        block_rate - weekly_block_rate as change,\n\t\tprevious_dates_count        \n    FROM\n        block_rate\n),\nconfidence_interval AS (\n    SELECT\n        date,\n        appName, \n        moderationApi, \n        moderationType,\n        stddev_obs,\n\t\tstddev_approx,\n        greatest(stddev_approx, stddev_obs) as stddev,\n        block_rate,\n        block_rate - 3.0 * greatest(stddev_approx, stddev_obs)  AS block_rate_lower_bound,\n        block_rate + 3.0 * greatest(stddev_approx, stddev_obs) AS block_rate_upper_bound,          \n        weekly_block_rate,\n\t\tweekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,        \n        change,\n        request_count,\n        change - 3.0 * greatest(stddev_approx, stddev_obs) AS change_lower_bound,\n        change + 3.0 * greatest(stddev_approx, stddev_obs) AS change_upper_bound,\n        previous_dates_count        \n    FROM\n        block_rate_change\n    WHERE\n    \tweekly_request_count > 100\n        and request_count > 100\n)\nSELECT\n    date,\n    appName, \n    moderationApi, \n    moderationType,\n    request_count,\n    stddev_obs,\n    stddev_approx,\n    stddev,\n    block_rate,\n\tblock_rate_lower_bound,\n    block_rate_upper_bound,\n    weekly_block_rate,\n    weekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,    \n    change,\n    change_lower_bound,\n    change_upper_bound,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (previous_dates_count > 6), 1, 0) as is_sig_change,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (date = (max(date) over ())) and (previous_dates_count > 6), 1, 0) as is_latest_date_sig_change,\n    change/stddev as z_score,\n    IF(date = (max(date) over ()), change/stddev, NULL) as latest_date_z_score, \n    max(date) over () as latest_data_date,\n    previous_dates_count            \nFROM\n    confidence_interval -- Note: return values for all dates unlike with the alerting query\nWHERE\n    (change/stddev) IS NOT NULL\n     -- see rate_change query for filters by appName etc.    \nORDER BY\n    date DESC, appName ASC, moderationApi ASC, moderationType DESC",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 18,
  "runStartToQueryComplete" : 39
}, {
  "elapsedMillis" : 4645,
  "totalScheduledMillis" : 175828,
  "cpuMillis" : 85348,
  "queuedMillis" : 1,
  "executeMillis" : 3278,
  "getResultMillis" : 0,
  "iterateMillis" : 1407,
  "rows" : 240,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing')\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '')\nORDER BY date, t0, t1, t2 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 19,
  "runStartToQueryComplete" : 38
}, {
  "elapsedMillis" : 4623,
  "totalScheduledMillis" : 823006,
  "cpuMillis" : 735484,
  "queuedMillis" : 1,
  "executeMillis" : 2467,
  "getResultMillis" : 0,
  "iterateMillis" : 2184,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        Lower(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0\n)\nWHERE\n\t(t0 = 'Indeed')\nORDER BY date, teamId, project, t0 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 20,
  "runStartToQueryComplete" : 40
}, {
  "elapsedMillis" : 4995,
  "totalScheduledMillis" : 1040051,
  "cpuMillis" : 954804,
  "queuedMillis" : 1,
  "executeMillis" : 2687,
  "getResultMillis" : 0,
  "iterateMillis" : 2336,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        tw.tier_5 AS t5,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        tw.tier_5 != 'Unspecified' AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '')\nORDER BY date, teamId, project, t0, t1, t2, t3, t4, t5 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 21,
  "runStartToQueryComplete" : 46
}, {
  "elapsedMillis" : 3334,
  "totalScheduledMillis" : 180820,
  "cpuMillis" : 108646,
  "queuedMillis" : 0,
  "executeMillis" : 2523,
  "getResultMillis" : 0,
  "iterateMillis" : 831,
  "rows" : 3063,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 as t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        tw.tier_7 AS t7,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_7 != 'Unspecified'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5, tw.tier_6, tw.tier_7\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    t7,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '') AND\n    (''='' OR t7 = '') \nORDER BY date, t0, t1, t2, t3, t4, t5, t6, t7 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 22,
  "runStartToQueryComplete" : 45
}, {
  "elapsedMillis" : 3209,
  "totalScheduledMillis" : 178026,
  "cpuMillis" : 105506,
  "queuedMillis" : 1,
  "executeMillis" : 2545,
  "getResultMillis" : 0,
  "iterateMillis" : 690,
  "rows" : 2134,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 as t4,\n        tw.tier_5 AS t5,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_5 != 'Unspecified'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '')\nORDER BY date, t0, t1, t2, t3, t4, t5 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 23,
  "runStartToQueryComplete" : 49
}, {
  "elapsedMillis" : 1937,
  "totalScheduledMillis" : 1420,
  "cpuMillis" : 1216,
  "queuedMillis" : 0,
  "executeMillis" : 1908,
  "getResultMillis" : 0,
  "iterateMillis" : 64,
  "rows" : 1581,
  "error" : null,
  "scannedBytes" : 967746,
  "query" : "WITH golden_amis AS (\n    SELECT name, id, created_on, day\n    FROM datalake.imhotep.aws_ami\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n    AND REGEXP_LIKE(name, '^indeed_(ubuntu|(dsp_ecs_)?centos_7|amzn2|AL2023).*')\n)\n, ec2 AS (\n\tSELECT name, image_id, id, account_id, launched_on\n    FROM datalake.imhotep.aws_ec2\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n    AND state='running'\n    AND (emr_role='' OR emr_role IS NULL)\n)\nSELECT DISTINCT(e.id) AS ec2_id, e.name AS ec2_name, e.image_id, e.account_id, e.launched_on, g.name as ami_name\n\t, day(current_timestamp - from_iso8601_timestamp(e.launched_on)) as ec2_age_days\n    , day(current_timestamp - from_iso8601_timestamp(g.created_on)) as ami_age_days\n    /*\n    Cases:\n    \tlaunched_on > 90 days ago = not patched\n        launched_on < 90 days ago\n        \tcreated_on > 120 days ago = not patched -- Giving 30 day buffer given the golden AMI rebuild schedule. \n            created_on <= 120 days ago = patched \n    This does not flag instances that are not picking up the newest image on rebuild but that image is still less than 120 days old. Technically still patched, but on track to not be patched. \n    */\n    , CASE WHEN \n        day(current_timestamp - from_iso8601_timestamp(e.launched_on)) <= 90 -- Must update at least every 90 days\n        \tAND day(current_timestamp - from_iso8601_timestamp(g.created_on)) <= 120 -- If the image it built from is over 120 days old, it's not following the golden image releases\n        THEN 1\n        ELSE 0\n      END AS patched\n    , 1 AS count\nfrom ec2 e\nINNER JOIN golden_amis g\nON e.image_id=g.id\n\n",
  "queryTables" : [ "datalakehive.imhotep.aws_ami", "datalakehive.imhotep.aws_ec2" ],
  "queryIndex" : 24,
  "runStartToQueryComplete" : 47
}, {
  "elapsedMillis" : 4651,
  "totalScheduledMillis" : 1012782,
  "cpuMillis" : 941626,
  "queuedMillis" : 1,
  "executeMillis" : 2455,
  "getResultMillis" : 0,
  "iterateMillis" : 2224,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_6 != 'Unspecified' AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5, tw.tier_6\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '')\nORDER BY date, teamId, project, t0, t1, t2, t3, t4, t5, t6 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 25,
  "runStartToQueryComplete" : 52
}, {
  "elapsedMillis" : 6471,
  "totalScheduledMillis" : 98008,
  "cpuMillis" : 77289,
  "queuedMillis" : 1,
  "executeMillis" : 4820,
  "getResultMillis" : 0,
  "iterateMillis" : 1677,
  "rows" : 3772,
  "error" : null,
  "scannedBytes" : 145400714,
  "query" : "WITH ec2_instances AS (\n  SELECT name, id, image_id, account_id, launched_on\n  FROM datalake.imhotep.aws_ec2\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n  AND state='running' \n  AND (emr_role is NULL or emr_role = '') -- Don't pull in EMR. Not Centos, centrally managed mostly, and has lots of churn. \n)\n, golden_name_amis AS (\n  SELECT id, name, display_name\n  FROM datalake.imhotep.aws_ami\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n  AND LOWER(display_name) LIKE '%golden%'\n)\n, amis AS (\n  SELECT id, name, display_name\n  FROM datalake.imhotep.aws_ami\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n)\n, aws_accounts AS (\n  SELECT \"key\" AS account_id, accountablePartyId AS teamId, accountablePartyType AS teamType\n  FROM datalake.imhotep.ownershipsnapshot\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n  AND namespace='AWS_ACCOUNT' AND statusflagvalue='ACTIVE'\n)\n, all_hosts AS (\n\tSELECT resource_id\n    FROM aws_inspector_findings\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n)\n, ownership AS (\n  SELECT teamid, displayname, intakejira, tier_0, tier_1, tier_2, tier_3, tier_4, tier_5, tier_6, email, engineeringleadldap, productleadldap, programleadldap, technologyleadldap, usersslackchannel\n  FROM datalake.imhotep.teamwrkssnapshot \n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n)\n\nSELECT DISTINCT(e.id), e.name AS ec2_name, e.account_id, o.teamid, o.tier_0, o.tier_1, o.tier_2, o.tier_3, o.tier_4, o.tier_5, o.tier_6, ch.resource_id, amis.name AS ami_name, amis.display_name AS ami_display_name\n\t, CASE WHEN ch.resource_id IS NOT NULL AND LOWER(amis.display_name) LIKE '%golden%' THEN 1 ELSE 0 END AS is_golden\n    , 1 as count\nFROM ec2_instances e\nLEFT OUTER JOIN aws_accounts a ON e.account_id= a.account_id\nLEFT OUTER JOIN all_hosts ch ON ch.resource_id = e.id\nLEFT OUTER JOIN amis ON amis.id = e.image_id\nLEFT OUTER JOIN ownership o ON a.teamId=o.teamid\nWHERE \n\t(''='' OR o.tier_0 = '')\n    AND (''='' OR o.tier_1 = '')\n    AND (''='' OR o.tier_2 = '')\n    AND (''='' OR o.tier_3 = '')\n    AND (''='' OR o.tier_4 = '')\n    AND o.tier_6 != 'Cluster'",
  "queryTables" : [ "datalakehive.imhotep.aws_ami", "datalakehive.imhotep.aws_ec2", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot", "skipperhive.imhotep.aws_inspector_findings" ],
  "queryIndex" : 26,
  "runStartToQueryComplete" : 55
}, {
  "elapsedMillis" : 3211,
  "totalScheduledMillis" : 171885,
  "cpuMillis" : 102930,
  "queuedMillis" : 1,
  "executeMillis" : 2608,
  "getResultMillis" : 0,
  "iterateMillis" : 631,
  "rows" : 30,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        ji.issuetype = 'Bug'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d')\n)\n\nSELECT\n\tdate,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nORDER BY date ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 27,
  "runStartToQueryComplete" : 55
}, {
  "elapsedMillis" : 4399,
  "totalScheduledMillis" : 10219,
  "cpuMillis" : 4899,
  "queuedMillis" : 1,
  "executeMillis" : 3745,
  "getResultMillis" : 0,
  "iterateMillis" : 680,
  "rows" : 61,
  "error" : null,
  "scannedBytes" : 85620161,
  "query" : "WITH\n\npopulated_day AS (\n    SELECT MIN(day) AS most_recent_day\n    FROM (\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"jiracloudissues$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n\n        UNION ALL\n\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"ownershipSnapshot$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n\n        UNION ALL\n\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"teamwrksSnapshot$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n    )\n)\n\n-- Count of a11y violations remediated within SLO in the last 30 days / (All a11y violations remediated within last 30 days + Open issues)\nSELECT\n    inslo,\n    DATE_FORMAT(duedate, '%Y-%m-%d') AS duedate,\n    teamId,\n\t-- project,\n    issuekey,\n    -- issuetype,\n    priority,\n    status,\n    summary,\n    lastupdated,\n    DATE_FORMAT(createdate, '%Y-%m-%d') AS createdate,\n    labels,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    t7\nFROM (\n\tSELECT\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        ji.issuekey AS issuekey,\n        ji.issuetype AS issuetype,\n        ji.priority AS priority,\n        ji.summary AS summary,\n        ji.status AS status,\n        DATE_FORMAT(FROM_UNIXTIME(CAST(ji.lastupdated AS BIGINT) / 1000), '%Y-%m-%d') AS lastupdated,\n\t\tDATE_TRUNC('day', DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')) AS createdate,\n        DATE_TRUNC('day', DATE_ADD('day',\n        \tCASE \n                WHEN ji.priority = 'Blocker' THEN 30 \n                ELSE 90 \n            END, \n            DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')\n        )) AS duedate,\n\t\tCAST(DATE_ADD('day',\n            CASE \n                WHEN ji.priority = 'Blocker' THEN 30 \n                ELSE 90 \n            END, \n            DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')\n        ) > CURRENT_DATE AS BOOLEAN) AS inslo,\n        ji.labels AS labels,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        tw.tier_7 AS t7\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.day = (SELECT most_recent_day from populated_day) AND\n        ow.day = (SELECT most_recent_day from populated_day) AND\n        tw.day = (SELECT most_recent_day from populated_day) AND\n        ji.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        ow.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        tw.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            -- The line below will include \"Pending Closure\" tickets in the resulting table\n            -- OR ji.resolutiontimestamp = 0\n        )\n    GROUP BY\n    \tow.accountablePartyId,\n    \tji.projectkey,\n        ji.issuekey,\n\t\tji.issuetype,\n        ji.priority,\n        ji.summary,\n        ji.status,\n        DATE_FORMAT(FROM_UNIXTIME(CAST(ji.lastupdated AS BIGINT) / 1000), '%Y-%m-%d'),\n\t\tDATE_TRUNC('day', DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')),\n        DATE_TRUNC('day', DATE_ADD('day',\n            CASE \n                WHEN ji.priority = 'Blocker' THEN 30\n                ELSE 90 \n           \tEND, \n            DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')\n        )),\n        CAST(DATE_ADD('day',\n            CASE \n                WHEN ji.priority = 'Blocker' THEN 30 \n                ELSE 90 \n            END, \n            DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')\n        ) > CURRENT_DATE AS BOOLEAN),\n        ji.labels,\n        tw.tier_0,\n        tw.tier_1,\n        tw.tier_2,\n        tw.tier_3,\n        tw.tier_4,\n        tw.tier_5,\n        tw.tier_6,\n        tw.tier_7\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    ('Business Technology & Trust'='' OR t1 = 'Business Technology & Trust') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '') AND\n    (''='' OR t7 = '')\nORDER BY \n\tinslo ASC,\n\tduedate ASC ",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.jiracloudissues$partitions", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.ownershipsnapshot$partitions", "datalakehive.imhotep.teamwrkssnapshot", "datalakehive.imhotep.teamwrkssnapshot$partitions" ],
  "queryIndex" : 28,
  "runStartToQueryComplete" : 64
}, {
  "elapsedMillis" : 3326,
  "totalScheduledMillis" : 3489230,
  "cpuMillis" : 576703,
  "queuedMillis" : 1,
  "executeMillis" : 1195,
  "getResultMillis" : 0,
  "iterateMillis" : 2152,
  "rows" : 555,
  "error" : null,
  "scannedBytes" : 10157844764,
  "query" : "WITH daily_data AS (\n    SELECT\n        date_trunc('hour', from_unixtime(lp.unixtime)) as date,\n        moderationApi, \n        moderationType, \n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 1 PRECEDING AND current row) AS block_count,\n\t\tSUM(COUNT(*)) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 1 PRECEDING AND current row) AS request_count,\n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) AS weekly_block_count,\n\t\tSUM(COUNT(*)) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) AS weekly_request_count\n    FROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.flagged IS NOT NULL\n        AND lp.metric = 'moderation-text'\n        AND unixtime BETWEEN imhotep_unixtime(timestamp '2024-10-24') AND imhotep_unixtime(timestamp '2024-10-30')\n        and True\n    GROUP BY\n        date_trunc('hour', from_unixtime(lp.unixtime)),\n        moderationApi, \n        moderationType \n),\nblock_rate AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        cast(request_count * 6 as double) / cast(1 * weekly_request_count as double) as relative_request_rate,\n        cast(block_count as double) / request_count as raw_block_rate,\n        -- We adjust the proportion estimates by adding z^2/2 successes and z^2/2 failures (z^2 obs total) to the counts.\n        -- This can be thought of as a Bayesian prior, or as a correction to the Normal approximation for rates close to 0 or 1.\n        -- For large values of request_count this converges to the raw proportion (block_rate ~ raw_block_rate).\n        -- Using z=3.0, in other words, we're going to require a \"3-sigma\" detection.\n        cast(block_count + 4.5 as double) / (request_count + 9.0) as block_rate, -- corrected/smoothed\n        cast(block_count as double) / (request_count + 9.0) as block_rate_zc, -- zero-centered corrected/smoothed rate (only adding to denominator)\n        cast(weekly_block_count + (6 * 4.5 / 1) as double) / (weekly_request_count + (6 * 9.0 / 1)) as  weekly_block_rate, -- corrected/smoothed\n        cast(weekly_block_count as double) / (weekly_request_count + (6 * 9.0 / 1)) as  weekly_block_rate_zc, -- corrected/smoothed        \n        cast(weekly_block_count as double) /  weekly_request_count as raw_weekly_block_rate,  \n        (cast(block_count + 4.5 as double) / (request_count + 9.0)) - (cast(weekly_block_count + (6 * 4.5 / 1) as double) / (weekly_request_count + (6 * 9.0 / 1))) as change,\n        sum(1.0) over (partition by moderationApi, moderationType ORDER BY date ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) as previous_dates_count\n    FROM\n        daily_data\n),\n\nblock_rate_change AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        request_count,\n\t\trelative_request_rate,        \n        weekly_request_count,\n        STDDEV(block_rate-weekly_block_rate) OVER (partition by moderationApi, moderationType ORDER BY date ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) AS stddev_obs,\n        SQRT((block_rate * (1.0 - block_rate) / request_count) + ((weekly_block_rate * (1.0 - weekly_block_rate) / weekly_request_count))) as stddev_approx,\n        raw_block_rate,  \n        block_rate,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        raw_weekly_block_rate,  \n        weekly_block_rate, -- corrected/smoothed\n        change,\n        case weekly_block_rate_zc\n           when 0 then 0\n           else (block_rate_zc - weekly_block_rate_zc) \n        end as change_zc,\n\t\tprevious_dates_count             \n    FROM\n        block_rate\n),\nconfidence_interval AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        stddev_obs,\n\t\tstddev_approx,\n        greatest(stddev_approx, stddev_obs) as stddev,\n        block_rate,\n        block_rate - 6 * greatest(stddev_approx, stddev_obs)  AS block_rate_lower_bound,\n        block_rate + 6 * greatest(stddev_approx, stddev_obs) AS block_rate_upper_bound,          \n        weekly_block_rate,\n\t\tweekly_request_count,\n\t\traw_block_rate,        \n        raw_weekly_block_rate,        \n        change,\n        change_zc,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        request_count,\n\t\trelative_request_rate,                \n        change - 6 * greatest(stddev_approx, stddev_obs) AS change_lower_bound,\n        change + 6 * greatest(stddev_approx, stddev_obs) AS change_upper_bound,\n        previous_dates_count,\n        row_number() OVER (partition by moderationApi, moderationType ORDER BY date) as row_n         \n    FROM\n        block_rate_change\n    --WHERE\n    --\tweekly_request_count > 100\n    --    and request_count > 100\n)\nSELECT\n    date,\n    moderationApi, \n    moderationType,\n    request_count,\n\trelative_request_rate,            \n    stddev_obs,\n    stddev_approx,\n    stddev,\n    block_rate,\n\tblock_rate_lower_bound,\n    block_rate_upper_bound,\n    weekly_block_rate,\n    weekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,    \nchange,\n    change / weekly_block_rate as relative_change,\n    change_zc / weekly_block_rate_zc as relative_change_zc,\n    change_zc,\n    block_rate_zc,\n    weekly_block_rate_zc,        \n    change_lower_bound,\n    change_upper_bound,\n    change_lower_bound * 1.0 / weekly_block_rate as relative_change_lower_bound,\n    change_upper_bound * 1.0 / weekly_block_rate as relative_change_upper_bound,\n    greatest(change_lower_bound / weekly_block_rate, 0) as relative_change_lower_bound_sig,\n    least(change_upper_bound / weekly_block_rate, 0) as relative_change_upper_bound_sig,     \n    IF((change_lower_bound > 0 or change_upper_bound<0) and (previous_dates_count > 6), 1, 0) as is_sig_change,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (date = (max(date) over ())) and (previous_dates_count > 6), 1, 0) as is_latest_date_sig_change,\n    change/stddev as z_score,\n    IF(date = (max(date) over ()), change/stddev, NULL) as latest_date_z_score, \n    max(date) over () as latest_data_date,\n    previous_dates_count            \nFROM\n    confidence_interval -- Note: return values for all dates unlike with the alerting query\nWHERE\n    (change/stddev) IS NOT NULL\n    and ((row_n % 1 = 0)  or (abs(change/stddev) > 6))\n    and previous_dates_count > (0.9 * 6)\nORDER BY\n    date DESC, moderationApi ASC, moderationType DESC",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 29,
  "runStartToQueryComplete" : 75
}, {
  "elapsedMillis" : 2774,
  "totalScheduledMillis" : 2364780,
  "cpuMillis" : 882588,
  "queuedMillis" : 1,
  "executeMillis" : 1300,
  "getResultMillis" : 0,
  "iterateMillis" : 1557,
  "rows" : 2425,
  "error" : null,
  "scannedBytes" : 10522911129,
  "query" : "WITH daily_data AS (\n    SELECT\n        date_trunc('hour', from_unixtime(lp.unixtime)) as date,\n        appName,\n        moderationApi, \n        moderationType, \n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 1 PRECEDING AND current row) AS block_count,\n\t\tSUM(COUNT(*)) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 1 PRECEDING AND current row) AS request_count,\n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) AS weekly_block_count,\n\t\tSUM(COUNT(*)) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) AS weekly_request_count\n    FROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.flagged IS NOT NULL\n        AND lp.metric = 'moderation-text'\n        AND unixtime BETWEEN imhotep_unixtime(timestamp '2024-10-24') AND imhotep_unixtime(timestamp '2024-10-30')\n        and True\n        -- see rate_change query for filters by appName etc.\n    GROUP BY\n        date_trunc('hour', from_unixtime(lp.unixtime)),\n\t\tappName,         \n        moderationApi, \n        moderationType \n),\nblock_rate AS (\n    SELECT\n        date,\n\t\tappName, \n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        cast(request_count * 6 as double) / cast(1 * weekly_request_count as double) as relative_request_rate,\n        cast(block_count as double) / request_count as raw_block_rate,\n        -- We adjust the proportion estimates by adding z^2/2 successes and z^2/2 failures (z^2 obs total) to the counts.\n        -- This can be thought of as a Bayesian prior, or as a correction to the Normal approximation for rates close to 0 or 1.\n        -- For large values of request_count this converges to the raw proportion (block_rate ~ raw_block_rate).\n        -- Using z=3.0, in other words, we're going to require a \"3-sigma\" detection.\n        cast(block_count + 4.5 as double) / (request_count + 9.0) as block_rate, -- corrected/smoothed\n        cast(block_count as double) / (request_count + 9.0) as block_rate_zc, -- zero-centered corrected/smoothed rate (only adding to denominator)\n        cast(weekly_block_count + (6 * 4.5 / 1) as double) / (weekly_request_count + (6 * 9.0 / 1)) as  weekly_block_rate, -- corrected/smoothed\n        cast(weekly_block_count as double) / (weekly_request_count + (6 * 9.0 / 1)) as  weekly_block_rate_zc, -- corrected/smoothed        \n        cast(weekly_block_count as double) /  weekly_request_count as raw_weekly_block_rate,  \n        (cast(block_count + 4.5 as double) / (request_count + 9.0)) - (cast(weekly_block_count + (6 * 4.5 / 1) as double) / (weekly_request_count + (6 * 9.0 / 1))) as change,\n        sum(1.0) over (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) as previous_dates_count\n    FROM\n        daily_data\n),\n\nblock_rate_change AS (\n    SELECT\n        date,\n\t\tappName,         \n        moderationApi, \n        moderationType,\n        request_count,\n\t\trelative_request_rate,        \n        weekly_request_count,\n        STDDEV(block_rate-weekly_block_rate) OVER (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) AS stddev_obs,\n        SQRT((block_rate * (1.0 - block_rate) / request_count) + ((weekly_block_rate * (1.0 - weekly_block_rate) / weekly_request_count))) as stddev_approx,\n        raw_block_rate,  \n        block_rate,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        raw_weekly_block_rate,  \n        weekly_block_rate, -- corrected/smoothed\n        change,\n        case weekly_block_rate_zc\n           when 0 then 0\n           else (block_rate_zc - weekly_block_rate_zc) \n        end as change_zc,\n\t\tprevious_dates_count        \n    FROM\n        block_rate\n),\nconfidence_interval AS (\n    SELECT\n        date,\n\t\tappName,         \n        moderationApi, \n        moderationType,\n        stddev_obs,\n\t\tstddev_approx,\n        greatest(stddev_approx, stddev_obs) as stddev,\n        block_rate,\n        block_rate - 6 * greatest(stddev_approx, stddev_obs)  AS block_rate_lower_bound,\n        block_rate + 6 * greatest(stddev_approx, stddev_obs) AS block_rate_upper_bound,          \n        weekly_block_rate,\n\t\tweekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,        \n        change,\n        change_zc,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        request_count,\n\t\trelative_request_rate,                \n        change - 6 * greatest(stddev_approx, stddev_obs) AS change_lower_bound,\n        change + 6 * greatest(stddev_approx, stddev_obs) AS change_upper_bound,\n        previous_dates_count,\n        row_number() OVER (partition by moderationApi, moderationType ORDER BY date) as row_n \n    FROM\n        block_rate_change\n    --WHERE\n    --\tweekly_request_count > 100\n    --    and request_count > 100\n)\nSELECT\n    date,\n\tappName,     \n    moderationApi, \n    moderationType,\n    request_count,\n\trelative_request_rate,            \n    stddev_obs,\n    stddev_approx,\n    stddev,\n    block_rate,\n\tblock_rate_lower_bound,\n    block_rate_upper_bound,\n    weekly_block_rate,\n    weekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,    \n    change,\n    change / weekly_block_rate as relative_change,\n    change_zc / weekly_block_rate_zc as relative_change_zc,\n    change_zc,\n    block_rate_zc,\n    weekly_block_rate_zc,\n    \n    change_lower_bound,\n    change_upper_bound,\n    change_lower_bound * 1.0 / weekly_block_rate as relative_change_lower_bound,\n    change_upper_bound * 1.0 / weekly_block_rate as relative_change_upper_bound,\n    greatest(change_lower_bound / weekly_block_rate, 0) as relative_change_lower_bound_sig,\n    least(change_upper_bound / weekly_block_rate, 0) as relative_change_upper_bound_sig,     \n    IF((change_lower_bound > 0 or change_upper_bound<0) and (previous_dates_count > 6), 1, 0) as is_sig_change,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (date = (max(date) over ())) and (previous_dates_count > 6), 1, 0) as is_latest_date_sig_change,\n    change/stddev as z_score,\n    IF(date = (max(date) over ()), change/stddev, NULL) as latest_date_z_score, \n    max(date) over () as latest_data_date,\n    previous_dates_count            \nFROM\n    confidence_interval -- Note: return values for all dates unlike with the alerting query\nWHERE\n    (change/stddev) IS NOT NULL\n    and ((row_n % 1 = 0)  or (abs(change/stddev) > 6))\n    and previous_dates_count > (0.9 * 6)\nORDER BY\n    date DESC, moderationApi ASC, moderationType DESC",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 30,
  "runStartToQueryComplete" : 75
}, {
  "elapsedMillis" : 1770,
  "totalScheduledMillis" : 1436,
  "cpuMillis" : 1156,
  "queuedMillis" : 1,
  "executeMillis" : 1712,
  "getResultMillis" : 0,
  "iterateMillis" : 85,
  "rows" : 1581,
  "error" : null,
  "scannedBytes" : 967746,
  "query" : "WITH golden_amis AS (\n    SELECT name, id, created_on, day\n    FROM datalake.imhotep.aws_ami\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n    AND REGEXP_LIKE(name, '^indeed_(ubuntu|(dsp_ecs_)?centos_7|amzn2|AL2023).*')\n)\n, ec2 AS (\n\tSELECT name, image_id, id, account_id, launched_on\n    FROM datalake.imhotep.aws_ec2\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n    AND state='running'\n    AND (emr_role='' OR emr_role IS NULL)\n)\nSELECT DISTINCT(e.id) AS ec2_id, e.name AS ec2_name, e.image_id, e.account_id, e.launched_on, g.name as ami_name\n\t, day(current_timestamp - from_iso8601_timestamp(e.launched_on)) as ec2_age_days\n    , day(current_timestamp - from_iso8601_timestamp(g.created_on)) as ami_age_days\n    /*\n    Cases:\n    \tlaunched_on > 90 days ago = not patched\n        launched_on < 90 days ago\n        \tcreated_on > 120 days ago = not patched -- Giving 30 day buffer given the golden AMI rebuild schedule. \n            created_on <= 120 days ago = patched \n    This does not flag instances that are not picking up the newest image on rebuild but that image is still less than 120 days old. Technically still patched, but on track to not be patched. \n    */\n    , CASE WHEN \n        day(current_timestamp - from_iso8601_timestamp(e.launched_on)) <= 90 -- Must update at least every 90 days\n        \tAND day(current_timestamp - from_iso8601_timestamp(g.created_on)) <= 120 -- If the image it built from is over 120 days old, it's not following the golden image releases\n        THEN 1\n        ELSE 0\n      END AS patched\n    , 1 AS count\nfrom ec2 e\nINNER JOIN golden_amis g\nON e.image_id=g.id\n\n",
  "queryTables" : [ "datalakehive.imhotep.aws_ami", "datalakehive.imhotep.aws_ec2" ],
  "queryIndex" : 31,
  "runStartToQueryComplete" : 75
}, {
  "elapsedMillis" : 6021,
  "totalScheduledMillis" : 65185,
  "cpuMillis" : 48675,
  "queuedMillis" : 1,
  "executeMillis" : 4566,
  "getResultMillis" : 0,
  "iterateMillis" : 1483,
  "rows" : 3772,
  "error" : null,
  "scannedBytes" : 145400714,
  "query" : "WITH ec2_instances AS (\n  SELECT name, id, image_id, account_id, launched_on\n  FROM datalake.imhotep.aws_ec2\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n  AND state='running' \n  AND (emr_role is NULL or emr_role = '') -- Don't pull in EMR. Not Centos, centrally managed mostly, and has lots of churn. \n)\n, golden_name_amis AS (\n  SELECT id, name, display_name\n  FROM datalake.imhotep.aws_ami\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n  AND LOWER(display_name) LIKE '%golden%'\n)\n, amis AS (\n  SELECT id, name, display_name\n  FROM datalake.imhotep.aws_ami\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n)\n, aws_accounts AS (\n  SELECT \"key\" AS account_id, accountablePartyId AS teamId, accountablePartyType AS teamType\n  FROM datalake.imhotep.ownershipsnapshot\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n  AND namespace='AWS_ACCOUNT' AND statusflagvalue='ACTIVE'\n)\n, all_hosts AS (\n\tSELECT resource_id\n    FROM aws_inspector_findings\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n)\n, ownership AS (\n  SELECT teamid, displayname, intakejira, tier_0, tier_1, tier_2, tier_3, tier_4, tier_5, tier_6, email, engineeringleadldap, productleadldap, programleadldap, technologyleadldap, usersslackchannel\n  FROM datalake.imhotep.teamwrkssnapshot \n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n)\n\nSELECT DISTINCT(e.id), e.name AS ec2_name, e.account_id, o.teamid, o.tier_0, o.tier_1, o.tier_2, o.tier_3, o.tier_4, o.tier_5, o.tier_6, ch.resource_id, amis.name AS ami_name, amis.display_name AS ami_display_name\n\t, CASE WHEN ch.resource_id IS NOT NULL AND LOWER(amis.display_name) LIKE '%golden%' THEN 1 ELSE 0 END AS is_golden\n    , 1 as count\nFROM ec2_instances e\nLEFT OUTER JOIN aws_accounts a ON e.account_id= a.account_id\nLEFT OUTER JOIN all_hosts ch ON ch.resource_id = e.id\nLEFT OUTER JOIN amis ON amis.id = e.image_id\nLEFT OUTER JOIN ownership o ON a.teamId=o.teamid\nWHERE \n\t(''='' OR o.tier_0 = '')\n    AND (''='' OR o.tier_1 = '')\n    AND (''='' OR o.tier_2 = '')\n    AND (''='' OR o.tier_3 = '')\n    AND (''='' OR o.tier_4 = '')\n    AND o.tier_6 != 'Cluster'",
  "queryTables" : [ "datalakehive.imhotep.aws_ami", "datalakehive.imhotep.aws_ec2", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot", "skipperhive.imhotep.aws_inspector_findings" ],
  "queryIndex" : 32,
  "runStartToQueryComplete" : 82
}, {
  "elapsedMillis" : 10186,
  "totalScheduledMillis" : 4228897,
  "cpuMillis" : 687049,
  "queuedMillis" : 1,
  "executeMillis" : 8093,
  "getResultMillis" : 0,
  "iterateMillis" : 2197,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 6966260603,
  "query" : "SELECT \n\tCOUNT(*) as total_profile_views, \n   \tSUM(r.sent) as outreaches,\n    SUM(r.resp_pos) as resp_pos,\n    COUNT(js.account_id) as profile_with_linkedIn,\n    ROUND(CAST(SUM(r.sent) AS DOUBLE) * 100 / COUNT(*), 1) as outreach_rate\nFROM \n\tdatalake.imhotep.rsresumeview v\n\nLEFT JOIN\n\tdatalake.imhotep.rscontacts r\nON\n\tv.recruiterAccountId = r.senderAccountId\n    AND v.resumeAccountId = r.recipientAccountId\n    AND r.unixtime BETWEEN IMHOTEP_UNIXTIME('5d') AND IMHOTEP_UNIXTIME('4d')\n\nLEFT JOIN \n\tdatalake.imhotep.js_fact_store_snapshot_prod js\nON\n\tv.resumeAccountId = js.account_id\n\tAND js.resume_links_size > 0\n\tAND CARDINALITY(FILTER(js.resume_links_array, x -> x LIKE '%linkedin%')) > 0\n    AND js.unixtime BETWEEN IMHOTEP_UNIXTIME('5d') AND IMHOTEP_UNIXTIME('4d')\n\nWHERE \n\tv.unixtime BETWEEN IMHOTEP_UNIXTIME('5d') AND IMHOTEP_UNIXTIME('4d')\n    AND js.account_id IS NOT NULL -- with LinkedIn link\n--    AND js.account_id IS NULL -- exclude linkedIn users\n--    AND r.batchSize = 1",
  "queryTables" : [ "datalakehive.imhotep.js_fact_store_snapshot_prod", "datalakehive.imhotep.rscontacts", "datalakehive.imhotep.rsresumeview" ],
  "queryIndex" : 33,
  "runStartToQueryComplete" : 98
}, {
  "elapsedMillis" : 65052,
  "totalScheduledMillis" : 82116128,
  "cpuMillis" : 16036826,
  "queuedMillis" : 1,
  "executeMillis" : 44714,
  "getResultMillis" : 0,
  "iterateMillis" : 20388,
  "rows" : 1804,
  "error" : null,
  "scannedBytes" : 427877581595,
  "query" : "with rules as (SELECT distinct rule_id\nFROM datalake.imhotep.waldorulesnapshot\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') \nAND CONTAINS(rule_tags, 'cat_risk') AND type=0 AND visibility='nowhere'),\n\nmatches as (SELECT distinct jobid, ruleid\nFROM datalake.imhotep.waldorulematch\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today')),\n\nsj as (SELECT distinct jobid, 1 as nowhere\nFROM datalake.imhotep.searchablejobs\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today')\nAND waldovisibilitylevel='nowhere' AND feedid!=50461),\n\nfiji as (select distinct jobid, feedSourceId, feedid, sourceid\nfrom datalake.imhotep.fijievents \nwhere unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today')\nAND event='jobScanned'),\n\nfraudulent_jobs as (select matches.jobid, 1 as fraud\nfrom matches\ninner join rules\nON matches.ruleid=rules.rule_id\ninner join sj\nON matches.jobid = sj.jobid\nwhere sj.nowhere=1)\n\nselect feedSourceId, CAST(sourceid as VARCHAR) as sourceid, CAST(feedid as VARCHAR) as feedid, count() as numJobs, sum(fraud) as numFrauds, sum(fraud) * 100.000/count() as fraud_percent\nfrom (select fiji.*, coalesce(fraud, 0) as fraud\n      from fiji\n      left join fraudulent_jobs\n      on fiji.jobid=fraudulent_jobs.jobid)\ngroup by feedSourceId, sourceid, feedid\nHAVING SUM(fraud) * 100.000 / COUNT(*) > 0\nORDER BY fraud_percent, numJobs DESC\n",
  "queryTables" : [ "datalakehive.imhotep.fijievents", "datalakehive.imhotep.searchablejobs", "datalakehive.imhotep.waldorulematch", "datalakehive.imhotep.waldorulesnapshot" ],
  "queryIndex" : 34,
  "runStartToQueryComplete" : 163
}, {
  "elapsedMillis" : 121970,
  "totalScheduledMillis" : 150287659,
  "cpuMillis" : 41251178,
  "queuedMillis" : 1,
  "executeMillis" : 15702,
  "getResultMillis" : 0,
  "iterateMillis" : 106340,
  "rows" : 2,
  "error" : null,
  "scannedBytes" : 638754434953,
  "query" : "WITH ratg_advids AS (\n    -- get all advertisers in our test and control groups\n    SELECT advid as advertiser_id,\n        MAX(CASE WHEN CARDINALITY(FILTER(recent_advertiser_test_groups, x -> x LIKE '%freevalue_so_job_copies_gb1'))>0\n             THEN 'Test' ELSE 'Control' END) as experiment_group\n    FROM datalake.imhotep.recent_advertiser_test_groups\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('3d') AND IMHOTEP_UNIXTIME('today')\n        AND CARDINALITY(FILTER(recent_advertiser_test_groups, x -> x LIKE '%B%:freevalue_so_job_copies_gb%'))>0\n    GROUP BY 1\n)\n\n, advids AS (\n    -- get all advertisers in our test and control groups\n    SELECT experiment_group, advertiser_id\n    FROM ratg_advids\n    JOIN datalake.imhotep.daily_employer2 de2 USING (advertiser_id)\n    WHERE de2.unixtime BETWEEN IMHOTEP_UNIXTIME('3d') AND IMHOTEP_UNIXTIME('2d')\n        AND de2.billing_country = 'GB'\n        AND de2.type != 'Test'\n)\n\n, jobs_raw AS (\n\t-- get all of the live jobs for our advertisers\n\tSELECT experiment_group\n\t     , advertiser_id\n\t     , jam.job_hash\n\t     , job_city\n\t     , job_state as job_admin_1_code\n\t     , (is_job_searchable+impressions+clicks+apply_starts)>0 as is_live\n\t     , unixtime\n    FROM datalake.imhotep.jobactivitymetrics as jam\n    JOIN advids USING (advertiser_id)\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-09-23') AND IMHOTEP_UNIXTIME('today')\n        AND job_country_code='GB'\n        AND job_city IS NOT NULL\n        AND job_state IS NOT NULL\n        AND CARDINALITY(FILTER(ratgs_lite, x -> x LIKE '%B%:freevalue_so_job_copies_gb%'))>0\n)\n\n, jobs_raw_w_dj2 AS (\n    -- reduce to only jobs that were created or updated during the test window\n    SELECT jam.experiment_group\n\t     , jam.advertiser_id\n\t     , jam.job_hash\n\t     , jam.job_city\n\t     , jam.job_admin_1_code\n\t     , jam.is_live\n\t     , jam.unixtime\n    FROM jobs_raw jam\n    JOIN  datalake.imhotep.dradis_job2 as dj2 ON (dj2.job_hash_underscore = jam.job_hash)\n    WHERE dj2.unixtime BETWEEN IMHOTEP_UNIXTIME('2024-09-23') AND IMHOTEP_UNIXTIME('today')\n        AND (dj2.date_created>=20240923\n            OR (previous_status IN ('PAUSED','DELETED') AND status='ACTIVE'))\n)\n\n, ordered_jobs AS (\n    SELECT experiment_group\n\t     , advertiser_id\n\t     , job_hash\n         , job_city\n\t     , job_admin_1_code\n         , unixtime\n\t     , is_live\n\t     , LAG(is_live) OVER (PARTITION BY job_hash, experiment_group ORDER BY unixtime) AS prev_is_live\n\t     , LAG(unixtime) OVER (PARTITION BY job_hash, experiment_group ORDER BY unixtime) AS prev_unixtime\n    FROM jobs_raw_w_dj2\n)\n\n, jobs_w_live_periods AS (\n    SELECT experiment_group\n\t     , advertiser_id\n\t     , job_hash\n         , job_city\n\t     , job_admin_1_code\n         , unixtime as live_start_date\n         , LEAD(unixtime, 1, TO_UNIXTIME(CURRENT_DATE)) OVER (PARTITION BY job_hash, experiment_group ORDER BY unixtime) AS live_end_date\n    FROM ordered_jobs\n    WHERE is_live = true\n        AND (prev_is_live IS NULL OR prev_is_live = false)\n)\n\n, jobs_w_live_periods_copy_attrs AS (\n    -- get the fields we need for copy comparison\n    SELECT experiment_group\n         , jca.advertiser_id\n         , job_hash\n         , job_on_indeed_unixtime\n         , jca.job_city\n         , jca.job_admin_1_code\n         , job_type_id\n         , job_normalized_title_sim_hash\n         , job_description_sim_hash\n         , taxo_occupations_most_specific_suid\n         , job_occupations\n         , jwlp.live_start_date\n         , jwlp.live_end_date\n    FROM jobs_w_live_periods jwlp\n    JOIN datalake.imhotep.job_copy_attributes as jca USING (job_hash)\n    WHERE jca.unixtime BETWEEN IMHOTEP_UNIXTIME('2024-09-23') AND IMHOTEP_UNIXTIME('today')\n    AND jca.job_admin_1_code IS NOT NULL\n    AND jca.job_city IS NOT NULL\n)\n\n, live_jobs_w_copy_pair AS (\n    SELECT orig.experiment_group\n        , orig.advertiser_id as advertiser_id\n        , orig.job_hash as job_hash\n        , copy.job_hash as copy_job_hash\n        , orig.job_city\n        , orig.job_admin_1_code\n        , orig.live_start_date as orig_live_start_date\n        , orig.live_end_date as orig_live_end_date\n        , copy.live_start_date as copy_live_start_date\n        , copy.live_end_date as copy_live_end_date\n        , GREATEST(orig.live_start_date, copy.live_start_date) AS overlap_start\n        , LEAST(orig.live_end_date, copy.live_end_date) AS overlap_end\n        , orig.live_start_date <= copy.live_end_date AND copy.live_start_date <= orig.live_end_date as has_overlap -- original and copy were live at the same time\n         -- split the 128-bit simhash into two 64-bit representations\n        , cast( from_big_endian_64(lpad(substr(from_base64(orig.job_description_sim_hash), 1, 8), 8, from_base64('AAAAAAAAAAA='))) as bigint) as orig_high\n        , cast( from_big_endian_64(lpad(substr(from_base64(orig.job_description_sim_hash), 9, 8), 8, from_base64('AAAAAAAAAAA='))) as bigint) as orig_low\n        , cast( from_big_endian_64(lpad(substr(from_base64(copy.job_description_sim_hash), 1, 8), 8, from_base64('AAAAAAAAAAA='))) as bigint) as copy_high\n        , cast( from_big_endian_64(lpad(substr(from_base64(copy.job_description_sim_hash), 9, 8), 8, from_base64('AAAAAAAAAAA='))) as bigint) as copy_low\n    FROM jobs_w_live_periods_copy_attrs orig\n    LEFT JOIN jobs_w_live_periods_copy_attrs copy ON (\n        orig.experiment_group = copy.experiment_group\n        AND orig.advertiser_id = copy.advertiser_id\n        AND orig.job_city = copy.job_city\n        AND orig.job_admin_1_code = copy.job_admin_1_code\n        AND orig.job_hash != copy.job_hash\n        AND orig.job_on_indeed_unixtime < copy.job_on_indeed_unixtime -- original must be created before the copy\n\n        AND bitwise_or(orig.job_type_id, copy.job_type_id) > 0 -- job_type_id any match\n\n        -- compare normalized titles when they are both not null. otherwise, ignore them\n        AND CASE WHEN orig.job_normalized_title_sim_hash IS NOT NULL AND copy.job_normalized_title_sim_hash IS NOT NULL THEN orig.job_normalized_title_sim_hash = copy.job_normalized_title_sim_hash ELSE TRUE END\n\n        -- compare occupation when they are both not null. otherwise, ignore them\n        AND CASE WHEN orig.taxo_occupations_most_specific_suid IS NOT NULL AND CARDINALITY(copy.job_occupations) > 0 THEN CONTAINS(copy.job_occupations, orig.taxo_occupations_most_specific_suid) ELSE TRUE END\n        )\n)\n\n, live_jobs_final AS (\n    SELECT *\n         -- the right job is a copy if we have a copy_job_hash defined and the description hamming distance is <= 7\n         , copy_job_hash IS NOT NULL AND bit_count(bitwise_xor(orig_high, copy_high), 64) + bit_count(bitwise_xor(orig_low, copy_low), 64) <= 7 as has_copy\n        , (overlap_end - overlap_start) / 86400 as overlap_days\n        , (orig_live_end_date - orig_live_start_date) / 86400 as orig_days_live\n        , (copy_live_end_date - copy_live_start_date) / 86400 as copy_days_live\n    FROM live_jobs_w_copy_pair\n)\n\n\nSELECT experiment_group\n     , COUNT(DISTINCT advertiser_id) as advertisers\n     , COUNT(DISTINCT job_hash) as all_live_jobs\n     , COUNT(DISTINCT CASE WHEN has_copy THEN copy_job_hash END) as live_copies\n     , COUNT(DISTINCT CASE WHEN has_copy AND has_overlap THEN copy_job_hash END) as live_copies_w_overlap -- there was a point when original and copy were both live at the same imt\n     , COUNT(DISTINCT CASE WHEN has_copy AND has_overlap = FALSE THEN copy_job_hash END) as live_copies_no_overlap -- there was a point when original and copy were not live at the same time\n     , AVG(CASE WHEN has_copy AND has_overlap THEN overlap_days ELSE NULL END) as avg_days_overlap\n     , AVG(CASE WHEN has_copy THEN orig_days_live ELSE NULL END) as orig_avg_days_live\n     , AVG(CASE WHEN has_copy THEN copy_days_live ELSE NULL END) as copy_avg_days_live\n     -- subtract the count of copy jobs from all jobs to get the total unique jobs live\n     , COUNT(DISTINCT job_hash) - COUNT(DISTINCT CASE WHEN has_copy THEN copy_job_hash END) as unique_live_jobs\nFROM live_jobs_final\nGROUP BY 1\nORDER BY 1 ASC",
  "queryTables" : [ "datalakehive.imhotep.daily_employer2", "datalakehive.imhotep.daily_employer2", "datalakehive.imhotep.dradis_job2", "datalakehive.imhotep.dradis_job2", "datalakehive.imhotep.job_copy_attributes", "datalakehive.imhotep.job_copy_attributes", "datalakehive.imhotep.jobactivitymetrics", "datalakehive.imhotep.jobactivitymetrics", "datalakehive.imhotep.recent_advertiser_test_groups", "datalakehive.imhotep.recent_advertiser_test_groups" ],
  "queryIndex" : 35,
  "runStartToQueryComplete" : 244
}, {
  "elapsedMillis" : 12690,
  "totalScheduledMillis" : 23554162,
  "cpuMillis" : 8851027,
  "queuedMillis" : 1,
  "executeMillis" : 4496,
  "getResultMillis" : 0,
  "iterateMillis" : 8229,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 182055279128,
  "query" : "WITH date_range AS (\n    SELECT\n        IMHOTEP_UNIXTIME('1month') AS start_date,\n        IMHOTEP_UNIXTIME('today') AS end_date\n)\nSELECT\n    COUNT(DISTINCT signin.accountid)\nFROM\n    datalake.imhotep.passdailysnapshot snapshot\nJOIN\n    datalake.imhotep.passsigninattempt signin ON snapshot.accountid = signin.accountid\nJOIN\n    date_range dr ON snapshot.unixtime BETWEEN dr.start_date AND dr.end_date\n    AND signin.unixtime BETWEEN dr.start_date AND dr.end_date\nWHERE\n    snapshot.deleted = 0\n    AND signin.successful = 1",
  "queryTables" : [ "datalakehive.imhotep.passdailysnapshot", "datalakehive.imhotep.passsigninattempt" ],
  "queryIndex" : 36,
  "runStartToQueryComplete" : 138
}, {
  "elapsedMillis" : 1760,
  "totalScheduledMillis" : 3388,
  "cpuMillis" : 552,
  "queuedMillis" : 1,
  "executeMillis" : 1449,
  "getResultMillis" : 0,
  "iterateMillis" : 337,
  "rows" : 18,
  "error" : null,
  "scannedBytes" : 1604520,
  "query" : "SELECT SPLIT_PART(job_profile,',',1), COUNT(*)\nFROM datalake.imhotep.indeedemployeesnapshot\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n\tAND total_reports <= 3\n    AND managers_ldap LIKE '%lafawnd%'\n    AND is_manager = 1\nGROUP BY 1\nORDER BY 2 DESC\n",
  "queryTables" : [ "datalakehive.imhotep.indeedemployeesnapshot" ],
  "queryIndex" : 37,
  "runStartToQueryComplete" : 159
}, {
  "elapsedMillis" : 3299,
  "totalScheduledMillis" : 121034,
  "cpuMillis" : 56398,
  "queuedMillis" : 1,
  "executeMillis" : 2554,
  "getResultMillis" : 0,
  "iterateMillis" : 766,
  "rows" : 240,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing')\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '')\nORDER BY date, t0, t1, t2 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 38,
  "runStartToQueryComplete" : 175
}, {
  "elapsedMillis" : 3155,
  "totalScheduledMillis" : 140458,
  "cpuMillis" : 61724,
  "queuedMillis" : 1,
  "executeMillis" : 2429,
  "getResultMillis" : 0,
  "iterateMillis" : 762,
  "rows" : 478,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_3 != 'Unspecified'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    t3,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '')\nORDER BY date, t0, t1, t2, t3 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 39,
  "runStartToQueryComplete" : 175
}, {
  "elapsedMillis" : 3077,
  "totalScheduledMillis" : 116724,
  "cpuMillis" : 53393,
  "queuedMillis" : 1,
  "executeMillis" : 2415,
  "getResultMillis" : 0,
  "iterateMillis" : 687,
  "rows" : 2134,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 as t4,\n        tw.tier_5 AS t5,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_5 != 'Unspecified'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '')\nORDER BY date, t0, t1, t2, t3, t4, t5 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 40,
  "runStartToQueryComplete" : 177
}, {
  "elapsedMillis" : 3090,
  "totalScheduledMillis" : 111821,
  "cpuMillis" : 50511,
  "queuedMillis" : 1,
  "executeMillis" : 2439,
  "getResultMillis" : 0,
  "iterateMillis" : 686,
  "rows" : 30,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        ji.issuetype = 'Bug'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d')\n)\n\nSELECT\n\tdate,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nORDER BY date ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 41,
  "runStartToQueryComplete" : 177
}, {
  "elapsedMillis" : 5476,
  "totalScheduledMillis" : 50003,
  "cpuMillis" : 18592,
  "queuedMillis" : 1,
  "executeMillis" : 3189,
  "getResultMillis" : 0,
  "iterateMillis" : 2320,
  "rows" : 837,
  "error" : null,
  "scannedBytes" : 653932215,
  "query" : "WITH\n\npopulated_day AS (\n    SELECT MIN(day) AS most_recent_day\n    FROM (\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"jiracloudissues$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n\n        UNION ALL\n\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"ownershipSnapshot$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n\n        UNION ALL\n\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"teamwrksSnapshot$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n    )\n)\n\n-- Count of a11y violations remediated within SLO in the last 30 days / (All a11y violations remediated within last 30 days + Open issues)\nSELECT\n    inslo,\n    DATE_FORMAT(duedate, '%Y-%m-%d') AS duedate,\n    teamId,\n\t-- project,\n    issuekey,\n    -- issuetype,\n    priority,\n    status,\n    summary,\n    lastupdated,\n    DATE_FORMAT(createdate, '%Y-%m-%d') AS createdate,\n    labels,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    t7\nFROM (\n\tSELECT\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        ji.issuekey AS issuekey,\n        ji.issuetype AS issuetype,\n        ji.priority AS priority,\n        ji.summary AS summary,\n        ji.status AS status,\n        DATE_FORMAT(FROM_UNIXTIME(CAST(ji.lastupdated AS BIGINT) / 1000), '%Y-%m-%d') AS lastupdated,\n\t\tDATE_TRUNC('day', DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')) AS createdate,\n        DATE_TRUNC('day', DATE_ADD('day',\n        \tCASE \n                WHEN ji.priority = 'Blocker' THEN 30 \n                ELSE 90 \n            END, \n            DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')\n        )) AS duedate,\n\t\tCAST(DATE_ADD('day',\n            CASE \n                WHEN ji.priority = 'Blocker' THEN 30 \n                ELSE 90 \n            END, \n            DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')\n        ) > CURRENT_DATE AS BOOLEAN) AS inslo,\n        ji.labels AS labels,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        tw.tier_7 AS t7\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.day = (SELECT most_recent_day from populated_day) AND\n        ow.day = (SELECT most_recent_day from populated_day) AND\n        tw.day = (SELECT most_recent_day from populated_day) AND\n        ji.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        ow.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        tw.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            -- The line below will include \"Pending Closure\" tickets in the resulting table\n            -- OR ji.resolutiontimestamp = 0\n        )\n    GROUP BY\n    \tow.accountablePartyId,\n    \tji.projectkey,\n        ji.issuekey,\n\t\tji.issuetype,\n        ji.priority,\n        ji.summary,\n        ji.status,\n        DATE_FORMAT(FROM_UNIXTIME(CAST(ji.lastupdated AS BIGINT) / 1000), '%Y-%m-%d'),\n\t\tDATE_TRUNC('day', DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')),\n        DATE_TRUNC('day', DATE_ADD('day',\n            CASE \n                WHEN ji.priority = 'Blocker' THEN 30\n                ELSE 90 \n           \tEND, \n            DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')\n        )),\n        CAST(DATE_ADD('day',\n            CASE \n                WHEN ji.priority = 'Blocker' THEN 30 \n                ELSE 90 \n            END, \n            DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')\n        ) > CURRENT_DATE AS BOOLEAN),\n        ji.labels,\n        tw.tier_0,\n        tw.tier_1,\n        tw.tier_2,\n        tw.tier_3,\n        tw.tier_4,\n        tw.tier_5,\n        tw.tier_6,\n        tw.tier_7\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '') AND\n    (''='' OR t7 = '')\nORDER BY \n\tinslo ASC,\n\tduedate ASC ",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.jiracloudissues$partitions", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.ownershipsnapshot$partitions", "datalakehive.imhotep.teamwrkssnapshot", "datalakehive.imhotep.teamwrkssnapshot$partitions" ],
  "queryIndex" : 42,
  "runStartToQueryComplete" : 181
}, {
  "elapsedMillis" : 5860,
  "totalScheduledMillis" : 1009112,
  "cpuMillis" : 761681,
  "queuedMillis" : 1,
  "executeMillis" : 2363,
  "getResultMillis" : 0,
  "iterateMillis" : 3525,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    t3,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0\n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '')\nORDER BY date, teamId, project, t0, t1, t2, t3 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 43,
  "runStartToQueryComplete" : 184
}, {
  "elapsedMillis" : 4123,
  "totalScheduledMillis" : 127113,
  "cpuMillis" : 49175,
  "queuedMillis" : 0,
  "executeMillis" : 2434,
  "getResultMillis" : 0,
  "iterateMillis" : 1726,
  "rows" : 90,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        Lower(tw.tier_1) NOT IN ('global revenue', 'marketing')\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n\t(''='' OR t1 = '')\nORDER BY date, t0, t1 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 44,
  "runStartToQueryComplete" : 183
}, {
  "elapsedMillis" : 4724,
  "totalScheduledMillis" : 140286,
  "cpuMillis" : 47675,
  "queuedMillis" : 1,
  "executeMillis" : 2767,
  "getResultMillis" : 0,
  "iterateMillis" : 1971,
  "rows" : 3063,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 as t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        tw.tier_7 AS t7,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_7 != 'Unspecified'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5, tw.tier_6, tw.tier_7\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    t7,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '') AND\n    (''='' OR t7 = '') \nORDER BY date, t0, t1, t2, t3, t4, t5, t6, t7 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 45,
  "runStartToQueryComplete" : 185
}, {
  "elapsedMillis" : 4617,
  "totalScheduledMillis" : 148895,
  "cpuMillis" : 50687,
  "queuedMillis" : 1,
  "executeMillis" : 2357,
  "getResultMillis" : 0,
  "iterateMillis" : 2291,
  "rows" : 1237,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 as t4,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_4 != 'Unspecified'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '')\nORDER BY date, t0, t1, t2, t3, t4 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 46,
  "runStartToQueryComplete" : 186
}, {
  "elapsedMillis" : 5461,
  "totalScheduledMillis" : 864137,
  "cpuMillis" : 727192,
  "queuedMillis" : 0,
  "executeMillis" : 2476,
  "getResultMillis" : 0,
  "iterateMillis" : 2997,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_6 != 'Unspecified' AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5, tw.tier_6\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '')\nORDER BY date, teamId, project, t0, t1, t2, t3, t4, t5, t6 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 47,
  "runStartToQueryComplete" : 190
}, {
  "elapsedMillis" : 5670,
  "totalScheduledMillis" : 990528,
  "cpuMillis" : 742420,
  "queuedMillis" : 1,
  "executeMillis" : 2615,
  "getResultMillis" : 0,
  "iterateMillis" : 3082,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        Lower(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0\n)\nWHERE\n\t(t0 = 'Indeed')\nORDER BY date, teamId, project, t0 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 48,
  "runStartToQueryComplete" : 191
}, {
  "elapsedMillis" : 6079,
  "totalScheduledMillis" : 947006,
  "cpuMillis" : 768218,
  "queuedMillis" : 1,
  "executeMillis" : 2429,
  "getResultMillis" : 0,
  "iterateMillis" : 3679,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        tw.tier_5 AS t5,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        tw.tier_5 != 'Unspecified' AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '')\nORDER BY date, teamId, project, t0, t1, t2, t3, t4, t5 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 49,
  "runStartToQueryComplete" : 196
}, {
  "elapsedMillis" : 6081,
  "totalScheduledMillis" : 848822,
  "cpuMillis" : 713504,
  "queuedMillis" : 0,
  "executeMillis" : 2457,
  "getResultMillis" : 0,
  "iterateMillis" : 3656,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '')\nORDER BY date, teamId, project, t0, t1 ASC ",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 50,
  "runStartToQueryComplete" : 198
}, {
  "elapsedMillis" : 5414,
  "totalScheduledMillis" : 910088,
  "cpuMillis" : 794346,
  "queuedMillis" : 1,
  "executeMillis" : 2408,
  "getResultMillis" : 0,
  "iterateMillis" : 3057,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    t7,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        tw.tier_7 AS t7,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        tw.tier_7 != 'Unspecified' AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5, tw.tier_6, tw.tier_7\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '') AND\n    (''='' OR t7 = '')\nORDER BY date, teamId, project, t0, t1, t2, t3, t4, t5, t6, t7 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 51,
  "runStartToQueryComplete" : 198
}, {
  "elapsedMillis" : 3922,
  "totalScheduledMillis" : 156109,
  "cpuMillis" : 85336,
  "queuedMillis" : 0,
  "executeMillis" : 2405,
  "getResultMillis" : 0,
  "iterateMillis" : 1542,
  "rows" : 2806,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 as t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_6 != 'Unspecified'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5, tw.tier_6\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '')\nORDER BY date, t0, t1, t2, t3, t4, t5, t6 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 52,
  "runStartToQueryComplete" : 197
}, {
  "elapsedMillis" : 4603,
  "totalScheduledMillis" : 764217,
  "cpuMillis" : 678915,
  "queuedMillis" : 1,
  "executeMillis" : 2418,
  "getResultMillis" : 0,
  "iterateMillis" : 2196,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '')\nORDER BY date, teamId, project, t0, t1, t2 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 53,
  "runStartToQueryComplete" : 200
}, {
  "elapsedMillis" : 4735,
  "totalScheduledMillis" : 766649,
  "cpuMillis" : 684310,
  "queuedMillis" : 1,
  "executeMillis" : 2362,
  "getResultMillis" : 0,
  "iterateMillis" : 2400,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        tw.tier_4 != 'Unspecified' AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0  \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '')\nORDER BY date, teamId, project, t0, t1, t2, t3, t4 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 54,
  "runStartToQueryComplete" : 203
}, {
  "elapsedMillis" : 2657,
  "totalScheduledMillis" : 16498,
  "cpuMillis" : 5176,
  "queuedMillis" : 0,
  "executeMillis" : 926,
  "getResultMillis" : 0,
  "iterateMillis" : 1762,
  "rows" : 6,
  "error" : null,
  "scannedBytes" : 325020168,
  "query" : "SELECT\n  platform, provider,\n  count_if(cnt_empty_field_names > 0) as cnt_datasets_with_empty_field_names,\n  count_if(cnt_empty_field_names > 1) as cnt_datasets_with_multiple_empty_field_names\nFROM (\n  SELECT platform, provider, indeedid, count(1) as cnt_empty_field_names\n  FROM  metadataBusFieldSnapshot\n  WHERE day >= '2024-09-11' and day < '2024-09-12' and LENGTH(coalesce(fieldFullName, '')) = 0\n    AND datasource != 'automated-healthcheck'\n  GROUP BY 1,2,3\n)\nGROUP BY 1,2\nORDER BY 1,2\n\n\n",
  "queryTables" : [ "skipperhive.imhotep.metadatabusfieldsnapshot" ],
  "queryIndex" : 55,
  "runStartToQueryComplete" : 201
}, {
  "elapsedMillis" : 2607,
  "totalScheduledMillis" : 14783,
  "cpuMillis" : 4412,
  "queuedMillis" : 0,
  "executeMillis" : 945,
  "getResultMillis" : 0,
  "iterateMillis" : 1726,
  "rows" : 3,
  "error" : null,
  "scannedBytes" : 322561301,
  "query" : "SELECT\n  platform, provider,\n  count_if(cnt_empty_field_names > 0) as cnt_datasets_with_empty_field_names,\n  count_if(cnt_empty_field_names > 1) as cnt_datasets_with_multiple_empty_field_names\nFROM (\n  SELECT platform, provider, indeedid, count(1) as cnt_empty_field_names\n  FROM  metadataBusFieldSnapshot\n  WHERE day >= '2024-09-11' and day < '2024-09-12' and LENGTH(coalesce(fieldName, '')) = 0\n    AND datasource != 'automated-healthcheck'\n  GROUP BY 1,2,3\n)\nGROUP BY 1,2\nORDER BY 1,2\n\n\n",
  "queryTables" : [ "skipperhive.imhotep.metadatabusfieldsnapshot" ],
  "queryIndex" : 56,
  "runStartToQueryComplete" : 201
}, {
  "elapsedMillis" : 61310,
  "totalScheduledMillis" : 62226406,
  "cpuMillis" : 26374434,
  "queuedMillis" : 1,
  "executeMillis" : 11803,
  "getResultMillis" : 0,
  "iterateMillis" : 49558,
  "rows" : 52,
  "error" : null,
  "scannedBytes" : 181720095057,
  "query" : "WITH \n\nparentcompanysizesegmentation AS (\n\n    SELECT\n        advertiser_id,\n        parent_company_size_segment\n    FROM\n        datalake.imhotep.parentcompanysizesegmentation\n    WHERE\n        day = CAST(DATE_ADD('day', -1, CURRENT_DATE) AS varchar)\n\n),\n\njob_attributes_latest AS (\n\n\tSELECT \n    \tjob_id,\n        advertiser_mapping[1].advertiser_id AS advertiser_id\n    FROM \n    \tdatalake.core.jobs_dim_job_attributes_latest\n\n),\n\nsubs_history AS (\n\n    SELECT \n        DATE_TRUNC('month', DATE(day)) AS activity_month, \n        COALESCE(parent_company_size_segment, 'null') AS parent_company_size_segment,\n        COUNT(DISTINCT subscription_id)/1000.00 AS paid_active_subscriptions_thousands\n    FROM \n        datalake.core.product_analytics_dim_resume_subscription_history subs\n    LEFT JOIN \n        parentcompanysizesegmentation pcss\n            ON subs.advertiser_id = pcss.advertiser_id\n    WHERE \n        day >= '2023-10-01'\n        AND day < '2024-11-01'\n        AND product = 'resume'\n        AND current_status IN ('active','expiring','pausing')\n        AND NOT is_trial\n        AND NOT is_shared_subscription\n    GROUP BY 1, 2\n\n),\n\ngrdm AS (\n\n    SELECT\n        DATE_TRUNC('month', DATE(SUBSTR(day, 1, 10))) AS activity_month,\n        COALESCE(parent_company_size_segment, 'null') AS parent_company_size_segment,\n        SUM(net_revenue_cents/100.00)/1000000 AS revenue_usd_millions\n    FROM \n        datalake.imhotep.grdm\n    WHERE\n        day >= '2023-10-01'\n        AND day < '2024-11-01'\n        AND product_group IN ('Resume','Sourcing')\n        AND credit_source_name != 'Agency Discount - Resume Subscription'\n    GROUP BY 1, 2\n\n),\n\nsponsored_jobs AS (\n\n    SELECT \n        activity_month,\n        COALESCE(parent_company_size_segment, 'null') AS parent_company_size_segment,\n    \tCOUNT(DISTINCT job_id) / 1000000.00 AS sponsored_jobs_millions\n    FROM \n        datalake.core.jobs_fct_job_performance_sponsored_monthly spon_jobs\n    LEFT JOIN\n        parentcompanysizesegmentation pcss\n            ON spon_jobs.advertiser_id = pcss.advertiser_id\n    GROUP BY \n        1, 2\n\n),\n\norganic_jobs AS (\n\n    SELECT \n        activity_month,\n        COALESCE(parent_company_size_segment, 'null') AS parent_company_size_segment,\n    \tCOUNT(DISTINCT org_jobs.job_id) / 1000000.00 AS organic_jobs_millions\n    FROM \n        datalake.core.jobs_fct_job_performance_organic_monthly org_jobs\n    LEFT JOIN \n    \tjob_attributes_latest\n        \tON org_jobs.job_id = job_attributes_latest.job_id\n    LEFT JOIN\n        parentcompanysizesegmentation pcss\n            ON job_attributes_latest.advertiser_id = pcss.advertiser_id\n    GROUP BY \n        1, 2\n\n),\n\nfinal AS (\n\n    SELECT \n        subs_history.activity_month,\n        subs_history.parent_company_size_segment,\n        subs_history.paid_active_subscriptions_thousands,\n        grdm.revenue_usd_millions,\n        sponsored_jobs.sponsored_jobs_millions + organic_jobs.organic_jobs_millions AS searchable_jobs_millions\n    FROM \n        subs_history\n    INNER JOIN \n        grdm \n            ON subs_history.activity_month = grdm.activity_month\n            AND subs_history.parent_company_size_segment = grdm.parent_company_size_segment\n    INNER JOIN \n        sponsored_jobs \n            ON subs_history.activity_month = sponsored_jobs.activity_month\n            AND subs_history.parent_company_size_segment = sponsored_jobs.parent_company_size_segment\n    INNER JOIN \n        organic_jobs \n            ON subs_history.activity_month = organic_jobs.activity_month\n            AND subs_history.parent_company_size_segment = organic_jobs.parent_company_size_segment\n\n)\n\nSELECT *\nFROM final\nORDER BY 1, 2",
  "queryTables" : [ "datalakehive.core.jobs_dim_job_attributes_latest", "datalakehive.core.jobs_fct_job_performance_organic_monthly", "datalakehive.core.jobs_fct_job_performance_sponsored_monthly", "datalakehive.core.product_analytics_dim_resume_subscription_history", "datalakehive.imhotep.grdm", "datalakehive.imhotep.parentcompanysizesegmentation", "datalakehive.imhotep.parentcompanysizesegmentation", "datalakehive.imhotep.parentcompanysizesegmentation" ],
  "queryIndex" : 57,
  "runStartToQueryComplete" : 269
}, {
  "elapsedMillis" : 3782,
  "totalScheduledMillis" : 92470,
  "cpuMillis" : 45770,
  "queuedMillis" : 1,
  "executeMillis" : 2620,
  "getResultMillis" : 0,
  "iterateMillis" : 1176,
  "rows" : 2,
  "error" : null,
  "scannedBytes" : 47478,
  "query" : "SELECT \n\tevent_id, agg_job_id\nFROM datalake.hiring_events.dim_hiringevent_job\nWHERE event_id=327078",
  "queryTables" : [ "datalake.hiring_events.dim_hiringevent_job" ],
  "queryIndex" : 58,
  "runStartToQueryComplete" : 237
}, {
  "elapsedMillis" : 16445,
  "totalScheduledMillis" : 37430153,
  "cpuMillis" : 2326556,
  "queuedMillis" : 0,
  "executeMillis" : 10082,
  "getResultMillis" : 0,
  "iterateMillis" : 6383,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 76072858455,
  "query" : "SELECT \n\tCOUNT(*) as total_profile_views, \n   \tSUM(r.sent) as outreaches,\n    SUM(r.resp_pos) as resp_pos,\n    COUNT(js.account_id) as profile_with_linkedIn,\n    ROUND(CAST(SUM(r.sent) AS DOUBLE) * 100 / COUNT(*), 1) as outreach_rate\nFROM \n\tdatalake.imhotep.rsresumeview v\n\nLEFT JOIN\n\tdatalake.imhotep.rscontacts r\nON\n\tv.recruiterAccountId = r.senderAccountId\n    AND v.resumeAccountId = r.recipientAccountId\n    AND r.unixtime BETWEEN IMHOTEP_UNIXTIME('15d') AND IMHOTEP_UNIXTIME('4d')\n\nLEFT JOIN \n\tdatalake.imhotep.js_fact_store_snapshot_prod js\nON\n\tv.resumeAccountId = js.account_id\n\tAND js.resume_links_size > 0\n\tAND CARDINALITY(FILTER(js.resume_links_array, x -> x LIKE '%linkedin%')) > 0\n    AND js.unixtime BETWEEN IMHOTEP_UNIXTIME('15d') AND IMHOTEP_UNIXTIME('4d')\n\nWHERE \n\tv.unixtime BETWEEN IMHOTEP_UNIXTIME('15d') AND IMHOTEP_UNIXTIME('4d')\n    AND js.account_id IS NOT NULL -- with LinkedIn link\n--    AND js.account_id IS NULL -- exclude linkedIn users\n--    AND r.batchSize = 1",
  "queryTables" : [ "datalakehive.imhotep.js_fact_store_snapshot_prod", "datalakehive.imhotep.rscontacts", "datalakehive.imhotep.rsresumeview" ],
  "queryIndex" : 59,
  "runStartToQueryComplete" : 265
}, {
  "elapsedMillis" : 2958,
  "totalScheduledMillis" : 1426970,
  "cpuMillis" : 103626,
  "queuedMillis" : 1,
  "executeMillis" : 1159,
  "getResultMillis" : 0,
  "iterateMillis" : 1813,
  "rows" : 894,
  "error" : null,
  "scannedBytes" : 8788340646,
  "query" : "WITH daily_data AS (\n    SELECT\n        date_trunc('minute', from_unixtime(lp.unixtime)) as date,\n        appName,\n        moderationApi, \n        moderationType, \n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 30 PRECEDING AND current row) AS block_count,\n\t\tSUM(COUNT(*)) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 30 PRECEDING AND current row) AS request_count,\n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS weekly_block_count,\n\t\tSUM(COUNT(*)) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS weekly_request_count\n    FROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.flagged IS NOT NULL\n        AND lp.metric = 'moderation-text'\n        AND unixtime BETWEEN imhotep_unixtime(timestamp '2024-10-24') AND imhotep_unixtime(timestamp '2024-10-29')\n        and moderationApi='mcmurdoDetoxify'\n        -- see rate_change query for filters by appName etc.\n    GROUP BY\n        date_trunc('minute', from_unixtime(lp.unixtime)),\n\t\tappName,         \n        moderationApi, \n        moderationType \n),\nblock_rate AS (\n    SELECT\n        date,\n\t\tappName, \n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        cast(request_count * 240 as double) / cast(30 * weekly_request_count as double) as relative_request_rate,\n        cast(block_count as double) / request_count as raw_block_rate,\n        -- We adjust the proportion estimates by adding z^2/2 successes and z^2/2 failures (z^2 obs total) to the counts.\n        -- This can be thought of as a Bayesian prior, or as a correction to the Normal approximation for rates close to 0 or 1.\n        -- For large values of request_count this converges to the raw proportion (block_rate ~ raw_block_rate).\n        -- Using z=3.0, in other words, we're going to require a \"3-sigma\" detection.\n        cast(block_count + 4.5 as double) / (request_count + 9.0) as block_rate, -- corrected/smoothed\n        cast(block_count as double) / (request_count + 9.0) as block_rate_zc, -- zero-centered corrected/smoothed rate (only adding to denominator)\n        cast(weekly_block_count + (240 * 4.5 / 30) as double) / (weekly_request_count + (240 * 9.0 / 30)) as  weekly_block_rate, -- corrected/smoothed\n        cast(weekly_block_count as double) / (weekly_request_count + (240 * 9.0 / 30)) as  weekly_block_rate_zc, -- corrected/smoothed        \n        cast(weekly_block_count as double) /  weekly_request_count as raw_weekly_block_rate,  \n        (cast(block_count + 4.5 as double) / (request_count + 9.0)) - (cast(weekly_block_count + (240 * 4.5 / 30) as double) / (weekly_request_count + (240 * 9.0 / 30))) as change,\n        sum(1.0) over (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 240 + 30 PRECEDING AND 1 PRECEDING) as previous_dates_count\n    FROM\n        daily_data\n),\n\nblock_rate_change AS (\n    SELECT\n        date,\n\t\tappName,         \n        moderationApi, \n        moderationType,\n        request_count,\n\t\trelative_request_rate,        \n        weekly_request_count,\n        STDDEV(block_rate-weekly_block_rate) OVER (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS stddev_obs,\n        SQRT((block_rate * (1.0 - block_rate) / request_count) + ((weekly_block_rate * (1.0 - weekly_block_rate) / weekly_request_count))) as stddev_approx,\n        raw_block_rate,  \n        block_rate,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        raw_weekly_block_rate,  \n        weekly_block_rate, -- corrected/smoothed\n        change,\n        case weekly_block_rate_zc\n           when 0 then 0\n           else (block_rate_zc - weekly_block_rate_zc) \n        end as change_zc,\n\t\tprevious_dates_count        \n    FROM\n        block_rate\n),\nconfidence_interval AS (\n    SELECT\n        date,\n\t\tappName,         \n        moderationApi, \n        moderationType,\n        stddev_obs,\n\t\tstddev_approx,\n        greatest(stddev_approx, stddev_obs) as stddev,\n        block_rate,\n        block_rate - 6 * greatest(stddev_approx, stddev_obs)  AS block_rate_lower_bound,\n        block_rate + 6 * greatest(stddev_approx, stddev_obs) AS block_rate_upper_bound,          \n        weekly_block_rate,\n\t\tweekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,        \n        change,\n        change_zc,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        request_count,\n\t\trelative_request_rate,                \n        change - 6 * greatest(stddev_approx, stddev_obs) AS change_lower_bound,\n        change + 6 * greatest(stddev_approx, stddev_obs) AS change_upper_bound,\n        previous_dates_count,\n        row_number() OVER (partition by moderationApi, moderationType ORDER BY date) as row_n \n    FROM\n        block_rate_change\n    --WHERE\n    --\tweekly_request_count > 100\n    --    and request_count > 100\n)\nSELECT\n    date,\n\tappName,     \n    moderationApi, \n    moderationType,\n    request_count,\n\trelative_request_rate,            \n    stddev_obs,\n    stddev_approx,\n    stddev,\n    block_rate,\n\tblock_rate_lower_bound,\n    block_rate_upper_bound,\n    weekly_block_rate,\n    weekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,    \n    change,\n    change / weekly_block_rate as relative_change,\n    change_zc / weekly_block_rate_zc as relative_change_zc,\n    change_zc,\n    block_rate_zc,\n    weekly_block_rate_zc,\n    \n    change_lower_bound,\n    change_upper_bound,\n    change_lower_bound * 1.0 / weekly_block_rate as relative_change_lower_bound,\n    change_upper_bound * 1.0 / weekly_block_rate as relative_change_upper_bound,\n    greatest(change_lower_bound / weekly_block_rate, 0) as relative_change_lower_bound_sig,\n    least(change_upper_bound / weekly_block_rate, 0) as relative_change_upper_bound_sig,     \n    IF((change_lower_bound > 0 or change_upper_bound<0) and (previous_dates_count > 240), 1, 0) as is_sig_change,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (date = (max(date) over ())) and (previous_dates_count > 6), 1, 0) as is_latest_date_sig_change,\n    change/stddev as z_score,\n    IF(date = (max(date) over ()), change/stddev, NULL) as latest_date_z_score, \n    max(date) over () as latest_data_date,\n    previous_dates_count            \nFROM\n    confidence_interval -- Note: return values for all dates unlike with the alerting query\nWHERE\n    (change/stddev) IS NOT NULL\n    and ((row_n % 15 = 0)  or (abs(change/stddev) > 6))\n    and previous_dates_count > (0.9 * 240)\nORDER BY\n    date DESC, moderationApi ASC, moderationType DESC",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 60,
  "runStartToQueryComplete" : 271
}, {
  "elapsedMillis" : 2682,
  "totalScheduledMillis" : 1775360,
  "cpuMillis" : 91662,
  "queuedMillis" : 1,
  "executeMillis" : 972,
  "getResultMillis" : 0,
  "iterateMillis" : 1749,
  "rows" : 466,
  "error" : null,
  "scannedBytes" : 8491829634,
  "query" : "WITH daily_data AS (\n    SELECT\n        date_trunc('minute', from_unixtime(lp.unixtime)) as date,\n        moderationApi, \n        moderationType, \n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 30 PRECEDING AND current row) AS block_count,\n\t\tSUM(COUNT(*)) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 30 PRECEDING AND current row) AS request_count,\n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS weekly_block_count,\n\t\tSUM(COUNT(*)) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS weekly_request_count\n    FROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.flagged IS NOT NULL\n        AND lp.metric = 'moderation-text'\n        AND unixtime BETWEEN imhotep_unixtime(timestamp '2024-10-24') AND imhotep_unixtime(timestamp '2024-10-29')\n        and moderationApi='mcmurdoDetoxify'\n    GROUP BY\n        date_trunc('minute', from_unixtime(lp.unixtime)),\n        moderationApi, \n        moderationType \n),\nblock_rate AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        cast(request_count * 240 as double) / cast(30 * weekly_request_count as double) as relative_request_rate,\n        cast(block_count as double) / request_count as raw_block_rate,\n        -- We adjust the proportion estimates by adding z^2/2 successes and z^2/2 failures (z^2 obs total) to the counts.\n        -- This can be thought of as a Bayesian prior, or as a correction to the Normal approximation for rates close to 0 or 1.\n        -- For large values of request_count this converges to the raw proportion (block_rate ~ raw_block_rate).\n        -- Using z=3.0, in other words, we're going to require a \"3-sigma\" detection.\n        cast(block_count + 4.5 as double) / (request_count + 9.0) as block_rate, -- corrected/smoothed\n        cast(block_count as double) / (request_count + 9.0) as block_rate_zc, -- zero-centered corrected/smoothed rate (only adding to denominator)\n        cast(weekly_block_count + (240 * 4.5 / 30) as double) / (weekly_request_count + (240 * 9.0 / 30)) as  weekly_block_rate, -- corrected/smoothed\n        cast(weekly_block_count as double) / (weekly_request_count + (240 * 9.0 / 30)) as  weekly_block_rate_zc, -- corrected/smoothed        \n        cast(weekly_block_count as double) /  weekly_request_count as raw_weekly_block_rate,  \n        (cast(block_count + 4.5 as double) / (request_count + 9.0)) - (cast(weekly_block_count + (240 * 4.5 / 30) as double) / (weekly_request_count + (240 * 9.0 / 30))) as change,\n        sum(1.0) over (partition by moderationApi, moderationType ORDER BY date ROWS BETWEEN 240 + 30 PRECEDING AND 1 PRECEDING) as previous_dates_count\n    FROM\n        daily_data\n),\n\nblock_rate_change AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        request_count,\n\t\trelative_request_rate,        \n        weekly_request_count,\n        STDDEV(block_rate-weekly_block_rate) OVER (partition by moderationApi, moderationType ORDER BY date ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS stddev_obs,\n        SQRT((block_rate * (1.0 - block_rate) / request_count) + ((weekly_block_rate * (1.0 - weekly_block_rate) / weekly_request_count))) as stddev_approx,\n        raw_block_rate,  \n        block_rate,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        raw_weekly_block_rate,  \n        weekly_block_rate, -- corrected/smoothed\n        change,\n        case weekly_block_rate_zc\n           when 0 then 0\n           else (block_rate_zc - weekly_block_rate_zc) \n        end as change_zc,\n\t\tprevious_dates_count             \n    FROM\n        block_rate\n),\nconfidence_interval AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        stddev_obs,\n\t\tstddev_approx,\n        greatest(stddev_approx, stddev_obs) as stddev,\n        block_rate,\n        block_rate - 6 * greatest(stddev_approx, stddev_obs)  AS block_rate_lower_bound,\n        block_rate + 6 * greatest(stddev_approx, stddev_obs) AS block_rate_upper_bound,          \n        weekly_block_rate,\n\t\tweekly_request_count,\n\t\traw_block_rate,        \n        raw_weekly_block_rate,        \n        change,\n        change_zc,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        request_count,\n\t\trelative_request_rate,                \n        change - 6 * greatest(stddev_approx, stddev_obs) AS change_lower_bound,\n        change + 6 * greatest(stddev_approx, stddev_obs) AS change_upper_bound,\n        previous_dates_count,\n        row_number() OVER (partition by moderationApi, moderationType ORDER BY date) as row_n         \n    FROM\n        block_rate_change\n    --WHERE\n    --\tweekly_request_count > 100\n    --    and request_count > 100\n)\nSELECT\n    date,\n    moderationApi, \n    moderationType,\n    request_count,\n\trelative_request_rate,            \n    stddev_obs,\n    stddev_approx,\n    stddev,\n    block_rate,\n\tblock_rate_lower_bound,\n    block_rate_upper_bound,\n    weekly_block_rate,\n    weekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,    \nchange,\n    change / weekly_block_rate as relative_change,\n    change_zc / weekly_block_rate_zc as relative_change_zc,\n    change_zc,\n    block_rate_zc,\n    weekly_block_rate_zc,        \n    change_lower_bound,\n    change_upper_bound,\n    change_lower_bound * 1.0 / weekly_block_rate as relative_change_lower_bound,\n    change_upper_bound * 1.0 / weekly_block_rate as relative_change_upper_bound,\n    greatest(change_lower_bound / weekly_block_rate, 0) as relative_change_lower_bound_sig,\n    least(change_upper_bound / weekly_block_rate, 0) as relative_change_upper_bound_sig,     \n    IF((change_lower_bound > 0 or change_upper_bound<0) and (previous_dates_count > 240), 1, 0) as is_sig_change,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (date = (max(date) over ())) and (previous_dates_count > 6), 1, 0) as is_latest_date_sig_change,\n    change/stddev as z_score,\n    IF(date = (max(date) over ()), change/stddev, NULL) as latest_date_z_score, \n    max(date) over () as latest_data_date,\n    previous_dates_count            \nFROM\n    confidence_interval -- Note: return values for all dates unlike with the alerting query\nWHERE\n    (change/stddev) IS NOT NULL\n    and ((row_n % 15 = 0)  or (abs(change/stddev) > 6))\n    and previous_dates_count > (0.9 * 240)\nORDER BY\n    date DESC, moderationApi ASC, moderationType DESC",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 61,
  "runStartToQueryComplete" : 271
}, {
  "elapsedMillis" : 12452,
  "totalScheduledMillis" : 18823199,
  "cpuMillis" : 2203219,
  "queuedMillis" : 1,
  "executeMillis" : 7802,
  "getResultMillis" : 0,
  "iterateMillis" : 4673,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 76072588218,
  "query" : "SELECT \n\tCOUNT(*) as total_profile_views, \n   \tSUM(r.sent) as outreaches,\n    SUM(r.resp_pos) as resp_pos,\n    COUNT(js.account_id) as profile_with_linkedIn,\n    ROUND(CAST(SUM(r.sent) AS DOUBLE) * 100 / COUNT(*), 1) as outreach_rate\nFROM \n\tdatalake.imhotep.rsresumeview v\n\nLEFT JOIN\n\tdatalake.imhotep.rscontacts r\nON\n\tv.recruiterAccountId = r.senderAccountId\n    AND v.resumeAccountId = r.recipientAccountId\n    AND r.unixtime BETWEEN IMHOTEP_UNIXTIME('15d') AND IMHOTEP_UNIXTIME('4d')\n\nLEFT JOIN \n\tdatalake.imhotep.js_fact_store_snapshot_prod js\nON\n\tv.resumeAccountId = js.account_id\n\tAND js.resume_links_size > 0\n\tAND CARDINALITY(FILTER(js.resume_links_array, x -> x LIKE '%linkedin%')) > 0\n    AND js.unixtime BETWEEN IMHOTEP_UNIXTIME('15d') AND IMHOTEP_UNIXTIME('4d')\n\nWHERE \n\tv.unixtime BETWEEN IMHOTEP_UNIXTIME('15d') AND IMHOTEP_UNIXTIME('4d')\n--    AND js.account_id IS NOT NULL -- with LinkedIn link\n    AND js.account_id IS NULL -- exclude linkedIn users\n--    AND r.batchSize = 1",
  "queryTables" : [ "datalakehive.imhotep.js_fact_store_snapshot_prod", "datalakehive.imhotep.rscontacts", "datalakehive.imhotep.rsresumeview" ],
  "queryIndex" : 62,
  "runStartToQueryComplete" : 291
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 12185,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_172656_00085_vjepj): Division by zero",
  "scannedBytes" : 0,
  "query" : "with \n-- Pull all conversations initiated by employers \ndremrToConvs as (\nselect  unixtime, advertiserId,  eventId, conversationId\n  \t\t, case when starts_with(subEventType, 'INBOUND_EMAIL') then 1 else 0 end as is_email\n        , case when starts_with(source, 'Dremr')  then 1 else 0 end as is_Dremr  \n  from conversationEvents \nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('56d') and IMHOTEP_UNIXTIME('28d')\n  and context = 'APPLICATION'\n  and ownerRole != 'JOBSEEKER'\n  and cast(isInitialMessage as int)=1 -- Look at initial messages only, as a proxy for when a conversation is created\ngroup by 1,2,3,4,5,6\n\n              )\n              \n-- Employers with any ATS Integration\n,atsEmployers as (\n\nselect advertiserId  \n  from partnerEmployerMap\n where unixtime BETWEEN IMHOTEP_UNIXTIME('56d') and IMHOTEP_UNIXTIME('28d')\n   and confidenceScore >0\ngroup by  1 \n\n                )\n\n-- advertisers that have had at least 1 candidate delivered to the ATS with a DREMR email\n, atsSync as (\n\nselect advertiser_id, connection_type as ats \n      , agg_job_id\n      ,concat('DRADIS/', cast(advertiser_id as varchar), '-', cast(dradis_candidate_id as varchar)) as conversationId\n\n  from acdcTransferLifecycle\n where unixtime BETWEEN IMHOTEP_UNIXTIME('56d') and IMHOTEP_UNIXTIME('28d')\n   and pipeline_internal_type='INTERNAL_LOCATION_TYPE_EMPLOYER_JOB'\n   and connection_type!= 'h2ia'\n   and driver_type not in ('pipeline-csul', 'pipeline-csul-historical')\ngroup by 1,2,3,4\n            \n            )\n -- Dradis bulk export           \n,dradisBulkExport as (    \t\n\n        SELECT advertiserId\n\t\t\t  ,concat('DRADIS/', cast(advertiserId as varchar), '-', cast(candidateId as varchar)) as conversationId\n        FROM datalake.imhotep.dradisCandidateExportRequest\n        CROSS JOIN UNNEST(split(candidateIds, ',')) as t (candidateId)\n        WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('56d') and IMHOTEP_UNIXTIME('28d')\n       group by 1,2\n  )     \n\n\n-- advertiser segment details\n,advertiserDetails as ( \n\nselect advertiser_id\n   , max_by(parent_company_size_segment, unixtime) as parent_company_size_segment\n   , max_by(type, unixtime) as type\n   , max_by(billing_country, unixtime) as billing_country\n  from  daily_employer2 \n  where unixtime BETWEEN IMHOTEP_UNIXTIME('56d') and IMHOTEP_UNIXTIME('28d')\ngroup by 1\n\n   )\n\n\n -- Aggregate convo counts per query\n, empDataAgg as (\n\n\n select \n\tdremrToConvs.advertiserId\n   ,case when atsEmployers.advertiserId is not null then 1 else 0 end as isAtsIntegrated   \n   ,count(*) as allConvos\n   ,count_if(is_Dremr=1) as dremrConvos\n   --,count_if(is_Dremr=1 and is_email=1) as dremrEmailConvos\n   ,count_if(is_Dremr=1 and atsSync.conversationId is not null) as dremrAtsSyncAll\n   ,count_if(is_Dremr=1 and dradisBulkExport.conversationId is not null) as dremrDradisBulkExport\n   ,count_if(is_Dremr=1 and (atsSync.conversationId is not null or dradisBulkExport.conversationId is not null)) as dremrAtsSyncOrBulkExport\n   \n   \n  from dremrToConvs \n  left join atsEmployers on dremrToConvs.advertiserId=atsEmployers.advertiserId\n  left join atsSync on dremrToConvs.advertiserId=atsSync.advertiser_id\n        and dremrToConvs.conversationId=atsSync.conversationId\n  left join dradisBulkExport on dremrToConvs.advertiserId=dradisBulkExport.advertiserId\n        and dremrToConvs.conversationId=dradisBulkExport.conversationId\n    \n  group by 1,2\n                )\n                \n \n,segConvos as (\nselect\n    ce.advertiserId\n   ,eventId\n   ,ce.encryptedConversationId\n   ,(isImported = '1') as isEmail\nFROM conversationEvents ce\njoin convsConversationCreation cc on  ce.encryptedConversationId = cc.encryptedConversationId \n\nWHERE ce.unixtime BETWEEN IMHOTEP_UNIXTIME('209d') AND IMHOTEP_UNIXTIME('28d')\nand   cc.unixtime BETWEEN IMHOTEP_UNIXTIME('223d') AND IMHOTEP_UNIXTIME('28d')\nand ((ce.unixtime - cc.unixtime) < (60*60*24*14))\nand ce.context='APPLICATION'\nand ce.ownerRole != 'JOBSEEKER'\nGROUP BY 1,2,3,4\n)\n\n\n, segConvosAgg as (\n\nselect advertiserId\n      ,count(*) as totalMessages\n      ,count_if(isEmail) as emailMessages\n      ,count_if(NOT isEmail) as onPlatformMessages \n  from segConvos\ngroup by 1 \n\n\t\t)\n\n,segConvosAgg2 as (\n\n select advertiserId, case when emailMessages> 0 and onPlatformMessages=0 then 'Email Only'\n\t\t\t when  emailMessages=0 and onPlatformMessages>0 then 'Chat Only'\n\t\t\t when  emailMessages>0 and onPlatformMessages>0 then 'Email & Chat'\n             end as usageType\n\n  from segConvosAgg\n                 )\n\n\nselect \n        segConvosAgg2.usageType\n       ,count() as empCount\n       , 100.0*count()/sum(count()) over () pctEmpCountOfAll\n    --  ,count_if(isAtsIntegrated=1) as empCountAtsIntegrated\n      ,100.00* count_if(isAtsIntegrated=1)/count(*) as pctEmpAtsIntegrated\n      ,sum(allConvos) as ttlConvosInitiated\n\t  ,sum(DremrConvos) as DremrConvosInitiated\n  --    ,sum(dremrConvos) as ttlDremrConvosInitiated\n      ,100.00* sum(dremrConvos)/sum(allConvos) as dremrConvosPctOfAllInitiated\n      \n      ,100.00* sum(dremrAtsSyncAll)/sum(dremrConvos) as pctOfDremrConvosAtsSyncAll\n      ,100.00* sum(dremrDradisBulkExport)/sum(dremrConvos) as pctOfDremrConvosDradisBulkExport\n      ,100.00* sum(dremrAtsSyncOrBulkExport)/sum(dremrConvos) as pctOfDremrConvosAtsSyncOrBulkExport\n     \n from empDataAgg\nleft join advertiserDetails on empDataAgg.advertiserId=advertiserDetails.advertiser_id\nleft join segConvosAgg2     on empDataAgg.advertiserId=segConvosAgg2.advertiserId\n    where  parent_company_size_segment in ('L', 'XL') and usageType is not null\ngroup by 1\n                \n\n                \n\n              \n              \n              ",
  "queryTables" : [ "datalakehive.imhotep.dradiscandidateexportrequest", "skipperhive.imhotep.acdctransferlifecycle", "skipperhive.imhotep.conversationevents", "skipperhive.imhotep.conversationevents", "skipperhive.imhotep.convsconversationcreation", "skipperhive.imhotep.daily_employer2", "skipperhive.imhotep.partneremployermap" ],
  "queryIndex" : 63,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 108071,
  "totalScheduledMillis" : 164442870,
  "cpuMillis" : 35231561,
  "queuedMillis" : 1,
  "executeMillis" : 4281,
  "getResultMillis" : 0,
  "iterateMillis" : 103850,
  "rows" : 2,
  "error" : null,
  "scannedBytes" : 572238704753,
  "query" : "WITH jobs_raw AS (\n\t-- get all of the live jobs for our advertisers\n\tSELECT CASE WHEN CARDINALITY(FILTER(ratgs_lite, x -> x LIKE '%freevalue_so_job_copies_gb1'))>0\n             THEN 'Test' ELSE 'Control' END as experiment_group\n\t     , advertiser_id\n\t     , job_hash\n\t     , job_city\n\t     , job_state as job_admin_1_code\n\t     , (is_job_searchable+impressions+clicks+apply_starts)>0 as is_live\n\t     , unixtime\n    FROM datalake.imhotep.jobactivitymetrics as jam\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-09-23') AND IMHOTEP_UNIXTIME('today')\n        AND job_country_code='GB'\n        AND job_city IS NOT NULL\n        AND job_state IS NOT NULL\n        AND CARDINALITY(FILTER(ratgs_lite, x -> x LIKE '%B%:freevalue_so_job_copies_gb%'))>0\n)\n\n, jobs_raw_w_dj2 AS (\n    -- reduce to only jobs that were created or updated during the test window\n    SELECT jam.experiment_group\n\t     , jam.advertiser_id\n\t     , jam.job_hash\n\t     , jam.job_city\n\t     , jam.job_admin_1_code\n\t     , jam.is_live\n\t     , jam.unixtime\n    FROM jobs_raw jam\n    JOIN  datalake.imhotep.dradis_job2 as dj2 ON (dj2.job_hash_underscore = jam.job_hash)\n    WHERE dj2.unixtime BETWEEN IMHOTEP_UNIXTIME('2024-09-23') AND IMHOTEP_UNIXTIME('today')\n        AND (dj2.date_created>=20240923\n            OR (previous_status IN ('PAUSED','DELETED') AND status='ACTIVE'))\n)\n\n, ordered_jobs AS (\n    SELECT experiment_group\n\t     , advertiser_id\n\t     , job_hash\n         , job_city\n\t     , job_admin_1_code\n         , unixtime\n\t     , is_live\n\t     , LAG(is_live) OVER (PARTITION BY job_hash, experiment_group ORDER BY unixtime) AS prev_is_live\n\t     , LAG(unixtime) OVER (PARTITION BY job_hash, experiment_group ORDER BY unixtime) AS prev_unixtime\n    FROM jobs_raw_w_dj2\n)\n\n, jobs_w_live_periods AS (\n    SELECT experiment_group\n\t     , advertiser_id\n\t     , job_hash\n         , job_city\n\t     , job_admin_1_code\n         , unixtime as live_start_date\n         , LEAD(unixtime, 1, TO_UNIXTIME(CURRENT_DATE)) OVER (PARTITION BY job_hash, experiment_group ORDER BY unixtime) AS live_end_date\n    FROM ordered_jobs\n    WHERE is_live = true\n        AND (prev_is_live IS NULL OR prev_is_live = false)\n)\n\n, jobs_w_live_periods_copy_attrs AS (\n    -- get the fields we need for copy comparison\n    SELECT experiment_group\n         , jca.advertiser_id\n         , job_hash\n         , job_on_indeed_unixtime\n         , jca.job_city\n         , jca.job_admin_1_code\n         , job_type_id\n         , job_normalized_title_sim_hash\n         , job_description_sim_hash\n         , taxo_occupations_most_specific_suid\n         , job_occupations\n         , jwlp.live_start_date\n         , jwlp.live_end_date\n    FROM jobs_w_live_periods jwlp\n    JOIN datalake.imhotep.job_copy_attributes as jca USING (job_hash)\n    WHERE jca.unixtime BETWEEN IMHOTEP_UNIXTIME('2024-09-23') AND IMHOTEP_UNIXTIME('today')\n    AND jca.job_admin_1_code IS NOT NULL\n    AND jca.job_city IS NOT NULL\n)\n\n, live_jobs_w_copy_pair AS (\n    SELECT orig.experiment_group\n        , orig.advertiser_id as advertiser_id\n        , orig.job_hash as job_hash\n        , copy.job_hash as copy_job_hash\n        , orig.job_city\n        , orig.job_admin_1_code\n        , orig.live_start_date as orig_live_start_date\n        , orig.live_end_date as orig_live_end_date\n        , copy.live_start_date as copy_live_start_date\n        , copy.live_end_date as copy_live_end_date\n        , GREATEST(orig.live_start_date, copy.live_start_date) AS overlap_start\n        , LEAST(orig.live_end_date, copy.live_end_date) AS overlap_end\n        , orig.live_start_date <= copy.live_end_date AND copy.live_start_date <= orig.live_end_date as has_overlap -- original and copy were live at the same time\n         -- split the 128-bit simhash into two 64-bit representations\n        , cast( from_big_endian_64(lpad(substr(from_base64(orig.job_description_sim_hash), 1, 8), 8, from_base64('AAAAAAAAAAA='))) as bigint) as orig_high\n        , cast( from_big_endian_64(lpad(substr(from_base64(orig.job_description_sim_hash), 9, 8), 8, from_base64('AAAAAAAAAAA='))) as bigint) as orig_low\n        , cast( from_big_endian_64(lpad(substr(from_base64(copy.job_description_sim_hash), 1, 8), 8, from_base64('AAAAAAAAAAA='))) as bigint) as copy_high\n        , cast( from_big_endian_64(lpad(substr(from_base64(copy.job_description_sim_hash), 9, 8), 8, from_base64('AAAAAAAAAAA='))) as bigint) as copy_low\n    FROM jobs_w_live_periods_copy_attrs orig\n    LEFT JOIN jobs_w_live_periods_copy_attrs copy ON (\n        orig.experiment_group = copy.experiment_group\n        AND orig.advertiser_id = copy.advertiser_id\n        AND orig.job_city = copy.job_city\n        AND orig.job_admin_1_code = copy.job_admin_1_code\n        AND orig.job_hash != copy.job_hash\n        AND orig.job_on_indeed_unixtime < copy.job_on_indeed_unixtime -- original must be created before the copy\n\n        AND bitwise_or(orig.job_type_id, copy.job_type_id) > 0 -- job_type_id any match\n\n        -- compare normalized titles when they are both not null. otherwise, ignore them\n        AND CASE WHEN orig.job_normalized_title_sim_hash IS NOT NULL AND copy.job_normalized_title_sim_hash IS NOT NULL THEN orig.job_normalized_title_sim_hash = copy.job_normalized_title_sim_hash ELSE TRUE END\n\n        -- compare occupation when they are both not null. otherwise, ignore them\n        AND CASE WHEN orig.taxo_occupations_most_specific_suid IS NOT NULL AND CARDINALITY(copy.job_occupations) > 0 THEN CONTAINS(copy.job_occupations, orig.taxo_occupations_most_specific_suid) ELSE TRUE END\n        )\n)\n\n, live_jobs_final AS (\n    SELECT *\n         -- the right job is a copy if we have a copy_job_hash defined and the description hamming distance is <= 7\n         , copy_job_hash IS NOT NULL AND bit_count(bitwise_xor(orig_high, copy_high), 64) + bit_count(bitwise_xor(orig_low, copy_low), 64) <= 7 as has_copy\n        , (overlap_end - overlap_start) / 86400 as overlap_days\n        , (orig_live_end_date - orig_live_start_date) / 86400 as orig_days_live\n        , (copy_live_end_date - copy_live_start_date) / 86400 as copy_days_live\n    FROM live_jobs_w_copy_pair\n)\n\n\nSELECT experiment_group\n     , COUNT(DISTINCT advertiser_id) as advertisers\n     , COUNT(DISTINCT job_hash) as all_live_jobs\n     , COUNT(DISTINCT CASE WHEN has_copy THEN copy_job_hash END) as live_copies\n     , COUNT(DISTINCT CASE WHEN has_copy AND has_overlap THEN copy_job_hash END) as live_copies_w_overlap -- there was a point when original and copy were both live at the same imt\n     , COUNT(DISTINCT CASE WHEN has_copy AND has_overlap = FALSE THEN copy_job_hash END) as live_copies_no_overlap -- there was a point when original and copy were not live at the same time\n     , AVG(CASE WHEN has_copy AND has_overlap THEN overlap_days ELSE NULL END) as avg_days_overlap\n     , AVG(CASE WHEN has_copy THEN orig_days_live ELSE NULL END) as orig_avg_days_live\n     , AVG(CASE WHEN has_copy THEN copy_days_live ELSE NULL END) as copy_avg_days_live\n     -- subtract the count of copy jobs from all jobs to get the total unique jobs live\n     , COUNT(DISTINCT job_hash) - COUNT(DISTINCT CASE WHEN has_copy THEN copy_job_hash END) as unique_live_jobs\nFROM live_jobs_final\nGROUP BY 1\nORDER BY 1 ASC",
  "queryTables" : [ "datalakehive.imhotep.dradis_job2", "datalakehive.imhotep.dradis_job2", "datalakehive.imhotep.job_copy_attributes", "datalakehive.imhotep.job_copy_attributes", "datalakehive.imhotep.jobactivitymetrics", "datalakehive.imhotep.jobactivitymetrics" ],
  "queryIndex" : 64,
  "runStartToQueryComplete" : 431
}, {
  "elapsedMillis" : 36541,
  "totalScheduledMillis" : 43027271,
  "cpuMillis" : 13242900,
  "queuedMillis" : 0,
  "executeMillis" : 4401,
  "getResultMillis" : 0,
  "iterateMillis" : 32166,
  "rows" : 1740,
  "error" : null,
  "scannedBytes" : 472289731569,
  "query" : "-- Original Creator: atruong\n-- Updated By: spencerbrown\n-- Description: AWS Pull similar to Product Ishbook for sponsored engagement\n-- Data Lake link: https://pda.indeed.tech/datalake\n-- If this errors out, you may need AWS access. Request on Jira\n\nselect\na.job_id,\na.advertiser_id,\nb.feed_id,\nb.source_id,\nb.fcc_id,\nb.job_visibility_level,\nb.job_city,\nb.job_state,\nb.job_country,\nb.norm_title,\nb.norm_title_category,\nb.actual_title,\nb.job_reference_number,\nsum(a.impressions) sj_impressions,\nsum(a.clicks) sj_clicks,\nsum(a.apply_starts) sj_apply_starts,\nsum(a.applies) sj_applies,\nsum(a.charged_amount_local) charged_amount_local\n\nfrom datalake.core.jobs_fct_job_performance_sponsored_daily a\n\nleft join datalake.core.jobs_dim_job_attributes_latest b\non a.job_id = b.job_id\n\nwhere a.activity_date between cast('2024-01-01' as date) and cast('2024-08-31' as date)\nand a.advertiser_id in (42599, 16911779)\n\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13",
  "queryTables" : [ "datalakehive.core.jobs_dim_job_attributes_latest", "datalakehive.core.jobs_fct_job_performance_sponsored_daily" ],
  "queryIndex" : 65,
  "runStartToQueryComplete" : 368
}, {
  "elapsedMillis" : 1481,
  "totalScheduledMillis" : 519,
  "cpuMillis" : 113,
  "queuedMillis" : 0,
  "executeMillis" : 789,
  "getResultMillis" : 0,
  "iterateMillis" : 703,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 15157758,
  "query" : "SELECT *\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 66,
  "runStartToQueryComplete" : 334
}, {
  "elapsedMillis" : 1286,
  "totalScheduledMillis" : 268115,
  "cpuMillis" : 21494,
  "queuedMillis" : 1,
  "executeMillis" : 832,
  "getResultMillis" : 0,
  "iterateMillis" : 868,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 416036536,
  "query" : "SELECT *\nFROM datalake.imhotep.passdailysnapshot\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.passdailysnapshot" ],
  "queryIndex" : 67,
  "runStartToQueryComplete" : 348
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 0,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_172755_00090_vjepj): line 57:9: Column 'casenumber' cannot be resolved",
  "scannedBytes" : 0,
  "query" : "WITH messassingsession_raw AS (\n    SELECT \n        session_owner_adc_id__c AS rep_id,\n        session_owner__c AS rep_name,\n        csat_score__c AS csat_score,\n        how_could_we_improve_your_experience__c AS csat_feedback,\n        caseid,\n        lastmodifieddate AS survey_sent_date,\n        substring(createddate, 1, 10) AS survey_date,\n        name AS response_id,\n        conversationid AS survey_instance_id,\n        skillname__c AS queue_name,\n        messaging_user_parentcompanyid__c AS parent_id,\n        agenttype,\n        channelname,\n        locale__c\n    FROM datalake.salesforce.messagingsession\n),\nold_chat_table as (\n\tSELECT \n      adc_user_id__c as rep_id,\n      '' as rep_name,\n      csat_score__c as csat_score,\n      how_could_we_improve_your_experience__c as csat_feedback,\n      caseid,\n      createddate as survey_sent_date,\n      substring(createddate, 1, 10) as survey_date,\n      name AS response_id,\n      chatkey as survey_instance_id,\n      livechatbuttonid AS queue_name,\n      '' AS parent_id,\n      '' as agenttype,\n      '' as channelname,\n      browserlanguage as locale__c\n  \tFROM datalake.salesforce.livechattranscript\n),\njoined_chat_tables as (\n  SELECT * FROM messassingsession_raw \n  UNION ALL \n  SELECT * FROM old_chat_table\n),\nsalesforce_user_data AS (\n    SELECT\n        adc_user_id__c,\n        name,\n        email,\n        alias,\n        department\n    FROM datalake.salesforce.\"user\"\n),\nsalesforce_case_data AS (\n    SELECT\n        id AS sales_caseid,\n        advertiser_id,\n        type,\n        type_sub_type,\n        casenumber\n    FROM datalake.scss.salesforce_case\n),\nmessages_salesforce AS (\n    SELECT \n        ms.rep_id,\n        ms.rep_name,\n        ms.csat_score,\n        ms.csat_feedback,\n        ms.caseid,\n        ms.survey_sent_date,\n        ms.survey_date,\n        ms.response_id,\n        ms.survey_instance_id,\n        ms.queue_name,\n        ms.parent_id,\n        ms.agenttype,\n        ms.channelname,\n        ms.locale__c,\n        ud.adc_user_id__c,\n        ud.name AS user_name,\n        ud.email,\n        ud.alias,\n        ud.department,\n        scd.sales_caseid,\n        scd.advertiser_id,\n        scd.type AS case_type,\n        scd.type_sub_type,\n        scd.casenumber\n    FROM joined_chat_tables ms\n    LEFT JOIN salesforce_user_data ud\n        ON ud.adc_user_id__c = ms.rep_id\n    LEFT JOIN salesforce_case_data scd\n        ON ms.caseid = scd.sales_caseid\n),\nadvertiser_info AS (\n    SELECT DISTINCT\n        a.advertiser_id,\n        a.advertiser_name,\n        a.type AS advertiser_type,\n        a.billing_country,\n        p.parent_company_id,\n        p.parent_company_name,\n        p.company_size_segment AS parent_company_size_segment\n    FROM datalake.core.client_attributes_dim_advertiser_attributes_current a\n    LEFT JOIN datalake.core.client_attributes_dim_parent_attributes_current p\n        ON a.parent_company_id = p.parent_company_id\n),\ncsat_chat as (\n\tSELECT \n    ms.rep_id,\n    ms.rep_name,\n    TRY_CAST(ms.csat_score AS DOUBLE) as csat_score,\n    ms.csat_feedback,\n    ms.caseid,\n    ms.survey_sent_date,\n    ms.survey_date,\n    ms.response_id,\n    ms.survey_instance_id,\n    ms.queue_name,\n    ms.parent_id,\n    ms.agenttype,\n    ms.channelname,\n    ms.locale__c,\n    ms.adc_user_id__c,\n    ms.user_name,\n    ms.email,\n    ms.alias,\n    ms.department,\n    ms.sales_caseid,\n    ms.advertiser_id,\n    ms.case_type,\n    ms.type_sub_type,\n    ms.casenumber,\n    ai.advertiser_name,\n    ai.advertiser_type,\n    ai.billing_country,\n    ai.parent_company_id,\n    ai.parent_company_name,\n    ai.parent_company_size_segment\nFROM messages_salesforce ms\nLEFT JOIN advertiser_info ai\n    ON CAST(ai.advertiser_id AS VARCHAR) = CAST(ms.advertiser_id AS VARCHAR)\n)\nSELECT * FROM csat_chat WHERE csat_score IS NOT NULL AND csat_score > 0 LIMIT 100",
  "queryTables" : [ "datalakehive.core.client_attributes_dim_advertiser_attributes_current", "datalakehive.core.client_attributes_dim_parent_attributes_current", "datalakehive.salesforce.livechattranscript", "datalakehive.salesforce.messagingsession", "datalakehive.salesforce.user", "datalakehive.scss.salesforce_case" ],
  "queryIndex" : 68,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 1969,
  "totalScheduledMillis" : 135372,
  "cpuMillis" : 38506,
  "queuedMillis" : 0,
  "executeMillis" : 868,
  "getResultMillis" : 0,
  "iterateMillis" : 1114,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 3368645059,
  "query" : "SELECT *\nFROM datalake.imhotep.passdailysnapshot\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nand accountid = 1118152174\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.passdailysnapshot" ],
  "queryIndex" : 69,
  "runStartToQueryComplete" : 370
}, {
  "elapsedMillis" : 150990,
  "totalScheduledMillis" : 846275,
  "cpuMillis" : 415364,
  "queuedMillis" : 0,
  "executeMillis" : 4737,
  "getResultMillis" : 0,
  "iterateMillis" : 146263,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 181074159,
  "query" : "select count(1) from logrepo.raw_log.orgClk where unixtime >= imhotep_unixtime('2019-11-02 00:00:00') and unixtime < imhotep_unixtime('2019-11-02 01:00:00')",
  "queryTables" : [ "logrepo.raw_log.orgclk" ],
  "queryIndex" : 70,
  "runStartToQueryComplete" : 525
}, {
  "elapsedMillis" : 4956,
  "totalScheduledMillis" : 7740,
  "cpuMillis" : 4140,
  "queuedMillis" : 1,
  "executeMillis" : 4069,
  "getResultMillis" : 0,
  "iterateMillis" : 923,
  "rows" : 116,
  "error" : null,
  "scannedBytes" : 98731240,
  "query" : "WITH\n\npopulated_day AS (\n    SELECT MIN(day) AS most_recent_day\n    FROM (\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"jiracloudissues$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n\n        UNION ALL\n\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"ownershipSnapshot$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n\n        UNION ALL\n\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"teamwrksSnapshot$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n    )\n)\n\n-- Count of a11y violations remediated within SLO in the last 30 days / (All a11y violations remediated within last 30 days + Open issues)\nSELECT\n    inslo,\n    DATE_FORMAT(duedate, '%Y-%m-%d') AS duedate,\n    teamId,\n\t-- project,\n    issuekey,\n    -- issuetype,\n    priority,\n    status,\n    summary,\n    lastupdated,\n    DATE_FORMAT(createdate, '%Y-%m-%d') AS createdate,\n    labels,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    t7\nFROM (\n\tSELECT\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        ji.issuekey AS issuekey,\n        ji.issuetype AS issuetype,\n        ji.priority AS priority,\n        ji.summary AS summary,\n        ji.status AS status,\n        DATE_FORMAT(FROM_UNIXTIME(CAST(ji.lastupdated AS BIGINT) / 1000), '%Y-%m-%d') AS lastupdated,\n\t\tDATE_TRUNC('day', DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')) AS createdate,\n        DATE_TRUNC('day', DATE_ADD('day',\n        \tCASE \n                WHEN ji.priority = 'Blocker' THEN 30 \n                ELSE 90 \n            END, \n            DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')\n        )) AS duedate,\n\t\tCAST(DATE_ADD('day',\n            CASE \n                WHEN ji.priority = 'Blocker' THEN 30 \n                ELSE 90 \n            END, \n            DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')\n        ) > CURRENT_DATE AS BOOLEAN) AS inslo,\n        ji.labels AS labels,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        tw.tier_7 AS t7\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.day = (SELECT most_recent_day from populated_day) AND\n        ow.day = (SELECT most_recent_day from populated_day) AND\n        tw.day = (SELECT most_recent_day from populated_day) AND\n        ji.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        ow.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        tw.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            -- The line below will include \"Pending Closure\" tickets in the resulting table\n            -- OR ji.resolutiontimestamp = 0\n        )\n    GROUP BY\n    \tow.accountablePartyId,\n    \tji.projectkey,\n        ji.issuekey,\n\t\tji.issuetype,\n        ji.priority,\n        ji.summary,\n        ji.status,\n        DATE_FORMAT(FROM_UNIXTIME(CAST(ji.lastupdated AS BIGINT) / 1000), '%Y-%m-%d'),\n\t\tDATE_TRUNC('day', DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')),\n        DATE_TRUNC('day', DATE_ADD('day',\n            CASE \n                WHEN ji.priority = 'Blocker' THEN 30\n                ELSE 90 \n           \tEND, \n            DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')\n        )),\n        CAST(DATE_ADD('day',\n            CASE \n                WHEN ji.priority = 'Blocker' THEN 30 \n                ELSE 90 \n            END, \n            DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')\n        ) > CURRENT_DATE AS BOOLEAN),\n        ji.labels,\n        tw.tier_0,\n        tw.tier_1,\n        tw.tier_2,\n        tw.tier_3,\n        tw.tier_4,\n        tw.tier_5,\n        tw.tier_6,\n        tw.tier_7\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    ('Job Seeker Journey'='' OR t3 = 'Job Seeker Journey') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '') AND\n    (''='' OR t7 = '')\nORDER BY \n\tinslo ASC,\n\tduedate ASC ",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.jiracloudissues$partitions", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.ownershipsnapshot$partitions", "datalakehive.imhotep.teamwrkssnapshot", "datalakehive.imhotep.teamwrkssnapshot$partitions" ],
  "queryIndex" : 71,
  "runStartToQueryComplete" : 414
}, {
  "elapsedMillis" : 4254,
  "totalScheduledMillis" : 5477,
  "cpuMillis" : 3011,
  "queuedMillis" : 0,
  "executeMillis" : 3607,
  "getResultMillis" : 0,
  "iterateMillis" : 686,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 34896158,
  "query" : "WITH populated_day AS (\n    SELECT MIN(day) AS most_recent_day\n    FROM (\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"jiracloudissues$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n\n        UNION ALL\n\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"ownershipSnapshot$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n\n        UNION ALL\n\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"teamwrksSnapshot$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n    )\n),\n\nslo_data AS (\n    SELECT\n        teamId,\n        project,\n        CASE\n            WHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n            ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n        END AS SLO_Score,\n        REM_30 AS Closed_Within_SLO,\n        ALL_REM_30 AS All_Remediated_Last_30,\n        UNREM AS Open_Outside_SLO,\n        t1,\n        t2,\n        t3,\n        t4,\n        t5,\n        t6,\n        t7\n    FROM (\n        SELECT\n            ji.projectkey AS project,\n            ow.accountablePartyId AS teamId,\n            tw.tier_1 AS t1,\n            tw.tier_2 AS t2,\n            tw.tier_3 AS t3,\n            tw.tier_4 AS t4,\n            tw.tier_5 AS t5,\n            tw.tier_6 AS t6,\n            tw.tier_7 AS t7,\n\n            COUNT(CASE WHEN\n                ji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n                (\n                    (ji.priority = 'Blocker' AND\n                    ((ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 1000) / 86400 <= 30 AND\n                    ((TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 1000) / 86400000 <= 30) OR \n                    (ji.priority NOT IN ('Blocker') AND\n                    (ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000) / 86400 <= 30 AND\n                    (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT) / 1000) / 86400000 <= 90)\n                )\n            THEN 1 END) AS REM_30,\n\n            COUNT(CASE WHEN\n                ji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n                (ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 86400 <= 30\n            THEN 1 END) AS ALL_REM_30,\n\n            COUNT(CASE WHEN\n                ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n                (\n                    (ji.priority = 'Blocker' AND (ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 86400 > 30) OR\n                    (ji.priority NOT IN ('Blocker') AND (ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 86400 > 90)\n                )\n            THEN 1 END) AS UNREM\n        FROM datalake.imhotep.jiracloudissues AS ji\n        JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n        JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n        WHERE\n            ji.day = (SELECT most_recent_day FROM populated_day) AND\n            ow.day = (SELECT most_recent_day FROM populated_day) AND\n            tw.day = (SELECT most_recent_day FROM populated_day) AND\n            ji.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n            ow.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n            tw.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n            CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n            NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n            ji.projectkey NOT IN ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n            ji.issuetype = 'Bug' AND\n            tw.tier_1 NOT IN ('Global Revenue', 'Marketing')\n        GROUP BY ow.accountablePartyId, ji.projectkey, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5, tw.tier_6, tw.tier_7\n    )\n)\n\nSELECT *\nFROM slo_data\nWHERE \n    SLO_Score > 0 AND SLO_Score != 100 AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    ('Job Seeker Journey'='' OR t3 = 'Job Seeker Journey') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '') AND\n    (''='' OR t7 = '')\nORDER BY teamId, project, t1, t2, t3, t4, t5, t6, t7 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.jiracloudissues$partitions", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.ownershipsnapshot$partitions", "datalakehive.imhotep.teamwrkssnapshot", "datalakehive.imhotep.teamwrkssnapshot$partitions" ],
  "queryIndex" : 72,
  "runStartToQueryComplete" : 415
}, {
  "elapsedMillis" : 4585,
  "totalScheduledMillis" : 25493090,
  "cpuMillis" : 878920,
  "queuedMillis" : 1,
  "executeMillis" : 775,
  "getResultMillis" : 0,
  "iterateMillis" : 3827,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 7936106304,
  "query" : "/*SELECT MIN(eventtime), MAX(eventtime)\nFROM datalake.mdp_offline_feature_store.job_feature_empx_enhanced_job_feature_by_advertiser_model\nWHERE top5occupationreceivepositivesentimentandcount IS NOT NULL;*/\n\nSELECT \n    100.0 * SUM(CASE \n    \t\t\t\tWHEN top5occupationreceivepositivesentimentandcount IS NOT NULL AND CARDINALITY(top5occupationreceivepositivesentimentandcount) > 0\n                    \tTHEN 1 \n                    ELSE 0 END) / COUNT(*) AS coverage_percentage\nFROM datalake.mdp_offline_feature_store.job_feature_empx_enhanced_job_feature_by_advertiser_model\nWHERE eventtime BETWEEN from_unixtime(1692511252) AND from_unixtime(1718344260) --Bombyx dataset timestamp range\n",
  "queryTables" : [ "datalake.mdp_offline_feature_store.job_feature_empx_enhanced_job_feature_by_advertiser_model" ],
  "queryIndex" : 73,
  "runStartToQueryComplete" : 416
}, {
  "elapsedMillis" : 21208,
  "totalScheduledMillis" : 85850019,
  "cpuMillis" : 3752896,
  "queuedMillis" : 0,
  "executeMillis" : 10028,
  "getResultMillis" : 0,
  "iterateMillis" : 11201,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 192196930928,
  "query" : "SELECT \n\tCOUNT(*) as total_profile_views, \n   \tSUM(r.sent) as outreaches,\n    SUM(r.resp_pos) as resp_pos,\n    COUNT(js.account_id) as profile_with_linkedIn,\n    ROUND(CAST(SUM(r.sent) AS DOUBLE) * 100 / COUNT(*), 1) as outreach_rate\nFROM \n\tdatalake.imhotep.rsresumeview v\n\nLEFT JOIN\n\tdatalake.imhotep.rscontacts r\nON\n\tv.recruiterAccountId = r.senderAccountId\n    AND v.resumeAccountId = r.recipientAccountId\n    AND r.unixtime BETWEEN IMHOTEP_UNIXTIME('29d') AND IMHOTEP_UNIXTIME('1d')\n\nLEFT JOIN \n\tdatalake.imhotep.js_fact_store_snapshot_prod js\nON\n\tv.resumeAccountId = js.account_id\n\tAND js.resume_links_size > 0\n\tAND CARDINALITY(FILTER(js.resume_links_array, x -> x LIKE '%linkedin%')) > 0\n    AND js.unixtime BETWEEN IMHOTEP_UNIXTIME('29d') AND IMHOTEP_UNIXTIME('1d')\n\nWHERE \n\tv.unixtime BETWEEN IMHOTEP_UNIXTIME('29d') AND IMHOTEP_UNIXTIME('1d')\n--    AND js.account_id IS NOT NULL -- with LinkedIn link\n    AND js.account_id IS NULL -- exclude linkedIn users\n--    AND r.batchSize = 1",
  "queryTables" : [ "datalakehive.imhotep.js_fact_store_snapshot_prod", "datalakehive.imhotep.rscontacts", "datalakehive.imhotep.rsresumeview" ],
  "queryIndex" : 74,
  "runStartToQueryComplete" : 443
}, {
  "elapsedMillis" : 9828,
  "totalScheduledMillis" : 4582463,
  "cpuMillis" : 1945100,
  "queuedMillis" : 1,
  "executeMillis" : 3312,
  "getResultMillis" : 0,
  "iterateMillis" : 6549,
  "rows" : 12,
  "error" : null,
  "scannedBytes" : 80397894274,
  "query" : "with convos as (\nselect\n    ce.advertiserId\n   ,eventId\n   ,ce.encryptedConversationId\n   ,(isImported = '1') as isEmail\nFROM conversationEvents ce\njoin convsConversationCreation cc on  ce.encryptedConversationId = cc.encryptedConversationId \n\nWHERE ce.unixtime BETWEEN IMHOTEP_UNIXTIME('181d') AND IMHOTEP_UNIXTIME('1d')\nand   cc.unixtime BETWEEN IMHOTEP_UNIXTIME('195d') AND IMHOTEP_UNIXTIME('1d')\nand ((ce.unixtime - cc.unixtime) < (60*60*24*14))\nand ce.context='APPLICATION'\nand ce.ownerRole != 'JOBSEEKER'\nGROUP BY 1,2,3,4\n)\n\n\n, agg as (\n\nselect advertiserId\n      ,count(*) as totalMessages\n      ,count_if(isEmail) as emailMessages\n      ,count_if(NOT isEmail) as onPlatformMessages \n  from convos\ngroup by 1 \n\n\t\t)\n        \n,advertiserDetails as ( \n\nselect advertiser_id\n   , max_by(parent_company_size_segment, unixtime) as parent_company_size_segment\n   , max_by(type, unixtime) as type\n   , max_by(billing_country, unixtime) as billing_country\n  from  daily_employer2 \n  where unixtime BETWEEN IMHOTEP_UNIXTIME('2d') and IMHOTEP_UNIXTIME('1d')\ngroup by 1\n\n   )\n        \n\n select \n            advertiserDetails.parent_company_size_segment         \n\t\t   , case when emailMessages> 0 and onPlatformMessages=0 then 'Email Only'\n\t\t\t when  emailMessages=0 and onPlatformMessages>0 then 'Chat Only'\n\t\t\t when  emailMessages>0 and onPlatformMessages>0 then 'Email & Chat'\n             end as usageType\n        ,count(distinct advertiserId) as empCount\n        ,100.0*count(distinct advertiserId)/sum(count(distinct advertiserId)) over(partition by parent_company_size_segment) as pctEmpCountWithinSegment\n\n  from agg\nleft join advertiserDetails on agg.advertiserId=advertiserDetails.advertiser_id\nwhere parent_company_size_segment is not null and parent_company_size_segment!='NULL'\ngroup by 1,2\norder by 1\n        \n\n\n\n\n",
  "queryTables" : [ "skipperhive.imhotep.conversationevents", "skipperhive.imhotep.convsconversationcreation", "skipperhive.imhotep.daily_employer2" ],
  "queryIndex" : 75,
  "runStartToQueryComplete" : 473
}, {
  "elapsedMillis" : 1217,
  "totalScheduledMillis" : 1317,
  "cpuMillis" : 251,
  "queuedMillis" : 1,
  "executeMillis" : 733,
  "getResultMillis" : 0,
  "iterateMillis" : 496,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 4712053,
  "query" : "--Presto exportedVolume matches IQL\nSELECT SUM(exportedVolume) as exportedVolume\nFROM datalake.imhotep.dradisCandidateExportRequest\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('100d') AND IMHOTEP_UNIXTIME('today')\nAND advertiserid = 73440070",
  "queryTables" : [ "datalakehive.imhotep.dradiscandidateexportrequest" ],
  "queryIndex" : 76,
  "runStartToQueryComplete" : 491
}, {
  "elapsedMillis" : 3025,
  "totalScheduledMillis" : 2123688,
  "cpuMillis" : 235662,
  "queuedMillis" : 1,
  "executeMillis" : 1265,
  "getResultMillis" : 0,
  "iterateMillis" : 1773,
  "rows" : 2425,
  "error" : null,
  "scannedBytes" : 10523688028,
  "query" : "WITH daily_data AS (\n    SELECT\n        date_trunc('hour', from_unixtime(lp.unixtime)) as date,\n        appName,\n        moderationApi, \n        moderationType, \n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 1 PRECEDING AND current row) AS block_count,\n\t\tSUM(COUNT(*)) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 1 PRECEDING AND current row) AS request_count,\n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) AS weekly_block_count,\n\t\tSUM(COUNT(*)) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) AS weekly_request_count\n    FROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.flagged IS NOT NULL\n        AND lp.metric = 'moderation-text'\n        AND unixtime BETWEEN imhotep_unixtime(timestamp '2024-10-24') AND imhotep_unixtime(timestamp '2024-10-30')\n        and True\n        -- see rate_change query for filters by appName etc.\n    GROUP BY\n        date_trunc('hour', from_unixtime(lp.unixtime)),\n\t\tappName,         \n        moderationApi, \n        moderationType \n),\nblock_rate AS (\n    SELECT\n        date,\n\t\tappName, \n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        cast(request_count * 6 as double) / cast(1 * weekly_request_count as double) as relative_request_rate,\n        cast(block_count as double) / request_count as raw_block_rate,\n        -- We adjust the proportion estimates by adding z^2/2 successes and z^2/2 failures (z^2 obs total) to the counts.\n        -- This can be thought of as a Bayesian prior, or as a correction to the Normal approximation for rates close to 0 or 1.\n        -- For large values of request_count this converges to the raw proportion (block_rate ~ raw_block_rate).\n        -- Using z=3.0, in other words, we're going to require a \"3-sigma\" detection.\n        cast(block_count + 4.5 as double) / (request_count + 9.0) as block_rate, -- corrected/smoothed\n        cast(block_count as double) / (request_count + 9.0) as block_rate_zc, -- zero-centered corrected/smoothed rate (only adding to denominator)\n        cast(weekly_block_count + (6 * 4.5 / 1) as double) / (weekly_request_count + (6 * 9.0 / 1)) as  weekly_block_rate, -- corrected/smoothed\n        cast(weekly_block_count as double) / (weekly_request_count + (6 * 9.0 / 1)) as  weekly_block_rate_zc, -- corrected/smoothed        \n        cast(weekly_block_count as double) /  weekly_request_count as raw_weekly_block_rate,  \n        (cast(block_count + 4.5 as double) / (request_count + 9.0)) - (cast(weekly_block_count + (6 * 4.5 / 1) as double) / (weekly_request_count + (6 * 9.0 / 1))) as change,\n        sum(1.0) over (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) as previous_dates_count\n    FROM\n        daily_data\n),\n\nblock_rate_change AS (\n    SELECT\n        date,\n\t\tappName,         \n        moderationApi, \n        moderationType,\n        request_count,\n\t\trelative_request_rate,        \n        weekly_request_count,\n        STDDEV(block_rate-weekly_block_rate) OVER (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) AS stddev_obs,\n        SQRT((block_rate * (1.0 - block_rate) / request_count) + ((weekly_block_rate * (1.0 - weekly_block_rate) / weekly_request_count))) as stddev_approx,\n        raw_block_rate,  \n        block_rate,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        raw_weekly_block_rate,  \n        weekly_block_rate, -- corrected/smoothed\n        change,\n        case weekly_block_rate_zc\n           when 0 then 0\n           else (block_rate_zc - weekly_block_rate_zc) \n        end as change_zc,\n\t\tprevious_dates_count        \n    FROM\n        block_rate\n),\nconfidence_interval AS (\n    SELECT\n        date,\n\t\tappName,         \n        moderationApi, \n        moderationType,\n        stddev_obs,\n\t\tstddev_approx,\n        greatest(stddev_approx, stddev_obs) as stddev,\n        block_rate,\n        block_rate - 6 * greatest(stddev_approx, stddev_obs)  AS block_rate_lower_bound,\n        block_rate + 6 * greatest(stddev_approx, stddev_obs) AS block_rate_upper_bound,          \n        weekly_block_rate,\n\t\tweekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,        \n        change,\n        change_zc,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        request_count,\n\t\trelative_request_rate,                \n        change - 6 * greatest(stddev_approx, stddev_obs) AS change_lower_bound,\n        change + 6 * greatest(stddev_approx, stddev_obs) AS change_upper_bound,\n        previous_dates_count,\n        row_number() OVER (partition by moderationApi, moderationType ORDER BY date) as row_n \n    FROM\n        block_rate_change\n    --WHERE\n    --\tweekly_request_count > 100\n    --    and request_count > 100\n)\nSELECT\n    date,\n\tappName,     \n    moderationApi, \n    moderationType,\n    request_count,\n\trelative_request_rate,            \n    stddev_obs,\n    stddev_approx,\n    stddev,\n    block_rate,\n\tblock_rate_lower_bound,\n    block_rate_upper_bound,\n    weekly_block_rate,\n    weekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,    \n    change,\n    change / weekly_block_rate as relative_change,\n    change_zc / weekly_block_rate_zc as relative_change_zc,\n    change_zc,\n    block_rate_zc,\n    weekly_block_rate_zc,\n    \n    change_lower_bound,\n    change_upper_bound,\n    change_lower_bound * 1.0 / weekly_block_rate as relative_change_lower_bound,\n    change_upper_bound * 1.0 / weekly_block_rate as relative_change_upper_bound,\n    greatest(change_lower_bound / weekly_block_rate, 0) as relative_change_lower_bound_sig,\n    least(change_upper_bound / weekly_block_rate, 0) as relative_change_upper_bound_sig,     \n    IF((change_lower_bound > 0 or change_upper_bound<0) and (previous_dates_count > 6), 1, 0) as is_sig_change,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (date = (max(date) over ())) and (previous_dates_count > 6), 1, 0) as is_latest_date_sig_change,\n    change/stddev as z_score,\n    IF(date = (max(date) over ()), change/stddev, NULL) as latest_date_z_score, \n    max(date) over () as latest_data_date,\n    previous_dates_count            \nFROM\n    confidence_interval -- Note: return values for all dates unlike with the alerting query\nWHERE\n    (change/stddev) IS NOT NULL\n    and ((row_n % 1 = 0)  or (abs(change/stddev) > 6))\n    and previous_dates_count > (0.9 * 6)\nORDER BY\n    date DESC, moderationApi ASC, moderationType DESC",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 77,
  "runStartToQueryComplete" : 528
}, {
  "elapsedMillis" : 2785,
  "totalScheduledMillis" : 1660505,
  "cpuMillis" : 201320,
  "queuedMillis" : 1,
  "executeMillis" : 1363,
  "getResultMillis" : 0,
  "iterateMillis" : 1441,
  "rows" : 555,
  "error" : null,
  "scannedBytes" : 10161714189,
  "query" : "WITH daily_data AS (\n    SELECT\n        date_trunc('hour', from_unixtime(lp.unixtime)) as date,\n        moderationApi, \n        moderationType, \n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 1 PRECEDING AND current row) AS block_count,\n\t\tSUM(COUNT(*)) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 1 PRECEDING AND current row) AS request_count,\n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) AS weekly_block_count,\n\t\tSUM(COUNT(*)) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) AS weekly_request_count\n    FROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.flagged IS NOT NULL\n        AND lp.metric = 'moderation-text'\n        AND unixtime BETWEEN imhotep_unixtime(timestamp '2024-10-24') AND imhotep_unixtime(timestamp '2024-10-30')\n        and True\n    GROUP BY\n        date_trunc('hour', from_unixtime(lp.unixtime)),\n        moderationApi, \n        moderationType \n),\nblock_rate AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        cast(request_count * 6 as double) / cast(1 * weekly_request_count as double) as relative_request_rate,\n        cast(block_count as double) / request_count as raw_block_rate,\n        -- We adjust the proportion estimates by adding z^2/2 successes and z^2/2 failures (z^2 obs total) to the counts.\n        -- This can be thought of as a Bayesian prior, or as a correction to the Normal approximation for rates close to 0 or 1.\n        -- For large values of request_count this converges to the raw proportion (block_rate ~ raw_block_rate).\n        -- Using z=3.0, in other words, we're going to require a \"3-sigma\" detection.\n        cast(block_count + 4.5 as double) / (request_count + 9.0) as block_rate, -- corrected/smoothed\n        cast(block_count as double) / (request_count + 9.0) as block_rate_zc, -- zero-centered corrected/smoothed rate (only adding to denominator)\n        cast(weekly_block_count + (6 * 4.5 / 1) as double) / (weekly_request_count + (6 * 9.0 / 1)) as  weekly_block_rate, -- corrected/smoothed\n        cast(weekly_block_count as double) / (weekly_request_count + (6 * 9.0 / 1)) as  weekly_block_rate_zc, -- corrected/smoothed        \n        cast(weekly_block_count as double) /  weekly_request_count as raw_weekly_block_rate,  \n        (cast(block_count + 4.5 as double) / (request_count + 9.0)) - (cast(weekly_block_count + (6 * 4.5 / 1) as double) / (weekly_request_count + (6 * 9.0 / 1))) as change,\n        sum(1.0) over (partition by moderationApi, moderationType ORDER BY date ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) as previous_dates_count\n    FROM\n        daily_data\n),\n\nblock_rate_change AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        request_count,\n\t\trelative_request_rate,        \n        weekly_request_count,\n        STDDEV(block_rate-weekly_block_rate) OVER (partition by moderationApi, moderationType ORDER BY date ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) AS stddev_obs,\n        SQRT((block_rate * (1.0 - block_rate) / request_count) + ((weekly_block_rate * (1.0 - weekly_block_rate) / weekly_request_count))) as stddev_approx,\n        raw_block_rate,  \n        block_rate,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        raw_weekly_block_rate,  \n        weekly_block_rate, -- corrected/smoothed\n        change,\n        case weekly_block_rate_zc\n           when 0 then 0\n           else (block_rate_zc - weekly_block_rate_zc) \n        end as change_zc,\n\t\tprevious_dates_count             \n    FROM\n        block_rate\n),\nconfidence_interval AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        stddev_obs,\n\t\tstddev_approx,\n        greatest(stddev_approx, stddev_obs) as stddev,\n        block_rate,\n        block_rate - 6 * greatest(stddev_approx, stddev_obs)  AS block_rate_lower_bound,\n        block_rate + 6 * greatest(stddev_approx, stddev_obs) AS block_rate_upper_bound,          \n        weekly_block_rate,\n\t\tweekly_request_count,\n\t\traw_block_rate,        \n        raw_weekly_block_rate,        \n        change,\n        change_zc,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        request_count,\n\t\trelative_request_rate,                \n        change - 6 * greatest(stddev_approx, stddev_obs) AS change_lower_bound,\n        change + 6 * greatest(stddev_approx, stddev_obs) AS change_upper_bound,\n        previous_dates_count,\n        row_number() OVER (partition by moderationApi, moderationType ORDER BY date) as row_n         \n    FROM\n        block_rate_change\n    --WHERE\n    --\tweekly_request_count > 100\n    --    and request_count > 100\n)\nSELECT\n    date,\n    moderationApi, \n    moderationType,\n    request_count,\n\trelative_request_rate,            \n    stddev_obs,\n    stddev_approx,\n    stddev,\n    block_rate,\n\tblock_rate_lower_bound,\n    block_rate_upper_bound,\n    weekly_block_rate,\n    weekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,    \nchange,\n    change / weekly_block_rate as relative_change,\n    change_zc / weekly_block_rate_zc as relative_change_zc,\n    change_zc,\n    block_rate_zc,\n    weekly_block_rate_zc,        \n    change_lower_bound,\n    change_upper_bound,\n    change_lower_bound * 1.0 / weekly_block_rate as relative_change_lower_bound,\n    change_upper_bound * 1.0 / weekly_block_rate as relative_change_upper_bound,\n    greatest(change_lower_bound / weekly_block_rate, 0) as relative_change_lower_bound_sig,\n    least(change_upper_bound / weekly_block_rate, 0) as relative_change_upper_bound_sig,     \n    IF((change_lower_bound > 0 or change_upper_bound<0) and (previous_dates_count > 6), 1, 0) as is_sig_change,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (date = (max(date) over ())) and (previous_dates_count > 6), 1, 0) as is_latest_date_sig_change,\n    change/stddev as z_score,\n    IF(date = (max(date) over ()), change/stddev, NULL) as latest_date_z_score, \n    max(date) over () as latest_data_date,\n    previous_dates_count            \nFROM\n    confidence_interval -- Note: return values for all dates unlike with the alerting query\nWHERE\n    (change/stddev) IS NOT NULL\n    and ((row_n % 1 = 0)  or (abs(change/stddev) > 6))\n    and previous_dates_count > (0.9 * 6)\nORDER BY\n    date DESC, moderationApi ASC, moderationType DESC",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 78,
  "runStartToQueryComplete" : 528
}, {
  "elapsedMillis" : 7832,
  "totalScheduledMillis" : 3344150,
  "cpuMillis" : 1749289,
  "queuedMillis" : 1,
  "executeMillis" : 2358,
  "getResultMillis" : 0,
  "iterateMillis" : 5530,
  "rows" : 3,
  "error" : null,
  "scannedBytes" : 79767842751,
  "query" : "with convos as (\nselect\n    ce.advertiserId\n   ,eventId\n   ,ce.encryptedConversationId\n   ,(isImported = '1') as isEmail\nFROM conversationEvents ce\njoin convsConversationCreation cc on  ce.encryptedConversationId = cc.encryptedConversationId \n\nWHERE ce.unixtime BETWEEN IMHOTEP_UNIXTIME('181d') AND IMHOTEP_UNIXTIME('1d')\nand   cc.unixtime BETWEEN IMHOTEP_UNIXTIME('195d') AND IMHOTEP_UNIXTIME('1d')\nand ((ce.unixtime - cc.unixtime) < (60*60*24*14))\nand ce.context='APPLICATION'\nand ce.ownerRole != 'JOBSEEKER'\nGROUP BY 1,2,3,4\n)\n\n\n, agg as (\n\nselect advertiserId\n      ,count(*) as totalMessages\n      ,count_if(isEmail) as emailMessages\n      ,count_if(NOT isEmail) as onPlatformMessages \n  from convos\ngroup by 1 \n\n\t\t)\n\n select case when emailMessages> 0 and onPlatformMessages=0 then 'Email Only'\n\t\t\t when  emailMessages=0 and onPlatformMessages>0 then 'Chat Only'\n\t\t\t when  emailMessages>0 and onPlatformMessages>0 then 'Email & Chat'\n             end as usageType\n        ,count(distinct advertiserId) as empCount\n        ,100.0*count(distinct advertiserId)/sum(count(distinct advertiserId)) over() as pctEmpCount\n\n  from agg\ngroup by 1 \n\n\n\n\n",
  "queryTables" : [ "skipperhive.imhotep.conversationevents", "skipperhive.imhotep.convsconversationcreation" ],
  "queryIndex" : 79,
  "runStartToQueryComplete" : 540
}, {
  "elapsedMillis" : 1525,
  "totalScheduledMillis" : 476,
  "cpuMillis" : 93,
  "queuedMillis" : 0,
  "executeMillis" : 863,
  "getResultMillis" : 0,
  "iterateMillis" : 675,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 15157758,
  "query" : "SELECT *\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 80,
  "runStartToQueryComplete" : 584
}, {
  "elapsedMillis" : 1200,
  "totalScheduledMillis" : 307,
  "cpuMillis" : 110,
  "queuedMillis" : 0,
  "executeMillis" : 765,
  "getResultMillis" : 0,
  "iterateMillis" : 447,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 15157758,
  "query" : "SELECT *\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 81,
  "runStartToQueryComplete" : 585
}, {
  "elapsedMillis" : 2031,
  "totalScheduledMillis" : 1092387,
  "cpuMillis" : 161069,
  "queuedMillis" : 1,
  "executeMillis" : 1022,
  "getResultMillis" : 0,
  "iterateMillis" : 1022,
  "rows" : 1121,
  "error" : null,
  "scannedBytes" : 8487293851,
  "query" : "WITH daily_data AS (\n    SELECT\n        date_trunc('minute', from_unixtime(lp.unixtime)) as date,\n        moderationApi, \n        moderationType, \n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 30 PRECEDING AND current row) AS block_count,\n\t\tSUM(COUNT(*)) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 30 PRECEDING AND current row) AS request_count,\n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS weekly_block_count,\n\t\tSUM(COUNT(*)) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS weekly_request_count\n    FROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.flagged IS NOT NULL\n        AND lp.metric = 'moderation-text'\n        AND unixtime BETWEEN imhotep_unixtime(timestamp '2024-10-24') AND imhotep_unixtime(timestamp '2024-10-29')\n        and moderationApi='openAIModerations'\n    GROUP BY\n        date_trunc('minute', from_unixtime(lp.unixtime)),\n        moderationApi, \n        moderationType \n),\nblock_rate AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        cast(request_count * 240 as double) / cast(30 * weekly_request_count as double) as relative_request_rate,\n        cast(block_count as double) / request_count as raw_block_rate,\n        -- We adjust the proportion estimates by adding z^2/2 successes and z^2/2 failures (z^2 obs total) to the counts.\n        -- This can be thought of as a Bayesian prior, or as a correction to the Normal approximation for rates close to 0 or 1.\n        -- For large values of request_count this converges to the raw proportion (block_rate ~ raw_block_rate).\n        -- Using z=3.0, in other words, we're going to require a \"3-sigma\" detection.\n        cast(block_count + 4.5 as double) / (request_count + 9.0) as block_rate, -- corrected/smoothed\n        cast(block_count as double) / (request_count + 9.0) as block_rate_zc, -- zero-centered corrected/smoothed rate (only adding to denominator)\n        cast(weekly_block_count + (240 * 4.5 / 30) as double) / (weekly_request_count + (240 * 9.0 / 30)) as  weekly_block_rate, -- corrected/smoothed\n        cast(weekly_block_count as double) / (weekly_request_count + (240 * 9.0 / 30)) as  weekly_block_rate_zc, -- corrected/smoothed        \n        cast(weekly_block_count as double) /  weekly_request_count as raw_weekly_block_rate,  \n        (cast(block_count + 4.5 as double) / (request_count + 9.0)) - (cast(weekly_block_count + (240 * 4.5 / 30) as double) / (weekly_request_count + (240 * 9.0 / 30))) as change,\n        sum(1.0) over (partition by moderationApi, moderationType ORDER BY date ROWS BETWEEN 240 + 30 PRECEDING AND 1 PRECEDING) as previous_dates_count\n    FROM\n        daily_data\n),\n\nblock_rate_change AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        request_count,\n\t\trelative_request_rate,        \n        weekly_request_count,\n        STDDEV(block_rate-weekly_block_rate) OVER (partition by moderationApi, moderationType ORDER BY date ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS stddev_obs,\n        SQRT((block_rate * (1.0 - block_rate) / request_count) + ((weekly_block_rate * (1.0 - weekly_block_rate) / weekly_request_count))) as stddev_approx,\n        raw_block_rate,  \n        block_rate,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        raw_weekly_block_rate,  \n        weekly_block_rate, -- corrected/smoothed\n        change,\n        case weekly_block_rate_zc\n           when 0 then 0\n           else (block_rate_zc - weekly_block_rate_zc) \n        end as change_zc,\n\t\tprevious_dates_count             \n    FROM\n        block_rate\n),\nconfidence_interval AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        stddev_obs,\n\t\tstddev_approx,\n        greatest(stddev_approx, stddev_obs) as stddev,\n        block_rate,\n        block_rate - 6 * greatest(stddev_approx, stddev_obs)  AS block_rate_lower_bound,\n        block_rate + 6 * greatest(stddev_approx, stddev_obs) AS block_rate_upper_bound,          \n        weekly_block_rate,\n\t\tweekly_request_count,\n\t\traw_block_rate,        \n        raw_weekly_block_rate,        \n        change,\n        change_zc,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        request_count,\n\t\trelative_request_rate,                \n        change - 6 * greatest(stddev_approx, stddev_obs) AS change_lower_bound,\n        change + 6 * greatest(stddev_approx, stddev_obs) AS change_upper_bound,\n        previous_dates_count,\n        row_number() OVER (partition by moderationApi, moderationType ORDER BY date) as row_n         \n    FROM\n        block_rate_change\n    --WHERE\n    --\tweekly_request_count > 100\n    --    and request_count > 100\n)\nSELECT\n    date,\n    moderationApi, \n    moderationType,\n    request_count,\n\trelative_request_rate,            \n    stddev_obs,\n    stddev_approx,\n    stddev,\n    block_rate,\n\tblock_rate_lower_bound,\n    block_rate_upper_bound,\n    weekly_block_rate,\n    weekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,    \nchange,\n    change / weekly_block_rate as relative_change,\n    change_zc / weekly_block_rate_zc as relative_change_zc,\n    change_zc,\n    block_rate_zc,\n    weekly_block_rate_zc,        \n    change_lower_bound,\n    change_upper_bound,\n    change_lower_bound * 1.0 / weekly_block_rate as relative_change_lower_bound,\n    change_upper_bound * 1.0 / weekly_block_rate as relative_change_upper_bound,\n    greatest(change_lower_bound / weekly_block_rate, 0) as relative_change_lower_bound_sig,\n    least(change_upper_bound / weekly_block_rate, 0) as relative_change_upper_bound_sig,     \n    IF((change_lower_bound > 0 or change_upper_bound<0) and (previous_dates_count > 240), 1, 0) as is_sig_change,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (date = (max(date) over ())) and (previous_dates_count > 6), 1, 0) as is_latest_date_sig_change,\n    change/stddev as z_score,\n    IF(date = (max(date) over ()), change/stddev, NULL) as latest_date_z_score, \n    max(date) over () as latest_data_date,\n    previous_dates_count            \nFROM\n    confidence_interval -- Note: return values for all dates unlike with the alerting query\nWHERE\n    (change/stddev) IS NOT NULL\n    and ((row_n % 15 = 0)  or (abs(change/stddev) > 6))\n    and previous_dates_count > (0.9 * 240)\nORDER BY\n    date DESC, moderationApi ASC, moderationType DESC",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 82,
  "runStartToQueryComplete" : 591
}, {
  "elapsedMillis" : 2106,
  "totalScheduledMillis" : 1101696,
  "cpuMillis" : 163716,
  "queuedMillis" : 1,
  "executeMillis" : 1018,
  "getResultMillis" : 0,
  "iterateMillis" : 1183,
  "rows" : 2840,
  "error" : null,
  "scannedBytes" : 8788694387,
  "query" : "WITH daily_data AS (\n    SELECT\n        date_trunc('minute', from_unixtime(lp.unixtime)) as date,\n        appName,\n        moderationApi, \n        moderationType, \n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 30 PRECEDING AND current row) AS block_count,\n\t\tSUM(COUNT(*)) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 30 PRECEDING AND current row) AS request_count,\n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS weekly_block_count,\n\t\tSUM(COUNT(*)) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS weekly_request_count\n    FROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.flagged IS NOT NULL\n        AND lp.metric = 'moderation-text'\n        AND unixtime BETWEEN imhotep_unixtime(timestamp '2024-10-24') AND imhotep_unixtime(timestamp '2024-10-29')\n        and moderationApi='openAIModerations'\n        -- see rate_change query for filters by appName etc.\n    GROUP BY\n        date_trunc('minute', from_unixtime(lp.unixtime)),\n\t\tappName,         \n        moderationApi, \n        moderationType \n),\nblock_rate AS (\n    SELECT\n        date,\n\t\tappName, \n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        cast(request_count * 240 as double) / cast(30 * weekly_request_count as double) as relative_request_rate,\n        cast(block_count as double) / request_count as raw_block_rate,\n        -- We adjust the proportion estimates by adding z^2/2 successes and z^2/2 failures (z^2 obs total) to the counts.\n        -- This can be thought of as a Bayesian prior, or as a correction to the Normal approximation for rates close to 0 or 1.\n        -- For large values of request_count this converges to the raw proportion (block_rate ~ raw_block_rate).\n        -- Using z=3.0, in other words, we're going to require a \"3-sigma\" detection.\n        cast(block_count + 4.5 as double) / (request_count + 9.0) as block_rate, -- corrected/smoothed\n        cast(block_count as double) / (request_count + 9.0) as block_rate_zc, -- zero-centered corrected/smoothed rate (only adding to denominator)\n        cast(weekly_block_count + (240 * 4.5 / 30) as double) / (weekly_request_count + (240 * 9.0 / 30)) as  weekly_block_rate, -- corrected/smoothed\n        cast(weekly_block_count as double) / (weekly_request_count + (240 * 9.0 / 30)) as  weekly_block_rate_zc, -- corrected/smoothed        \n        cast(weekly_block_count as double) /  weekly_request_count as raw_weekly_block_rate,  \n        (cast(block_count + 4.5 as double) / (request_count + 9.0)) - (cast(weekly_block_count + (240 * 4.5 / 30) as double) / (weekly_request_count + (240 * 9.0 / 30))) as change,\n        sum(1.0) over (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 240 + 30 PRECEDING AND 1 PRECEDING) as previous_dates_count\n    FROM\n        daily_data\n),\n\nblock_rate_change AS (\n    SELECT\n        date,\n\t\tappName,         \n        moderationApi, \n        moderationType,\n        request_count,\n\t\trelative_request_rate,        \n        weekly_request_count,\n        STDDEV(block_rate-weekly_block_rate) OVER (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS stddev_obs,\n        SQRT((block_rate * (1.0 - block_rate) / request_count) + ((weekly_block_rate * (1.0 - weekly_block_rate) / weekly_request_count))) as stddev_approx,\n        raw_block_rate,  \n        block_rate,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        raw_weekly_block_rate,  \n        weekly_block_rate, -- corrected/smoothed\n        change,\n        case weekly_block_rate_zc\n           when 0 then 0\n           else (block_rate_zc - weekly_block_rate_zc) \n        end as change_zc,\n\t\tprevious_dates_count        \n    FROM\n        block_rate\n),\nconfidence_interval AS (\n    SELECT\n        date,\n\t\tappName,         \n        moderationApi, \n        moderationType,\n        stddev_obs,\n\t\tstddev_approx,\n        greatest(stddev_approx, stddev_obs) as stddev,\n        block_rate,\n        block_rate - 6 * greatest(stddev_approx, stddev_obs)  AS block_rate_lower_bound,\n        block_rate + 6 * greatest(stddev_approx, stddev_obs) AS block_rate_upper_bound,          \n        weekly_block_rate,\n\t\tweekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,        \n        change,\n        change_zc,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        request_count,\n\t\trelative_request_rate,                \n        change - 6 * greatest(stddev_approx, stddev_obs) AS change_lower_bound,\n        change + 6 * greatest(stddev_approx, stddev_obs) AS change_upper_bound,\n        previous_dates_count,\n        row_number() OVER (partition by moderationApi, moderationType ORDER BY date) as row_n \n    FROM\n        block_rate_change\n    --WHERE\n    --\tweekly_request_count > 100\n    --    and request_count > 100\n)\nSELECT\n    date,\n\tappName,     \n    moderationApi, \n    moderationType,\n    request_count,\n\trelative_request_rate,            \n    stddev_obs,\n    stddev_approx,\n    stddev,\n    block_rate,\n\tblock_rate_lower_bound,\n    block_rate_upper_bound,\n    weekly_block_rate,\n    weekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,    \n    change,\n    change / weekly_block_rate as relative_change,\n    change_zc / weekly_block_rate_zc as relative_change_zc,\n    change_zc,\n    block_rate_zc,\n    weekly_block_rate_zc,\n    \n    change_lower_bound,\n    change_upper_bound,\n    change_lower_bound * 1.0 / weekly_block_rate as relative_change_lower_bound,\n    change_upper_bound * 1.0 / weekly_block_rate as relative_change_upper_bound,\n    greatest(change_lower_bound / weekly_block_rate, 0) as relative_change_lower_bound_sig,\n    least(change_upper_bound / weekly_block_rate, 0) as relative_change_upper_bound_sig,     \n    IF((change_lower_bound > 0 or change_upper_bound<0) and (previous_dates_count > 240), 1, 0) as is_sig_change,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (date = (max(date) over ())) and (previous_dates_count > 6), 1, 0) as is_latest_date_sig_change,\n    change/stddev as z_score,\n    IF(date = (max(date) over ()), change/stddev, NULL) as latest_date_z_score, \n    max(date) over () as latest_data_date,\n    previous_dates_count            \nFROM\n    confidence_interval -- Note: return values for all dates unlike with the alerting query\nWHERE\n    (change/stddev) IS NOT NULL\n    and ((row_n % 15 = 0)  or (abs(change/stddev) > 6))\n    and previous_dates_count > (0.9 * 240)\nORDER BY\n    date DESC, moderationApi ASC, moderationType DESC",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 83,
  "runStartToQueryComplete" : 593
}, {
  "elapsedMillis" : 208408,
  "totalScheduledMillis" : 149224719,
  "cpuMillis" : 32618589,
  "queuedMillis" : 1,
  "executeMillis" : 10491,
  "getResultMillis" : 0,
  "iterateMillis" : 197976,
  "rows" : 2,
  "error" : null,
  "scannedBytes" : 572251750347,
  "query" : "WITH advids AS (\n    -- get all advertisers in our test and control groups\n    SELECT de2.advertiser_id\n    FROM datalake.imhotep.daily_employer2 de2\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('3d') AND IMHOTEP_UNIXTIME('2d')\n        AND de2.billing_country = 'GB'\n        AND de2.type != 'Test'\n)\n\n, jobs_raw AS (\n\t-- get all of the live jobs for our advertisers\n\tSELECT CASE WHEN CARDINALITY(FILTER(ratgs_lite, x -> x LIKE '%freevalue_so_job_copies_gb1'))>0\n             THEN 'Test' ELSE 'Control' END as experiment_group\n\t     , advertiser_id\n\t     , job_hash\n\t     , job_city\n\t     , job_state as job_admin_1_code\n\t     , (is_job_searchable+impressions+clicks+apply_starts)>0 as is_live\n\t     , unixtime\n    FROM datalake.imhotep.jobactivitymetrics as jam\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-09-23') AND IMHOTEP_UNIXTIME('today')\n        AND job_country_code='GB'\n        AND job_city IS NOT NULL\n        AND job_state IS NOT NULL\n        AND CARDINALITY(FILTER(ratgs_lite, x -> x LIKE '%B%:freevalue_so_job_copies_gb%'))>0\n)\n\n, jobs_raw_w_dj2 AS (\n    -- reduce to only jobs that were created or updated during the test window\n    SELECT jam.experiment_group\n\t     , jam.advertiser_id\n\t     , jam.job_hash\n\t     , jam.job_city\n\t     , jam.job_admin_1_code\n\t     , jam.is_live\n\t     , jam.unixtime\n    FROM jobs_raw jam\n    JOIN  datalake.imhotep.dradis_job2 as dj2 ON (dj2.job_hash_underscore = jam.job_hash)\n    WHERE dj2.unixtime BETWEEN IMHOTEP_UNIXTIME('2024-09-23') AND IMHOTEP_UNIXTIME('today')\n        AND (dj2.date_created>=20240923\n            OR (previous_status IN ('PAUSED','DELETED') AND status='ACTIVE'))\n)\n\n, ordered_jobs AS (\n    SELECT experiment_group\n\t     , advertiser_id\n\t     , job_hash\n         , job_city\n\t     , job_admin_1_code\n         , unixtime\n\t     , is_live\n\t     , LAG(is_live) OVER (PARTITION BY job_hash, experiment_group ORDER BY unixtime) AS prev_is_live\n\t     , LAG(unixtime) OVER (PARTITION BY job_hash, experiment_group ORDER BY unixtime) AS prev_unixtime\n    FROM jobs_raw_w_dj2\n)\n\n, jobs_w_live_periods AS (\n    SELECT experiment_group\n\t     , advertiser_id\n\t     , job_hash\n         , job_city\n\t     , job_admin_1_code\n         , unixtime as live_start_date\n         , LEAD(unixtime, 1, TO_UNIXTIME(CURRENT_DATE)) OVER (PARTITION BY job_hash, experiment_group ORDER BY unixtime) AS live_end_date\n    FROM ordered_jobs\n    WHERE is_live = true\n        AND (prev_is_live IS NULL OR prev_is_live = false)\n)\n\n, jobs_w_live_periods_copy_attrs AS (\n    -- get the fields we need for copy comparison\n    SELECT experiment_group\n         , jca.advertiser_id\n         , job_hash\n         , job_on_indeed_unixtime\n         , jca.job_city\n         , jca.job_admin_1_code\n         , job_type_id\n         , job_normalized_title_sim_hash\n         , job_description_sim_hash\n         , taxo_occupations_most_specific_suid\n         , job_occupations\n         , jwlp.live_start_date\n         , jwlp.live_end_date\n    FROM jobs_w_live_periods jwlp\n    JOIN datalake.imhotep.job_copy_attributes as jca USING (job_hash)\n    WHERE jca.unixtime BETWEEN IMHOTEP_UNIXTIME('2024-09-23') AND IMHOTEP_UNIXTIME('today')\n    AND jca.job_admin_1_code IS NOT NULL\n    AND jca.job_city IS NOT NULL\n)\n\n, live_jobs_w_copy_pair AS (\n    SELECT orig.experiment_group\n        , orig.advertiser_id as advertiser_id\n        , orig.job_hash as job_hash\n        , copy.job_hash as copy_job_hash\n        , orig.job_city\n        , orig.job_admin_1_code\n        , orig.live_start_date as orig_live_start_date\n        , orig.live_end_date as orig_live_end_date\n        , copy.live_start_date as copy_live_start_date\n        , copy.live_end_date as copy_live_end_date\n        , GREATEST(orig.live_start_date, copy.live_start_date) AS overlap_start\n        , LEAST(orig.live_end_date, copy.live_end_date) AS overlap_end\n        , orig.live_start_date <= copy.live_end_date AND copy.live_start_date <= orig.live_end_date as has_overlap -- original and copy were live at the same time\n         -- split the 128-bit simhash into two 64-bit representations\n        , cast( from_big_endian_64(lpad(substr(from_base64(orig.job_description_sim_hash), 1, 8), 8, from_base64('AAAAAAAAAAA='))) as bigint) as orig_high\n        , cast( from_big_endian_64(lpad(substr(from_base64(orig.job_description_sim_hash), 9, 8), 8, from_base64('AAAAAAAAAAA='))) as bigint) as orig_low\n        , cast( from_big_endian_64(lpad(substr(from_base64(copy.job_description_sim_hash), 1, 8), 8, from_base64('AAAAAAAAAAA='))) as bigint) as copy_high\n        , cast( from_big_endian_64(lpad(substr(from_base64(copy.job_description_sim_hash), 9, 8), 8, from_base64('AAAAAAAAAAA='))) as bigint) as copy_low\n    FROM jobs_w_live_periods_copy_attrs orig\n    LEFT JOIN jobs_w_live_periods_copy_attrs copy ON (\n        orig.experiment_group = copy.experiment_group\n        AND orig.advertiser_id = copy.advertiser_id\n        AND orig.job_city = copy.job_city\n        AND orig.job_admin_1_code = copy.job_admin_1_code\n        AND orig.job_hash != copy.job_hash\n        AND orig.job_on_indeed_unixtime < copy.job_on_indeed_unixtime -- original must be created before the copy\n\n        AND bitwise_or(orig.job_type_id, copy.job_type_id) > 0 -- job_type_id any match\n\n        -- compare normalized titles when they are both not null. otherwise, ignore them\n        AND CASE WHEN orig.job_normalized_title_sim_hash IS NOT NULL AND copy.job_normalized_title_sim_hash IS NOT NULL THEN orig.job_normalized_title_sim_hash = copy.job_normalized_title_sim_hash ELSE TRUE END\n\n        -- compare occupation when they are both not null. otherwise, ignore them\n        AND CASE WHEN orig.taxo_occupations_most_specific_suid IS NOT NULL AND CARDINALITY(copy.job_occupations) > 0 THEN CONTAINS(copy.job_occupations, orig.taxo_occupations_most_specific_suid) ELSE TRUE END\n        )\n)\n\n, live_jobs_final AS (\n    SELECT *\n         -- the right job is a copy if we have a copy_job_hash defined and the description hamming distance is <= 7\n         , copy_job_hash IS NOT NULL AND bit_count(bitwise_xor(orig_high, copy_high), 64) + bit_count(bitwise_xor(orig_low, copy_low), 64) <= 7 as has_copy\n        , (overlap_end - overlap_start) / 86400 as overlap_days\n        , (orig_live_end_date - orig_live_start_date) / 86400 as orig_days_live\n        , (copy_live_end_date - copy_live_start_date) / 86400 as copy_days_live\n    FROM live_jobs_w_copy_pair\n)\n\n\nSELECT experiment_group\n     , COUNT(DISTINCT advertiser_id) as advertisers\n     , COUNT(DISTINCT job_hash) as all_live_jobs\n     , COUNT(DISTINCT CASE WHEN has_copy THEN copy_job_hash END) as live_copies\n     , COUNT(DISTINCT CASE WHEN has_copy AND has_overlap THEN copy_job_hash END) as live_copies_w_overlap -- there was a point when original and copy were both live at the same imt\n     , COUNT(DISTINCT CASE WHEN has_copy AND has_overlap = FALSE THEN copy_job_hash END) as live_copies_no_overlap -- there was a point when original and copy were not live at the same time\n     , AVG(CASE WHEN has_copy AND has_overlap THEN overlap_days ELSE NULL END) as avg_days_overlap\n     , AVG(CASE WHEN has_copy THEN orig_days_live ELSE NULL END) as orig_avg_days_live\n     , AVG(CASE WHEN has_copy THEN copy_days_live ELSE NULL END) as copy_avg_days_live\n     -- subtract the count of copy jobs from all jobs to get the total unique jobs live\n     , COUNT(DISTINCT job_hash) - COUNT(DISTINCT CASE WHEN has_copy THEN copy_job_hash END) as unique_live_jobs\nFROM live_jobs_final\nGROUP BY 1\nORDER BY 1 ASC",
  "queryTables" : [ "datalakehive.imhotep.dradis_job2", "datalakehive.imhotep.dradis_job2", "datalakehive.imhotep.job_copy_attributes", "datalakehive.imhotep.job_copy_attributes", "datalakehive.imhotep.jobactivitymetrics", "datalakehive.imhotep.jobactivitymetrics" ],
  "queryIndex" : 84,
  "runStartToQueryComplete" : 799
}, {
  "elapsedMillis" : 1597,
  "totalScheduledMillis" : 2432,
  "cpuMillis" : 486,
  "queuedMillis" : 1,
  "executeMillis" : 1296,
  "getResultMillis" : 0,
  "iterateMillis" : 316,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 5535479,
  "query" : "--Presto exportedVolume matches IQL\nSELECT yyyymmdd, hhmm, SUM(exportedVolume) as exportedVolume\nFROM datalake.imhotep.dradisCandidateExportRequest\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('100d') AND IMHOTEP_UNIXTIME('today')\nAND advertiserid = 73440070\nGROUP BY yyyymmdd, hhmm\nORDER BY yyyymmdd, hhmm",
  "queryTables" : [ "datalakehive.imhotep.dradiscandidateexportrequest" ],
  "queryIndex" : 85,
  "runStartToQueryComplete" : 596
}, {
  "elapsedMillis" : 2692,
  "totalScheduledMillis" : 7568,
  "cpuMillis" : 1333,
  "queuedMillis" : 0,
  "executeMillis" : 926,
  "getResultMillis" : 0,
  "iterateMillis" : 1789,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 13212025,
  "query" : "WITH cte_1 as (\n\tSELECT \n    advertiserid,\n    COUNT(DISTINCT(id)) as unique_id_count\n    \nFROM \n\tdatalake.imhotep.dradisCandidateExportRequest\n\tCROSS JOIN UNNEST(split(candidateIds, ',')) AS t(id)\n    \nWHERE \n\tunixtime BETWEEN IMHOTEP_UNIXTIME('100d') AND IMHOTEP_UNIXTIME('today')\n\tAND advertiserid = 73440070\n    \nGROUP BY \n\tadvertiserid\n), \n\ncte_2 as (\nSELECT \n\tadvertiserid,\n    SUM(exportedVolume) as exportVolume\n    \nFROM \n\tdatalake.imhotep.dradisCandidateExportRequest\n    \nWHERE \n\tunixtime BETWEEN IMHOTEP_UNIXTIME('2024-07-01') AND IMHOTEP_UNIXTIME('today')\n\tAND advertiserid = 73440070\n    \nGROUP BY \n\tadvertiserid\n)\n\nSELECT\t\n\tcte_1.advertiserid,\n    unique_id_count,\n    exportVolume\n    \nFROM \n\tcte_1 INNER JOIN cte_2 ON cte_1.advertiserid = cte_2.advertiserid\n",
  "queryTables" : [ "datalakehive.imhotep.dradiscandidateexportrequest", "datalakehive.imhotep.dradiscandidateexportrequest" ],
  "queryIndex" : 86,
  "runStartToQueryComplete" : 604
}, {
  "elapsedMillis" : 2989,
  "totalScheduledMillis" : 32651,
  "cpuMillis" : 2934,
  "queuedMillis" : 0,
  "executeMillis" : 912,
  "getResultMillis" : 0,
  "iterateMillis" : 2104,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 9626188,
  "query" : "WITH cte_1 as (\n\tSELECT \n    advertiserid,\n\tyyyymmdd, \n    hhmm, \n    COUNT(DISTINCT(id)) as unique_id_count\n    \nFROM \n\tdatalake.imhotep.dradisCandidateExportRequest\n\tCROSS JOIN UNNEST(split(candidateIds, ',')) AS t(id)\n    \nWHERE \n\tunixtime BETWEEN IMHOTEP_UNIXTIME('100d') AND IMHOTEP_UNIXTIME('today')\n\tAND advertiserid = 73440070\n    \nGROUP BY \n\tadvertiserid, yyyymmdd, hhmm \n    \nORDER BY \n\tyyyymmdd, hhmm\n), \n\ncte_2 as (\nSELECT \n\tadvertiserid,\n\tyyyymmdd, \n    hhmm, \n    SUM(exportedVolume) as exportVolume\n    \nFROM \n\tdatalake.imhotep.dradisCandidateExportRequest\n    \nWHERE \n\tunixtime BETWEEN IMHOTEP_UNIXTIME('100d') AND IMHOTEP_UNIXTIME('today')\n\tAND advertiserid = 73440070\n    \nGROUP BY \n\tadvertiserid, yyyymmdd, hhmm \n    \nORDER BY \n\tyyyymmdd, hhmm\n)\n\nSELECT\t\n\tcte_1.advertiserid,\n\tcte_1.yyyymmdd, \n    cte_1.hhmm, \n    unique_id_count,\n    exportVolume\n    \nFROM \n\tcte_1 INNER JOIN cte_2 ON cte_1.advertiserid = cte_2.advertiserid\n    \tAND cte_1.yyyymmdd = cte_2.yyyymmdd\n\t\tAND cte_1.hhmm = cte_2.hhmm\n\nORDER BY \n\tyyyymmdd, hhmm",
  "queryTables" : [ "datalakehive.imhotep.dradiscandidateexportrequest", "datalakehive.imhotep.dradiscandidateexportrequest" ],
  "queryIndex" : 87,
  "runStartToQueryComplete" : 605
}, {
  "elapsedMillis" : 2924,
  "totalScheduledMillis" : 189924,
  "cpuMillis" : 38007,
  "queuedMillis" : 0,
  "executeMillis" : 1240,
  "getResultMillis" : 0,
  "iterateMillis" : 1702,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 252134934,
  "query" : "select count(1) from clickanalytics where unixtime between imhotep_unixtime('2019-03-01') and imhotep_unixtime('2019-03-02')",
  "queryTables" : [ "skipperhive.imhotep.clickanalytics" ],
  "queryIndex" : 88,
  "runStartToQueryComplete" : 606
}, {
  "elapsedMillis" : 2891,
  "totalScheduledMillis" : 4272,
  "cpuMillis" : 917,
  "queuedMillis" : 0,
  "executeMillis" : 791,
  "getResultMillis" : 0,
  "iterateMillis" : 2121,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 4090709,
  "query" : "--Presto exportedVolume matches IQL\nSELECT \n\tyyyymmdd, \n    hhmm, \n    candidateIds, \n    COUNT(DISTINCT(id)) as id_count\n    \nFROM \n\tdatalake.imhotep.dradisCandidateExportRequest\n\tCROSS JOIN UNNEST(split(candidateIds, ',')) AS t(id)\n    \nWHERE \n\tunixtime BETWEEN IMHOTEP_UNIXTIME('100d') AND IMHOTEP_UNIXTIME('today')\n\tAND advertiserid = 73440070\n    \nGROUP BY \n\tyyyymmdd, hhmm, candidateIds \n    \nORDER BY \n\tyyyymmdd, hhmm\n    \nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.dradiscandidateexportrequest" ],
  "queryIndex" : 89,
  "runStartToQueryComplete" : 606
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 763,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_173210_00112_vjepj): Division by zero",
  "scannedBytes" : 0,
  "query" : "SELECT count(DISTINCT(campaignId)) as distinct_count, COUNT() as total_count, COUNT()/count(DISTINCT(campaignId)) as count_ratio\nFROM\n(\nSELECT SUBSTRING(_key, 1, 23) as campaignId\nFROM datalake.imhotep.campaign_job_mapping\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2d') AND IMHOTEP_UNIXTIME('1d')\n)\n\n\n",
  "queryTables" : [ "datalakehive.imhotep.campaign_job_mapping" ],
  "queryIndex" : 90,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 83713,
  "totalScheduledMillis" : 380113859,
  "cpuMillis" : 53675201,
  "queuedMillis" : 1,
  "executeMillis" : 38351,
  "getResultMillis" : 0,
  "iterateMillis" : 45388,
  "rows" : 54,
  "error" : null,
  "scannedBytes" : 3857799030478,
  "query" : "SELECT date_format(DATE_TRUNC('WEEK', FROM_UNIXTIME(unixtime)),'%Y-%m-%d') as weekStart\n, (case when feedid = 50461 then 'Hosted' else 'Indexed' end) as jobProduct\n--, count(DISTINCT(jobId)) as totalJobs\n, count(DISTINCT(case when has_employer_base_pay = 1 then jobId else null end)) as totalExplicitPayJobs\n, count(DISTINCT(case when jlpostal != '' OR jlenhanced = 1 then jobId else null end)) as totalBetterLocationJobs\n, count(DISTINCT(case when contains(applyvisibility, 'mobile') then jobId else null end)) as totalIndeedApplyableJobs\n, count(DISTINCT(case when has_employer_base_pay = 1 AND contains(applyvisibility, 'mobile') AND (jlpostal != '' OR jlenhanced = 1) then jobId else null end)) as totalBetterJobs\n-- logic for the above fields comes from https://link.indeed.tech/YD476T \nFROM datalake.imhotep.searchablejobs\nWHERE unixtime between imhotep_unixtime(CURRENT_DATE - INTERVAL '183' DAY) \nAND imhotep_unixtime(CURRENT_DATE - INTERVAL '1' DAY)\nAND (waldovisibilitylevel in ('organic','jobalert')\n\tOR (waldovisibilitylevel = 'sponsored' AND sponvisibility = 'spon_active'))\nAND jobcountry != 'JP'\nGROUP BY 1,2",
  "queryTables" : [ "datalakehive.imhotep.searchablejobs" ],
  "queryIndex" : 91,
  "runStartToQueryComplete" : 710
}, {
  "elapsedMillis" : 1372,
  "totalScheduledMillis" : 822,
  "cpuMillis" : 31,
  "queuedMillis" : 0,
  "executeMillis" : 367,
  "getResultMillis" : 0,
  "iterateMillis" : 1018,
  "rows" : 100,
  "error" : null,
  "scannedBytes" : 4699038,
  "query" : "select rsvp_accountid,\n       rsvp_status,\n       rsvp_uuid,\n       unixtime,\n       disposition,\n       jobseeker_show_time_delta,\n       employer_show_time_delta,\n       event_client_id\nFROM imhotep.interviewrecord\nWHERE day >= '2022-12-01' AND day < '2022-12-02'\n  and event_client_id IN ('api_events')\nLIMIT 100",
  "queryTables" : [ "skipperhive.imhotep.interviewrecord" ],
  "queryIndex" : 92,
  "runStartToQueryComplete" : 637
}, {
  "elapsedMillis" : 7255,
  "totalScheduledMillis" : 635729,
  "cpuMillis" : 94983,
  "queuedMillis" : 0,
  "executeMillis" : 3186,
  "getResultMillis" : 0,
  "iterateMillis" : 4082,
  "rows" : 23,
  "error" : null,
  "scannedBytes" : 10862113396,
  "query" : "SELECT\n    DATE_TRUNC('month', activity_time) AS activity_month,\n    is_ai_outreach,\n    SUM(contact_sent) AS contact_count,\n    SUM(positive_response) AS positive_responses_count,\n    (SUM(positive_response) * 1.00) / SUM(contact_sent) AS pos_resp_rate\nFROM\n    datalake.employer_analytics_platform.xpa_fct_sourcing_engagement\nWHERE \n\tactivity_time >= DATE('2024-01-01')\n    --AND subscription_tier IN ('Standard')\n    AND contact_sent > 0\n    AND advertiser_id = 47908\nGROUP BY 1, 2\nORDER BY 1, 2",
  "queryTables" : [ "datalakehive.employer_analytics_platform.xpa_fct_sourcing_engagement" ],
  "queryIndex" : 93,
  "runStartToQueryComplete" : 647
}, {
  "elapsedMillis" : 4045,
  "totalScheduledMillis" : 162128,
  "cpuMillis" : 43093,
  "queuedMillis" : 1,
  "executeMillis" : 877,
  "getResultMillis" : 0,
  "iterateMillis" : 3188,
  "rows" : 8,
  "error" : null,
  "scannedBytes" : 3935085369,
  "query" : "SELECT\n    DATE_TRUNC('month', activity_time) AS activity_month,\n    is_ai_outreach,\n    SUM(contact_sent) AS contact_count,\n    SUM(positive_response) AS positive_responses_count,\n    (SUM(positive_response) * 1.00) / SUM(contact_sent) AS pos_resp_rate\nFROM\n    datalake.employer_analytics_platform.xpa_fct_sourcing_engagement\nWHERE \n\tactivity_time >= DATE('2024-08-01')\n    --AND subscription_tier IN ('Standard')\n    AND contact_sent > 0\n    AND advertiser_id = 16775855\nGROUP BY 1, 2\nORDER BY 1, 2",
  "queryTables" : [ "datalakehive.employer_analytics_platform.xpa_fct_sourcing_engagement" ],
  "queryIndex" : 94,
  "runStartToQueryComplete" : 661
}, {
  "elapsedMillis" : 4592,
  "totalScheduledMillis" : 300419,
  "cpuMillis" : 110243,
  "queuedMillis" : 1,
  "executeMillis" : 908,
  "getResultMillis" : 0,
  "iterateMillis" : 3703,
  "rows" : 13,
  "error" : null,
  "scannedBytes" : 7638876895,
  "query" : "SELECT\n    DATE_TRUNC('month', activity_time) AS activity_month,\n    is_ai_outreach,\n    SUM(contact_sent) AS contact_count,\n    SUM(positive_response) AS positive_responses_count,\n    (SUM(positive_response) * 1.00) / SUM(contact_sent) AS pos_resp_rate\nFROM\n    datalake.employer_analytics_platform.xpa_fct_sourcing_engagement\nWHERE \n\tactivity_time >= DATE('2024-04-01')\n    --AND subscription_tier IN ('Standard')\n    AND contact_sent > 0\n    AND advertiser_id = 16775855\nGROUP BY 1, 2\nORDER BY 1, 2",
  "queryTables" : [ "datalakehive.employer_analytics_platform.xpa_fct_sourcing_engagement" ],
  "queryIndex" : 95,
  "runStartToQueryComplete" : 691
}, {
  "elapsedMillis" : 369194,
  "totalScheduledMillis" : 796850,
  "cpuMillis" : 528230,
  "queuedMillis" : 0,
  "executeMillis" : 1117,
  "getResultMillis" : 0,
  "iterateMillis" : 368105,
  "rows" : 306256493,
  "error" : null,
  "scannedBytes" : 421404496,
  "query" : "  SELECT \n  \tadvertiserid as advertiser_id\n    , t.permission as product_perm\n  FROM \n  \tdatalake.imhotep.advertiserusers  \n  \tCROSS JOIN UNNEST (permissionSetNames) as T (permission)\n  WHERE \n  \tunixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n",
  "queryTables" : [ "datalakehive.imhotep.advertiserusers" ],
  "queryIndex" : 96,
  "runStartToQueryComplete" : 1057
}, {
  "elapsedMillis" : 6992,
  "totalScheduledMillis" : 14422,
  "cpuMillis" : 7506,
  "queuedMillis" : 0,
  "executeMillis" : 3891,
  "getResultMillis" : 0,
  "iterateMillis" : 4277,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 21371921,
  "query" : "SELECT *\nFROM logrepo.log.jsapisearch\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-10-20 11:00:00') AND IMHOTEP_UNIXTIME('2024-10-20 12:00:00')\nLIMIT 10",
  "queryTables" : [ "logrepo.log.jsapisearch" ],
  "queryIndex" : 97,
  "runStartToQueryComplete" : 704
}, {
  "elapsedMillis" : 3364,
  "totalScheduledMillis" : 1464551,
  "cpuMillis" : 159316,
  "queuedMillis" : 1,
  "executeMillis" : 1153,
  "getResultMillis" : 0,
  "iterateMillis" : 2222,
  "rows" : 655,
  "error" : null,
  "scannedBytes" : 8494531779,
  "query" : "WITH daily_data AS (\n    SELECT\n        date_trunc('minute', from_unixtime(lp.unixtime)) as date,\n        moderationApi, \n        moderationType, \n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 30 PRECEDING AND current row) AS block_count,\n\t\tSUM(COUNT(*)) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 30 PRECEDING AND current row) AS request_count,\n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS weekly_block_count,\n\t\tSUM(COUNT(*)) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS weekly_request_count\n    FROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.flagged IS NOT NULL\n        AND lp.metric = 'moderation-text'\n        AND unixtime BETWEEN imhotep_unixtime(timestamp '2024-10-24') AND imhotep_unixtime(timestamp '2024-10-29')\n        and moderationApi='openAIModerations' and moderationType='input'\n    GROUP BY\n        date_trunc('minute', from_unixtime(lp.unixtime)),\n        moderationApi, \n        moderationType \n),\nblock_rate AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        cast(request_count * 240 as double) / cast(30 * weekly_request_count as double) as relative_request_rate,\n        cast(block_count as double) / request_count as raw_block_rate,\n        -- We adjust the proportion estimates by adding z^2/2 successes and z^2/2 failures (z^2 obs total) to the counts.\n        -- This can be thought of as a Bayesian prior, or as a correction to the Normal approximation for rates close to 0 or 1.\n        -- For large values of request_count this converges to the raw proportion (block_rate ~ raw_block_rate).\n        -- Using z=3.0, in other words, we're going to require a \"3-sigma\" detection.\n        cast(block_count + 4.5 as double) / (request_count + 9.0) as block_rate, -- corrected/smoothed\n        cast(block_count as double) / (request_count + 9.0) as block_rate_zc, -- zero-centered corrected/smoothed rate (only adding to denominator)\n        cast(weekly_block_count + (240 * 4.5 / 30) as double) / (weekly_request_count + (240 * 9.0 / 30)) as  weekly_block_rate, -- corrected/smoothed\n        cast(weekly_block_count as double) / (weekly_request_count + (240 * 9.0 / 30)) as  weekly_block_rate_zc, -- corrected/smoothed        \n        cast(weekly_block_count as double) /  weekly_request_count as raw_weekly_block_rate,  \n        (cast(block_count + 4.5 as double) / (request_count + 9.0)) - (cast(weekly_block_count + (240 * 4.5 / 30) as double) / (weekly_request_count + (240 * 9.0 / 30))) as change,\n        sum(1.0) over (partition by moderationApi, moderationType ORDER BY date ROWS BETWEEN 240 + 30 PRECEDING AND 1 PRECEDING) as previous_dates_count\n    FROM\n        daily_data\n),\n\nblock_rate_change AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        request_count,\n\t\trelative_request_rate,        \n        weekly_request_count,\n        STDDEV(block_rate-weekly_block_rate) OVER (partition by moderationApi, moderationType ORDER BY date ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS stddev_obs,\n        SQRT((block_rate * (1.0 - block_rate) / request_count) + ((weekly_block_rate * (1.0 - weekly_block_rate) / weekly_request_count))) as stddev_approx,\n        raw_block_rate,  \n        block_rate,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        raw_weekly_block_rate,  \n        weekly_block_rate, -- corrected/smoothed\n        change,\n        case weekly_block_rate_zc\n           when 0 then 0\n           else (block_rate_zc - weekly_block_rate_zc) \n        end as change_zc,\n\t\tprevious_dates_count             \n    FROM\n        block_rate\n),\nconfidence_interval AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        stddev_obs,\n\t\tstddev_approx,\n        greatest(stddev_approx, stddev_obs) as stddev,\n        block_rate,\n        block_rate - 6 * greatest(stddev_approx, stddev_obs)  AS block_rate_lower_bound,\n        block_rate + 6 * greatest(stddev_approx, stddev_obs) AS block_rate_upper_bound,          \n        weekly_block_rate,\n\t\tweekly_request_count,\n\t\traw_block_rate,        \n        raw_weekly_block_rate,        \n        change,\n        change_zc,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        request_count,\n\t\trelative_request_rate,                \n        change - 6 * greatest(stddev_approx, stddev_obs) AS change_lower_bound,\n        change + 6 * greatest(stddev_approx, stddev_obs) AS change_upper_bound,\n        previous_dates_count,\n        row_number() OVER (partition by moderationApi, moderationType ORDER BY date) as row_n         \n    FROM\n        block_rate_change\n    --WHERE\n    --\tweekly_request_count > 100\n    --    and request_count > 100\n)\nSELECT\n    date,\n    moderationApi, \n    moderationType,\n    request_count,\n\trelative_request_rate,            \n    stddev_obs,\n    stddev_approx,\n    stddev,\n    block_rate,\n\tblock_rate_lower_bound,\n    block_rate_upper_bound,\n    weekly_block_rate,\n    weekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,    \nchange,\n    change / weekly_block_rate as relative_change,\n    change_zc / weekly_block_rate_zc as relative_change_zc,\n    change_zc,\n    block_rate_zc,\n    weekly_block_rate_zc,        \n    change_lower_bound,\n    change_upper_bound,\n    change_lower_bound * 1.0 / weekly_block_rate as relative_change_lower_bound,\n    change_upper_bound * 1.0 / weekly_block_rate as relative_change_upper_bound,\n    greatest(change_lower_bound / weekly_block_rate, 0) as relative_change_lower_bound_sig,\n    least(change_upper_bound / weekly_block_rate, 0) as relative_change_upper_bound_sig,     \n    IF((change_lower_bound > 0 or change_upper_bound<0) and (previous_dates_count > 240), 1, 0) as is_sig_change,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (date = (max(date) over ())) and (previous_dates_count > 6), 1, 0) as is_latest_date_sig_change,\n    change/stddev as z_score,\n    IF(date = (max(date) over ()), change/stddev, NULL) as latest_date_z_score, \n    max(date) over () as latest_data_date,\n    previous_dates_count            \nFROM\n    confidence_interval -- Note: return values for all dates unlike with the alerting query\nWHERE\n    (change/stddev) IS NOT NULL\n    and ((row_n % 15 = 0)  or (abs(change/stddev) > 6))\n    and previous_dates_count > (0.9 * 240)\nORDER BY\n    date DESC, moderationApi ASC, moderationType DESC",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 98,
  "runStartToQueryComplete" : 701
}, {
  "elapsedMillis" : 3994,
  "totalScheduledMillis" : 1325676,
  "cpuMillis" : 203860,
  "queuedMillis" : 1,
  "executeMillis" : 1104,
  "getResultMillis" : 0,
  "iterateMillis" : 2965,
  "rows" : 1416,
  "error" : null,
  "scannedBytes" : 8790003512,
  "query" : "WITH daily_data AS (\n    SELECT\n        date_trunc('minute', from_unixtime(lp.unixtime)) as date,\n        appName,\n        moderationApi, \n        moderationType, \n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 30 PRECEDING AND current row) AS block_count,\n\t\tSUM(COUNT(*)) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 30 PRECEDING AND current row) AS request_count,\n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS weekly_block_count,\n\t\tSUM(COUNT(*)) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS weekly_request_count\n    FROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.flagged IS NOT NULL\n        AND lp.metric = 'moderation-text'\n        AND unixtime BETWEEN imhotep_unixtime(timestamp '2024-10-24') AND imhotep_unixtime(timestamp '2024-10-29')\n        and moderationApi='openAIModerations' and moderationType='input'\n        -- see rate_change query for filters by appName etc.\n    GROUP BY\n        date_trunc('minute', from_unixtime(lp.unixtime)),\n\t\tappName,         \n        moderationApi, \n        moderationType \n),\nblock_rate AS (\n    SELECT\n        date,\n\t\tappName, \n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        cast(request_count * 240 as double) / cast(30 * weekly_request_count as double) as relative_request_rate,\n        cast(block_count as double) / request_count as raw_block_rate,\n        -- We adjust the proportion estimates by adding z^2/2 successes and z^2/2 failures (z^2 obs total) to the counts.\n        -- This can be thought of as a Bayesian prior, or as a correction to the Normal approximation for rates close to 0 or 1.\n        -- For large values of request_count this converges to the raw proportion (block_rate ~ raw_block_rate).\n        -- Using z=3.0, in other words, we're going to require a \"3-sigma\" detection.\n        cast(block_count + 4.5 as double) / (request_count + 9.0) as block_rate, -- corrected/smoothed\n        cast(block_count as double) / (request_count + 9.0) as block_rate_zc, -- zero-centered corrected/smoothed rate (only adding to denominator)\n        cast(weekly_block_count + (240 * 4.5 / 30) as double) / (weekly_request_count + (240 * 9.0 / 30)) as  weekly_block_rate, -- corrected/smoothed\n        cast(weekly_block_count as double) / (weekly_request_count + (240 * 9.0 / 30)) as  weekly_block_rate_zc, -- corrected/smoothed        \n        cast(weekly_block_count as double) /  weekly_request_count as raw_weekly_block_rate,  \n        (cast(block_count + 4.5 as double) / (request_count + 9.0)) - (cast(weekly_block_count + (240 * 4.5 / 30) as double) / (weekly_request_count + (240 * 9.0 / 30))) as change,\n        sum(1.0) over (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 240 + 30 PRECEDING AND 1 PRECEDING) as previous_dates_count\n    FROM\n        daily_data\n),\n\nblock_rate_change AS (\n    SELECT\n        date,\n\t\tappName,         \n        moderationApi, \n        moderationType,\n        request_count,\n\t\trelative_request_rate,        \n        weekly_request_count,\n        STDDEV(block_rate-weekly_block_rate) OVER (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS stddev_obs,\n        SQRT((block_rate * (1.0 - block_rate) / request_count) + ((weekly_block_rate * (1.0 - weekly_block_rate) / weekly_request_count))) as stddev_approx,\n        raw_block_rate,  \n        block_rate,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        raw_weekly_block_rate,  \n        weekly_block_rate, -- corrected/smoothed\n        change,\n        case weekly_block_rate_zc\n           when 0 then 0\n           else (block_rate_zc - weekly_block_rate_zc) \n        end as change_zc,\n\t\tprevious_dates_count        \n    FROM\n        block_rate\n),\nconfidence_interval AS (\n    SELECT\n        date,\n\t\tappName,         \n        moderationApi, \n        moderationType,\n        stddev_obs,\n\t\tstddev_approx,\n        greatest(stddev_approx, stddev_obs) as stddev,\n        block_rate,\n        block_rate - 6 * greatest(stddev_approx, stddev_obs)  AS block_rate_lower_bound,\n        block_rate + 6 * greatest(stddev_approx, stddev_obs) AS block_rate_upper_bound,          \n        weekly_block_rate,\n\t\tweekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,        \n        change,\n        change_zc,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        request_count,\n\t\trelative_request_rate,                \n        change - 6 * greatest(stddev_approx, stddev_obs) AS change_lower_bound,\n        change + 6 * greatest(stddev_approx, stddev_obs) AS change_upper_bound,\n        previous_dates_count,\n        row_number() OVER (partition by moderationApi, moderationType ORDER BY date) as row_n \n    FROM\n        block_rate_change\n    --WHERE\n    --\tweekly_request_count > 100\n    --    and request_count > 100\n)\nSELECT\n    date,\n\tappName,     \n    moderationApi, \n    moderationType,\n    request_count,\n\trelative_request_rate,            \n    stddev_obs,\n    stddev_approx,\n    stddev,\n    block_rate,\n\tblock_rate_lower_bound,\n    block_rate_upper_bound,\n    weekly_block_rate,\n    weekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,    \n    change,\n    change / weekly_block_rate as relative_change,\n    change_zc / weekly_block_rate_zc as relative_change_zc,\n    change_zc,\n    block_rate_zc,\n    weekly_block_rate_zc,\n    \n    change_lower_bound,\n    change_upper_bound,\n    change_lower_bound * 1.0 / weekly_block_rate as relative_change_lower_bound,\n    change_upper_bound * 1.0 / weekly_block_rate as relative_change_upper_bound,\n    greatest(change_lower_bound / weekly_block_rate, 0) as relative_change_lower_bound_sig,\n    least(change_upper_bound / weekly_block_rate, 0) as relative_change_upper_bound_sig,     \n    IF((change_lower_bound > 0 or change_upper_bound<0) and (previous_dates_count > 240), 1, 0) as is_sig_change,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (date = (max(date) over ())) and (previous_dates_count > 6), 1, 0) as is_latest_date_sig_change,\n    change/stddev as z_score,\n    IF(date = (max(date) over ()), change/stddev, NULL) as latest_date_z_score, \n    max(date) over () as latest_data_date,\n    previous_dates_count            \nFROM\n    confidence_interval -- Note: return values for all dates unlike with the alerting query\nWHERE\n    (change/stddev) IS NOT NULL\n    and ((row_n % 15 = 0)  or (abs(change/stddev) > 6))\n    and previous_dates_count > (0.9 * 240)\nORDER BY\n    date DESC, moderationApi ASC, moderationType DESC",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 99,
  "runStartToQueryComplete" : 704
}, {
  "elapsedMillis" : 1085,
  "totalScheduledMillis" : 10741,
  "cpuMillis" : 3495,
  "queuedMillis" : 0,
  "executeMillis" : 787,
  "getResultMillis" : 0,
  "iterateMillis" : 1135,
  "rows" : 100,
  "error" : null,
  "scannedBytes" : 6809353,
  "query" : "  SELECT \n  \tadvertiserid as advertiser_id\n    , t.permission as product_perm\n  FROM \n  \tdatalake.imhotep.advertiserusers  \n  \tCROSS JOIN UNNEST (permissionSetNames) as T (permission)\n  WHERE \n  \tunixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 100",
  "queryTables" : [ "datalakehive.imhotep.advertiserusers" ],
  "queryIndex" : 100,
  "runStartToQueryComplete" : 706
}, {
  "elapsedMillis" : 3136,
  "totalScheduledMillis" : 179561,
  "cpuMillis" : 21919,
  "queuedMillis" : 1,
  "executeMillis" : 1910,
  "getResultMillis" : 0,
  "iterateMillis" : 1243,
  "rows" : 78,
  "error" : null,
  "scannedBytes" : 2174411027,
  "query" : "--weekly view of email csat send volume\nSELECT \n    sum(postsuccess) + sum(blockedcount) as total_sends,\n    sum(postsuccess) as successful_sends, \n    sum(opened) as opened_sends, \n    sum(blockedcount) as blocked_sends, \n    sum(postsuccess)/(sum(CAST(postsuccess as DOUBLE)) + sum(CAST(blockedcount as Double))) as send_success_rate,\n    sum(opened)/sum(CAST(postsuccess as DOUBLE)) as open_rate_of_successful_sends, \n    team_market_endq,\n    send_date\nFROM(\n    SELECT a.campaign, a.advertiserid, a.opened, a.postsuccess, a.blockedcount, a.id, b.full_name, b.team_market_endq, b.report_date, a.send_date\n    FROM (\n        SELECT \n        \t    date(FROM_UNIXTIME(unixtime)) as send_date,\n            campaign,\n            optionalidentifier,\n            advertiserid,\n            opened,\n            postsuccess,\n            blockedcount, \n            case\n                when campaign like '%VENDOR%' then json_extract_scalar(optionalidentifier, '$.agent_id')\n                else json_extract_scalar(optionalidentifier, '$.csRepId')\n                \n            end as id\n        FROM datalake.imhotep.ravenemail a\n        WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1w') AND IMHOTEP_UNIXTIME('today')\n        \n        and (campaign like '%SHARED%' or campaign like '%VENDOR%')\n        group by 1,2,3,4,5,6,7\n    ) a\n    LEFT JOIN datalake.sbs_global.sbs_opt_full_roster b\n    ON \n    cast(a.id as INTEGER) = CAST(b.rep_id as INTEGER)\n    WHERE b.report_date = date_add('day', -2, current_date)\n)\nGROUP BY 7,8\nORDER BY 1 desc\n\n",
  "queryTables" : [ "datalakehive.imhotep.ravenemail", "datalakehive.sbs_global.sbs_opt_full_roster" ],
  "queryIndex" : 101,
  "runStartToQueryComplete" : 715
}, {
  "elapsedMillis" : 1400,
  "totalScheduledMillis" : 2999,
  "cpuMillis" : 280,
  "queuedMillis" : 0,
  "executeMillis" : 714,
  "getResultMillis" : 0,
  "iterateMillis" : 746,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 21444199,
  "query" : "SELECT *\nFROM datalake.imhotep.ruleContentResult_communications\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.rulecontentresult_communications" ],
  "queryIndex" : 102,
  "runStartToQueryComplete" : 723
}, {
  "elapsedMillis" : 4471,
  "totalScheduledMillis" : 187667,
  "cpuMillis" : 55789,
  "queuedMillis" : 1,
  "executeMillis" : 896,
  "getResultMillis" : 0,
  "iterateMillis" : 3591,
  "rows" : 12,
  "error" : null,
  "scannedBytes" : 6639029155,
  "query" : "SELECT\n    DATE_TRUNC('month', activity_time) AS activity_month,\n    is_ai_outreach,\n    SUM(contact_sent) AS contact_count,\n    SUM(positive_response) AS positive_responses_count,\n    (SUM(positive_response) * 1.00) / SUM(contact_sent) AS pos_resp_rate\nFROM\n    datalake.employer_analytics_platform.xpa_fct_sourcing_engagement\nWHERE \n\tactivity_time >= DATE('2024-05-01')\n    --AND subscription_tier IN ('Standard')\n    AND contact_sent > 0\n    AND advertiser_id = 16775855\nGROUP BY 1, 2\nORDER BY 1, 2",
  "queryTables" : [ "datalakehive.employer_analytics_platform.xpa_fct_sourcing_engagement" ],
  "queryIndex" : 103,
  "runStartToQueryComplete" : 730
}, {
  "elapsedMillis" : 2277,
  "totalScheduledMillis" : 1608571,
  "cpuMillis" : 892771,
  "queuedMillis" : 1,
  "executeMillis" : 1506,
  "getResultMillis" : 0,
  "iterateMillis" : 951,
  "rows" : 100,
  "error" : null,
  "scannedBytes" : 2933773218,
  "query" : "with msa_jobs as (\n    select sj.jobid as agg_job_id\n    , jlmsa\n    , trim(jlmsa) as jlmsa_trimmed\n    , sum(case when trim(jlmsa) is not null then 1 else 0 end) AS urban_jobs\n    , sum(case when trim(jlmsa) is null then 1 else 0 end) AS rural_jobs\n    , max_by(trim(jlmsa), hour) as latest_msa\n    from datalake.imhotep.searchablejobs sj\n    where hour between date_format(from_unixtime(to_unixtime(date('2024-10-01'))), '%Y-%m-%d %H:%i:%s') and date_format(from_unixtime(to_unixtime(date('2024-10-02'))), '%Y-%m-%d %H:%i:%s')\n    group by 1,2,3\n)\n\nselect * from msa_jobs\nwhere rural_jobs>0\nlimit 100\n",
  "queryTables" : [ "datalakehive.imhotep.searchablejobs" ],
  "queryIndex" : 104,
  "runStartToQueryComplete" : 732
}, {
  "elapsedMillis" : 5199,
  "totalScheduledMillis" : 128245,
  "cpuMillis" : 33745,
  "queuedMillis" : 1,
  "executeMillis" : 1024,
  "getResultMillis" : 0,
  "iterateMillis" : 4193,
  "rows" : 8,
  "error" : null,
  "scannedBytes" : 3935085369,
  "query" : "SELECT\n    DATE_TRUNC('month', activity_time) AS activity_month,\n    is_ai_outreach,\n    SUM(contact_sent) AS contact_count,\n    SUM(positive_response) AS positive_responses_count,\n    (SUM(positive_response) * 1.00) / SUM(contact_sent) AS pos_resp_rate\nFROM\n    datalake.employer_analytics_platform.xpa_fct_sourcing_engagement\nWHERE \n\tactivity_time >= DATE('2024-08-01')\n    --AND subscription_tier IN ('Standard')\n    AND contact_sent > 0\n    AND advertiser_id = 16775855\nGROUP BY 1, 2\nORDER BY 1, 2",
  "queryTables" : [ "datalakehive.employer_analytics_platform.xpa_fct_sourcing_engagement" ],
  "queryIndex" : 105,
  "runStartToQueryComplete" : 757
}, {
  "elapsedMillis" : 1593,
  "totalScheduledMillis" : 1007033,
  "cpuMillis" : 311052,
  "queuedMillis" : 1,
  "executeMillis" : 892,
  "getResultMillis" : 0,
  "iterateMillis" : 723,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 2931658518,
  "query" : "with msa_jobs as (\n    select sj.jobid as agg_job_id\n    , jlmsa\n    , trim(jlmsa) as jlmsa_trimmed\n    , sum(case when trim(jlmsa) is not null then 1 else 0 end) AS urban_jobs\n    , sum(case when trim(jlmsa) is null then 1 else 0 end) AS rural_jobs\n    , max_by(trim(jlmsa), hour) as latest_msa\n    from datalake.imhotep.searchablejobs sj\n    where hour between date_format(from_unixtime(to_unixtime(date('2024-10-01'))), '%Y-%m-%d %H:%i:%s') and date_format(from_unixtime(to_unixtime(date('2024-10-02'))), '%Y-%m-%d %H:%i:%s')\n    group by 1,2,3\n)\n\nselect * from msa_jobs\nwhere rural_jobs>0 and jlmsa is not null\nlimit 100\n",
  "queryTables" : [ "datalakehive.imhotep.searchablejobs" ],
  "queryIndex" : 106,
  "runStartToQueryComplete" : 759
}, {
  "elapsedMillis" : 17203,
  "totalScheduledMillis" : 25962730,
  "cpuMillis" : 11618578,
  "queuedMillis" : 1,
  "executeMillis" : 10047,
  "getResultMillis" : 0,
  "iterateMillis" : 7186,
  "rows" : 5,
  "error" : null,
  "scannedBytes" : 428681019180,
  "query" : "/*WITH\n\nsponsor_event as(\n  Select distinct advertiser_id \n  FROM datalake.imhotep.sponsormodulesevents2 \n  WHERE hour >= cast(date_add('day',-21,CURRENT_DATE) as varchar)\n  AND page='sponsorOrganic' \n  AND event='element_click' \n  AND element_name='cpc_sponsorship' \n  AND is_masquerading=1\n),*/\n\nWITH\n\nsbs_reps as (\n\tselect DISTINCT ldap\n\tFROM datalake.imhotep.indeedemployeesnapshot\n\tWHERE sup_org_name LIKE '%SBS%'\n    and day >= cast(date_add('day',-7,CURRENT_DATE) as varchar)\n)\n\nSELECT \ndate_trunc('day',cast(from_unixtime(unixtime) as timestamp)) as date\n, masquerading_user\n, advertiser_id\n, element\n, url_path\n\nFROM datalake.imhotep.employer_user_actions_spark\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n  and custom_action_type like '%click%'\n\n  and is_masquerading = 1\n  and ((url_path = '/sponsor/edit/sponsor' and action_name='sponsored-button')\n  or (url_path = '/objective-campaign/create/confirmation' and element like 'save-campaign-button'))\n  \n  and masquerading_user in (Select distinct ldap FROM sbs_reps)\n  --  and advertiser_id = 773008\n\n  --  and ((url_path = '/sponsor/edit/sponsor'and action_name='sponsored-button') or (url_path = '/objective-campaign/create/confirmation' and action_name = 'save-campaign-button'))\n  --  and advertiser_id in (Select distinct advertiser_id FROM sponsor_event)\n\nGROUP BY 1,2,3,4,5\nORDER BY 1 desc",
  "queryTables" : [ "datalakehive.imhotep.employer_user_actions_spark", "datalakehive.imhotep.indeedemployeesnapshot" ],
  "queryIndex" : 107,
  "runStartToQueryComplete" : 778
}, {
  "elapsedMillis" : 13290,
  "totalScheduledMillis" : 4146300,
  "cpuMillis" : 2000723,
  "queuedMillis" : 1,
  "executeMillis" : 7918,
  "getResultMillis" : 0,
  "iterateMillis" : 5400,
  "rows" : 12,
  "error" : null,
  "scannedBytes" : 80407567457,
  "query" : "with convos as (\nselect\n    ce.advertiserId\n   ,eventId\n   ,ce.encryptedConversationId\n   ,(isImported = '1') as isEmail\nFROM conversationEvents ce\njoin convsConversationCreation cc on  ce.encryptedConversationId = cc.encryptedConversationId \n\nWHERE ce.unixtime BETWEEN IMHOTEP_UNIXTIME('181d') AND IMHOTEP_UNIXTIME('1d')\nand   cc.unixtime BETWEEN IMHOTEP_UNIXTIME('195d') AND IMHOTEP_UNIXTIME('1d')\nand ((ce.unixtime - cc.unixtime) < (60*60*24*14))\nand ce.context='APPLICATION'\nand ce.ownerRole != 'JOBSEEKER'\nGROUP BY 1,2,3,4\n)\n\n\n, agg as (\n\nselect advertiserId\n      ,count(*) as totalMessages\n      ,count_if(isEmail) as emailMessages\n      ,count_if(NOT isEmail) as onPlatformMessages \n  from convos\ngroup by 1 \n\n\t\t)\n        \n,advertiserDetails as ( \n\nselect advertiser_id\n   , max_by(parent_company_size_segment, unixtime) as parent_company_size_segment\n   , max_by(type, unixtime) as type\n   , max_by(billing_country, unixtime) as billing_country\n  from  daily_employer2 \n  where unixtime BETWEEN IMHOTEP_UNIXTIME('2d') and IMHOTEP_UNIXTIME('1d')\ngroup by 1\n\n   )\n        \n\n select \n            advertiserDetails.parent_company_size_segment         \n\t\t   , case when emailMessages> 0 and onPlatformMessages=0 then 'Email Only'\n\t\t\t when  emailMessages=0 and onPlatformMessages>0 then 'Chat Only'\n\t\t\t when  emailMessages>0 and onPlatformMessages>0 then 'Email & Chat'\n             end as usageType\n        ,count(distinct advertiserId) as empCount\n        ,100.0*count(distinct advertiserId)/sum(count(distinct advertiserId)) over(partition by parent_company_size_segment) as pctEmpCountWithinSegment\n\n  from agg\nleft join advertiserDetails on agg.advertiserId=advertiserDetails.advertiser_id\nwhere parent_company_size_segment is not null and parent_company_size_segment!='NULL'\ngroup by 1,2\norder by case parent_company_size_segment \n         when 'S' then 1 \n         when 'M' then 2\n         when 'L' then 3 \n         else 4 \n         end asc\n        \n\n\n\n\n",
  "queryTables" : [ "skipperhive.imhotep.conversationevents", "skipperhive.imhotep.convsconversationcreation", "skipperhive.imhotep.daily_employer2" ],
  "queryIndex" : 108,
  "runStartToQueryComplete" : 795
}, {
  "elapsedMillis" : 1087,
  "totalScheduledMillis" : 7420,
  "cpuMillis" : 493,
  "queuedMillis" : 0,
  "executeMillis" : 824,
  "getResultMillis" : 0,
  "iterateMillis" : 478,
  "rows" : 100,
  "error" : null,
  "scannedBytes" : 1609485,
  "query" : "  SELECT \n  \tadvertiserid as advertiser_id\n    , t.permission as product_perm\n    , accountid as account_id\n  FROM \n  \tdatalake.imhotep.advertiserusers  \n  \tCROSS JOIN UNNEST (permissionSetNames) as T (permission)\n  WHERE \n  \tunixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 100",
  "queryTables" : [ "datalakehive.imhotep.advertiserusers" ],
  "queryIndex" : 109,
  "runStartToQueryComplete" : 786
}, {
  "elapsedMillis" : 4337,
  "totalScheduledMillis" : 66031,
  "cpuMillis" : 4607,
  "queuedMillis" : 1,
  "executeMillis" : 3717,
  "getResultMillis" : 0,
  "iterateMillis" : 641,
  "rows" : 90,
  "error" : null,
  "scannedBytes" : 196179805,
  "query" : "SELECT SUM((CASE WHEN \"custom_sql_query\".\"sum_sent\" = 0 THEN CAST(NULL AS DOUBLE) ELSE CAST(\"custom_sql_query\".\"sum_resp_any\" AS DOUBLE) / \"custom_sql_query\".\"sum_sent\" END)) AS \"temp_tc___18417798\",\n  DATE_TRUNC('day', CAST(CAST(\"custom_sql_query\".\"day\" AS TIMESTAMP) AS DATE)) AS \"tdy_day_ok\"\nFROM (\n  SELECT \n      day,\n      SUM(resp_any) as sum_resp_any,\n      SUM(sent) as sum_sent\n  FROM imhotep.rsContacts\n  WHERE day BETWEEN CAST(DATE(DATE_ADD('day',-100,DATE_TRUNC('day', CURRENT_TIMESTAMP))) as VARCHAR) AND \n      CAST(DATE(DATE_ADD('day',-10,DATE_TRUNC('day', CURRENT_TIMESTAMP))) as VARCHAR)\n  GROUP BY day\n) \"custom_sql_query\"\nGROUP BY 2",
  "queryTables" : [ "skipperhive.imhotep.rscontacts" ],
  "queryIndex" : 110,
  "runStartToQueryComplete" : 790
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 43555,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_173456_00134_vjepj): Error processing metadata for table tiller.adsystemdb_tbladvertiserjobsource",
  "scannedBytes" : 0,
  "query" : "WITH \n\nw_asl as (\n\tSELECT source_id, advertiser_id\n\tFROM datalake.tiller.adsystemdb_tbladvertiserjobsource\n\tWHERE status = 'VERIFIED'\n\tGROUP BY 1,2),\n    \nw_jpa as (\n\tSELECT w_asl.advertiser_id as advertiserid\n    , count(DISTINCT(sj.jobId)) as totalJobs\n    FROM datalake.imhotep.searchablejobs sj\n    INNER JOIN w_asl ON sj.sourceid = w_asl.source_id\n    WHERE unixtime between imhotep_unixtime(CURRENT_DATE - INTERVAL '15' DAY) \n    AND imhotep_unixtime(CURRENT_DATE - INTERVAL '1' DAY)\n    AND jobcountry != 'JP'\n    GROUP BY 1),\n\nw_pjpa as (\n\tSELECT approx_percentile(totalJobs, 0.50) as p50jobsPerAdvId\n\t, approx_percentile(totalJobs, 0.75) as p75jobsPerAdvId\n\t, approx_percentile(totalJobs, 0.90) as p90jobsPerAdvId\n    , approx_percentile(totalJobs, 0.99) as p99jobsPerAdvId\n    FROM w_jpa),\n\nw_upa as (\n\tSELECT cast(au.advertiserId as bigint) as advertiserid\n    , count(distinct(accountId)) as totalUsers\n\tFROM datalake.imhotep.advertiserusers au\n    WHERE unixtime between imhotep_unixtime(CURRENT_DATE - INTERVAL '15' DAY) \n    AND imhotep_unixtime(CURRENT_DATE - INTERVAL '1' DAY)\n    AND au.advertiserId !='-1'\n    AND au.advertiserId is not null\n    GROUP BY 1),\n    \nw_pjuc as (\n\tSELECT w_upa.advertiserid\n    , sum(case when w_jpa.totalJobs >= (select p50jobsPerAdvId from w_pjpa)\n        then w_upa.totalUsers else null end) as p50JobsUserCount\n    , sum(case when w_jpa.totalJobs >= (select p75jobsPerAdvId from w_pjpa) \n    \tthen w_upa.totalUsers else null end) as p75JobsUserCount\n    , sum(case when w_jpa.totalJobs >= (select p90jobsPerAdvId from w_pjpa) \n    \tthen w_upa.totalUsers else null end) as p90JobsUserCount\n    , sum(case when w_jpa.totalJobs >= (select p99jobsPerAdvId from w_pjpa) \n    \tthen w_upa.totalUsers else null end) as p99JobsUserCount\n    FROM w_upa\n    INNER JOIN w_jpa ON w_upa.advertiserId = w_jpa.advertiserId\n    GROUP BY 1),\n    \nw_final as (\n\tSELECT max(p50jobsPerAdvId) as p50jobsPerAdvId\n    , max(avgUserCountAtp50Jobs) as avgUserCountAtp50Jobs\n    , max(p75jobsPerAdvId) as p75jobsPerAdvId\n    , max(avgUserCountAtp75Jobs) as avgUserCountAtp75Jobs\n    , max(p90jobsPerAdvId) as p90jobsPerAdvId\n    , max(avgUserCountAtp90Jobs) as avgUserCountAtp90Jobs\n    , max(p99jobsPerAdvId) as p99jobsPerAdvId\n    , max(avgUserCountAtp99Jobs) as avgUserCountAtp99Jobs\n    FROM    \n\n        (SELECT avg(w_pjuc.p50JobsUserCount) as avgUserCountAtp50Jobs\n        , avg(w_pjuc.p75JobsUserCount) as avgUserCountAtp75Jobs\n        , avg(w_pjuc.p90JobsUserCount) as avgUserCountAtp90Jobs\n        , avg(w_pjuc.p99JobsUserCount) as avgUserCountAtp99Jobs\n        , 0 as p50jobsPerAdvId\n        , 0 as p75jobsPerAdvId\n        , 0 as p90jobsPerAdvId\n        , 0 as p99jobsPerAdvId\n        FROM w_pjuc\n\n        UNION ALL \n        SELECT 0 as avgUserCountAtp50Jobs\n        , 0 as avgUserCountAtp75Jobs\n        , 0 as avgUserCountAtp90Jobs\n        , 0 as avgUserCountAtp99Jobs\n        , p50jobsPerAdvId\n        , p75jobsPerAdvId\n        , p90jobsPerAdvId\n        , p99jobsPerAdvId\n        FROM w_pjpa))\n\nSELECT 'p50' as percentile, p50jobsPerAdvId as jobsPerAdvId, avgUserCountAtp50Jobs as avgUserCount FROM w_final\nUNION ALL \nSELECT 'p75' as percentile, p75jobsPerAdvId as jobsPerAdvId, avgUserCountAtp75Jobs as avgUserCount FROM w_final\nUNION ALL \nSELECT 'p90' as percentile, p90jobsPerAdvId as jobsPerAdvId, avgUserCountAtp90Jobs as avgUserCount FROM w_final\nUNION ALL \nSELECT 'p99' as percentile, p99jobsPerAdvId as jobsPerAdvId, avgUserCountAtp99Jobs as avgUserCount FROM w_final\n\n",
  "queryTables" : [ "datalake.tiller.adsystemdb_tbladvertiserjobsource", "datalake.tiller.adsystemdb_tbladvertiserjobsource", "datalake.tiller.adsystemdb_tbladvertiserjobsource", "datalake.tiller.adsystemdb_tbladvertiserjobsource", "datalake.tiller.adsystemdb_tbladvertiserjobsource", "datalake.tiller.adsystemdb_tbladvertiserjobsource", "datalake.tiller.adsystemdb_tbladvertiserjobsource", "datalake.tiller.adsystemdb_tbladvertiserjobsource", "datalake.tiller.adsystemdb_tbladvertiserjobsource", "datalake.tiller.adsystemdb_tbladvertiserjobsource", "datalake.tiller.adsystemdb_tbladvertiserjobsource", "datalake.tiller.adsystemdb_tbladvertiserjobsource", "datalakehive.imhotep.advertiserusers", "datalakehive.imhotep.advertiserusers", "datalakehive.imhotep.advertiserusers", "datalakehive.imhotep.advertiserusers", "datalakehive.imhotep.searchablejobs", "datalakehive.imhotep.searchablejobs", "datalakehive.imhotep.searchablejobs", "datalakehive.imhotep.searchablejobs", "datalakehive.imhotep.searchablejobs", "datalakehive.imhotep.searchablejobs", "datalakehive.imhotep.searchablejobs", "datalakehive.imhotep.searchablejobs", "datalakehive.imhotep.searchablejobs", "datalakehive.imhotep.searchablejobs", "datalakehive.imhotep.searchablejobs", "datalakehive.imhotep.searchablejobs" ],
  "queryIndex" : 111,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 11842,
  "totalScheduledMillis" : 19447492,
  "cpuMillis" : 4276767,
  "queuedMillis" : 0,
  "executeMillis" : 3693,
  "getResultMillis" : 0,
  "iterateMillis" : 8250,
  "rows" : 1000,
  "error" : null,
  "scannedBytes" : 109105256517,
  "query" : "with acplh as\n(select adid,\n        cast(max(unixtime) as double) as max_unixtime,\n        cast(sum(mcbpexpendedbudget) as double) / 100000.000000 as expended_budget,\n        cast(sum(case when (status <> 'active' or auctioneligible = 1) then mcbpunderspend else 0 end) as double) / 100000.000000 as underspend\n from datalake.imhotep.adcampaignperformance\n where hour >= '2024-02-02' and\n       hour < '2024-03-01' and\n       country = 'us' and\n       advertisertype not in ('Test', 'Indeed') and\n       isLastHourOfCampaignPeriod = 1 and\n       (auctionEligible = 1 OR mcBPExpendedBudget > 0) and\n       adSubtype <> 'dradis_lifetime' and\n       bidoptadtype like '%monthly%' and\n       mcBPExpendedBudget + case when status <> 'active' OR auctionEligible = 1 then 1 else 0 end * mcBPUnderSpend > 0\n group by 1),\nacpprop as\n(select acp.adid as adid,\n        count(distinct acp.adid) as campaigns,\n        cast(max(case when cast(mcbpexpendedbudget as double) / 100000.000000 / (acplh.expended_budget + acplh.underspend) > 0.9 then acplh.max_unixtime - unixtime else 0 end) as double) / (60 * 60 * 24) as days_early,\n        cast(sum(jobcount) as double) as jobcount,\n        cast(sum(case when islasthourofcampaignperiod = 1 then mcbpexpendedbudget else 0 end) as double) / 100000.000000 as expended_budget,\n        cast(sum(case when (status <> 'active' or auctioneligible = 1) and islasthourofcampaignperiod = 1 then mcbpunderspend else 0 end) as double) / 100000.000000 as underspend\n from datalake.imhotep.adcampaignperformance acp\n inner join acplh\n on acp.adid = acplh.adid\n where hour >= '2024-02-02' and\n       hour < '2024-03-01' and\n       country = 'us' and\n       advertisertype not in ('Test', 'Indeed') and\n       (auctionEligible = 1 OR mcBPExpendedBudget > 0) and\n       adSubtype <> 'dradis_lifetime' and\n       bidoptadtype like 'source_monthly%' and\n       mcBPExpendedBudget + case when status <> 'active' OR auctionEligible = 1 then 1 else 0 end * mcBPUnderSpend > 0\n group by 1)\nselect *\nfrom acpprop\nlimit 1000\n",
  "queryTables" : [ "datalakehive.imhotep.adcampaignperformance", "datalakehive.imhotep.adcampaignperformance" ],
  "queryIndex" : 112,
  "runStartToQueryComplete" : 821
}, {
  "elapsedMillis" : 2278,
  "totalScheduledMillis" : 1723955,
  "cpuMillis" : 181988,
  "queuedMillis" : 1,
  "executeMillis" : 966,
  "getResultMillis" : 0,
  "iterateMillis" : 1344,
  "rows" : 555,
  "error" : null,
  "scannedBytes" : 10158681507,
  "query" : "WITH daily_data AS (\n    SELECT\n        date_trunc('hour', from_unixtime(lp.unixtime)) as date,\n        moderationApi, \n        moderationType, \n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 1 PRECEDING AND current row) AS block_count,\n\t\tSUM(COUNT(*)) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 1 PRECEDING AND current row) AS request_count,\n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) AS weekly_block_count,\n\t\tSUM(COUNT(*)) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) AS weekly_request_count\n    FROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.flagged IS NOT NULL\n        AND lp.metric = 'moderation-text'\n        AND unixtime BETWEEN imhotep_unixtime(timestamp '2024-10-24') AND imhotep_unixtime(timestamp '2024-10-30')\n        and True\n    GROUP BY\n        date_trunc('hour', from_unixtime(lp.unixtime)),\n        moderationApi, \n        moderationType \n),\nblock_rate AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        cast(request_count * 6 as double) / cast(1 * weekly_request_count as double) as relative_request_rate,\n        cast(block_count as double) / request_count as raw_block_rate,\n        -- We adjust the proportion estimates by adding z^2/2 successes and z^2/2 failures (z^2 obs total) to the counts.\n        -- This can be thought of as a Bayesian prior, or as a correction to the Normal approximation for rates close to 0 or 1.\n        -- For large values of request_count this converges to the raw proportion (block_rate ~ raw_block_rate).\n        -- Using z=3.0, in other words, we're going to require a \"3-sigma\" detection.\n        cast(block_count + 4.5 as double) / (request_count + 9.0) as block_rate, -- corrected/smoothed\n        cast(block_count as double) / (request_count + 9.0) as block_rate_zc, -- zero-centered corrected/smoothed rate (only adding to denominator)\n        cast(weekly_block_count + (6 * 4.5 / 1) as double) / (weekly_request_count + (6 * 9.0 / 1)) as  weekly_block_rate, -- corrected/smoothed\n        cast(weekly_block_count as double) / (weekly_request_count + (6 * 9.0 / 1)) as  weekly_block_rate_zc, -- corrected/smoothed        \n        cast(weekly_block_count as double) /  weekly_request_count as raw_weekly_block_rate,  \n        (cast(block_count + 4.5 as double) / (request_count + 9.0)) - (cast(weekly_block_count + (6 * 4.5 / 1) as double) / (weekly_request_count + (6 * 9.0 / 1))) as change,\n        sum(1.0) over (partition by moderationApi, moderationType ORDER BY date ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) as previous_dates_count\n    FROM\n        daily_data\n),\n\nblock_rate_change AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        request_count,\n\t\trelative_request_rate,        \n        weekly_request_count,\n        STDDEV(block_rate-weekly_block_rate) OVER (partition by moderationApi, moderationType ORDER BY date ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) AS stddev_obs,\n        SQRT((block_rate * (1.0 - block_rate) / request_count) + ((weekly_block_rate * (1.0 - weekly_block_rate) / weekly_request_count))) as stddev_approx,\n        raw_block_rate,  \n        block_rate,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        raw_weekly_block_rate,  \n        weekly_block_rate, -- corrected/smoothed\n        change,\n        case weekly_block_rate_zc\n           when 0 then 0\n           else (block_rate_zc - weekly_block_rate_zc) \n        end as change_zc,\n\t\tprevious_dates_count             \n    FROM\n        block_rate\n),\nconfidence_interval AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        stddev_obs,\n\t\tstddev_approx,\n        greatest(stddev_approx, stddev_obs) as stddev,\n        block_rate,\n        block_rate - 6 * greatest(stddev_approx, stddev_obs)  AS block_rate_lower_bound,\n        block_rate + 6 * greatest(stddev_approx, stddev_obs) AS block_rate_upper_bound,          \n        weekly_block_rate,\n\t\tweekly_request_count,\n\t\traw_block_rate,        \n        raw_weekly_block_rate,        \n        change,\n        change_zc,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        request_count,\n\t\trelative_request_rate,                \n        change - 6 * greatest(stddev_approx, stddev_obs) AS change_lower_bound,\n        change + 6 * greatest(stddev_approx, stddev_obs) AS change_upper_bound,\n        previous_dates_count,\n        row_number() OVER (partition by moderationApi, moderationType ORDER BY date) as row_n         \n    FROM\n        block_rate_change\n    --WHERE\n    --\tweekly_request_count > 100\n    --    and request_count > 100\n)\nSELECT\n    date,\n    moderationApi, \n    moderationType,\n    request_count,\n\trelative_request_rate,            \n    stddev_obs,\n    stddev_approx,\n    stddev,\n    block_rate,\n\tblock_rate_lower_bound,\n    block_rate_upper_bound,\n    weekly_block_rate,\n    weekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,    \nchange,\n    change / weekly_block_rate as relative_change,\n    change_zc / weekly_block_rate_zc as relative_change_zc,\n    change_zc,\n    block_rate_zc,\n    weekly_block_rate_zc,        \n    change_lower_bound,\n    change_upper_bound,\n    change_lower_bound * 1.0 / weekly_block_rate as relative_change_lower_bound,\n    change_upper_bound * 1.0 / weekly_block_rate as relative_change_upper_bound,\n    greatest(change_lower_bound / weekly_block_rate, 0) as relative_change_lower_bound_sig,\n    least(change_upper_bound / weekly_block_rate, 0) as relative_change_upper_bound_sig,     \n    IF((change_lower_bound > 0 or change_upper_bound<0) and (previous_dates_count > 6), 1, 0) as is_sig_change,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (date = (max(date) over ())) and (previous_dates_count > 6), 1, 0) as is_latest_date_sig_change,\n    change/stddev as z_score,\n    IF(date = (max(date) over ()), change/stddev, NULL) as latest_date_z_score, \n    max(date) over () as latest_data_date,\n    previous_dates_count            \nFROM\n    confidence_interval -- Note: return values for all dates unlike with the alerting query\nWHERE\n    (change/stddev) IS NOT NULL\n    and ((row_n % 1 = 0)  or (abs(change/stddev) > 6))\n    and previous_dates_count > (0.9 * 6)\nORDER BY\n    date DESC, moderationApi ASC, moderationType DESC",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 113,
  "runStartToQueryComplete" : 812
}, {
  "elapsedMillis" : 2473,
  "totalScheduledMillis" : 1366873,
  "cpuMillis" : 219217,
  "queuedMillis" : 0,
  "executeMillis" : 1395,
  "getResultMillis" : 0,
  "iterateMillis" : 1110,
  "rows" : 2425,
  "error" : null,
  "scannedBytes" : 10535652459,
  "query" : "WITH daily_data AS (\n    SELECT\n        date_trunc('hour', from_unixtime(lp.unixtime)) as date,\n        appName,\n        moderationApi, \n        moderationType, \n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 1 PRECEDING AND current row) AS block_count,\n\t\tSUM(COUNT(*)) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 1 PRECEDING AND current row) AS request_count,\n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) AS weekly_block_count,\n\t\tSUM(COUNT(*)) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('hour', from_unixtime(lp.unixtime)) ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) AS weekly_request_count\n    FROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.flagged IS NOT NULL\n        AND lp.metric = 'moderation-text'\n        AND unixtime BETWEEN imhotep_unixtime(timestamp '2024-10-24') AND imhotep_unixtime(timestamp '2024-10-30')\n        and True\n        -- see rate_change query for filters by appName etc.\n    GROUP BY\n        date_trunc('hour', from_unixtime(lp.unixtime)),\n\t\tappName,         \n        moderationApi, \n        moderationType \n),\nblock_rate AS (\n    SELECT\n        date,\n\t\tappName, \n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        cast(request_count * 6 as double) / cast(1 * weekly_request_count as double) as relative_request_rate,\n        cast(block_count as double) / request_count as raw_block_rate,\n        -- We adjust the proportion estimates by adding z^2/2 successes and z^2/2 failures (z^2 obs total) to the counts.\n        -- This can be thought of as a Bayesian prior, or as a correction to the Normal approximation for rates close to 0 or 1.\n        -- For large values of request_count this converges to the raw proportion (block_rate ~ raw_block_rate).\n        -- Using z=3.0, in other words, we're going to require a \"3-sigma\" detection.\n        cast(block_count + 4.5 as double) / (request_count + 9.0) as block_rate, -- corrected/smoothed\n        cast(block_count as double) / (request_count + 9.0) as block_rate_zc, -- zero-centered corrected/smoothed rate (only adding to denominator)\n        cast(weekly_block_count + (6 * 4.5 / 1) as double) / (weekly_request_count + (6 * 9.0 / 1)) as  weekly_block_rate, -- corrected/smoothed\n        cast(weekly_block_count as double) / (weekly_request_count + (6 * 9.0 / 1)) as  weekly_block_rate_zc, -- corrected/smoothed        \n        cast(weekly_block_count as double) /  weekly_request_count as raw_weekly_block_rate,  \n        (cast(block_count + 4.5 as double) / (request_count + 9.0)) - (cast(weekly_block_count + (6 * 4.5 / 1) as double) / (weekly_request_count + (6 * 9.0 / 1))) as change,\n        sum(1.0) over (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) as previous_dates_count\n    FROM\n        daily_data\n),\n\nblock_rate_change AS (\n    SELECT\n        date,\n\t\tappName,         \n        moderationApi, \n        moderationType,\n        request_count,\n\t\trelative_request_rate,        \n        weekly_request_count,\n        STDDEV(block_rate-weekly_block_rate) OVER (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 6 + 1 PRECEDING AND 1 PRECEDING) AS stddev_obs,\n        SQRT((block_rate * (1.0 - block_rate) / request_count) + ((weekly_block_rate * (1.0 - weekly_block_rate) / weekly_request_count))) as stddev_approx,\n        raw_block_rate,  \n        block_rate,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        raw_weekly_block_rate,  \n        weekly_block_rate, -- corrected/smoothed\n        change,\n        case weekly_block_rate_zc\n           when 0 then 0\n           else (block_rate_zc - weekly_block_rate_zc) \n        end as change_zc,\n\t\tprevious_dates_count        \n    FROM\n        block_rate\n),\nconfidence_interval AS (\n    SELECT\n        date,\n\t\tappName,         \n        moderationApi, \n        moderationType,\n        stddev_obs,\n\t\tstddev_approx,\n        greatest(stddev_approx, stddev_obs) as stddev,\n        block_rate,\n        block_rate - 6 * greatest(stddev_approx, stddev_obs)  AS block_rate_lower_bound,\n        block_rate + 6 * greatest(stddev_approx, stddev_obs) AS block_rate_upper_bound,          \n        weekly_block_rate,\n\t\tweekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,        \n        change,\n        change_zc,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        request_count,\n\t\trelative_request_rate,                \n        change - 6 * greatest(stddev_approx, stddev_obs) AS change_lower_bound,\n        change + 6 * greatest(stddev_approx, stddev_obs) AS change_upper_bound,\n        previous_dates_count,\n        row_number() OVER (partition by moderationApi, moderationType ORDER BY date) as row_n \n    FROM\n        block_rate_change\n    --WHERE\n    --\tweekly_request_count > 100\n    --    and request_count > 100\n)\nSELECT\n    date,\n\tappName,     \n    moderationApi, \n    moderationType,\n    request_count,\n\trelative_request_rate,            \n    stddev_obs,\n    stddev_approx,\n    stddev,\n    block_rate,\n\tblock_rate_lower_bound,\n    block_rate_upper_bound,\n    weekly_block_rate,\n    weekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,    \n    change,\n    change / weekly_block_rate as relative_change,\n    change_zc / weekly_block_rate_zc as relative_change_zc,\n    change_zc,\n    block_rate_zc,\n    weekly_block_rate_zc,\n    \n    change_lower_bound,\n    change_upper_bound,\n    change_lower_bound * 1.0 / weekly_block_rate as relative_change_lower_bound,\n    change_upper_bound * 1.0 / weekly_block_rate as relative_change_upper_bound,\n    greatest(change_lower_bound / weekly_block_rate, 0) as relative_change_lower_bound_sig,\n    least(change_upper_bound / weekly_block_rate, 0) as relative_change_upper_bound_sig,     \n    IF((change_lower_bound > 0 or change_upper_bound<0) and (previous_dates_count > 6), 1, 0) as is_sig_change,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (date = (max(date) over ())) and (previous_dates_count > 6), 1, 0) as is_latest_date_sig_change,\n    change/stddev as z_score,\n    IF(date = (max(date) over ()), change/stddev, NULL) as latest_date_z_score, \n    max(date) over () as latest_data_date,\n    previous_dates_count            \nFROM\n    confidence_interval -- Note: return values for all dates unlike with the alerting query\nWHERE\n    (change/stddev) IS NOT NULL\n    and ((row_n % 1 = 0)  or (abs(change/stddev) > 6))\n    and previous_dates_count > (0.9 * 6)\nORDER BY\n    date DESC, moderationApi ASC, moderationType DESC",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 114,
  "runStartToQueryComplete" : 812
}, {
  "elapsedMillis" : 99959,
  "totalScheduledMillis" : 63806625,
  "cpuMillis" : 5823019,
  "queuedMillis" : 0,
  "executeMillis" : 78323,
  "getResultMillis" : 0,
  "iterateMillis" : 21659,
  "rows" : 2,
  "error" : null,
  "scannedBytes" : 241433659102,
  "query" : "WITH experiment_data AS (\n\tSELECT \n    \tCASE WHEN ARRAYS_OVERLAP(ndxgrp, \n            ARRAY['#b15:idxmatchingcontrolplane_e275','#B15:idxmatchingcontrolplane_e275']) \n            THEN 'test' ELSE 'control' END AS _group, \n        q, jobid\n    FROM organic -- TABLESAMPLE BERNOULLI (10) -- sampling rate\n    WHERE \n    \tunixtime >= imhotep_unixtime('2024-10-15') AND unixtime < imhotep_unixtime('2024-11-12') -- test start date & end date\n        AND country = 'ca'\n        AND ARRAYS_OVERLAP(ndxgrp, \n        \tARRAY['#b15:idxmatchingcontrolplane_e274','#B15:idxmatchingcontrolplane_e274',\n            \t  '#b15:idxmatchingcontrolplane_e275','#B15:idxmatchingcontrolplane_e275'])\n)\n\nSELECT \n\t_group, \n    COUNT_IF(answer='No') as bad_matches, \n    COUNT() AS all_labels, \n    COUNT_IF(answer='No') / CAST(COUNT() AS DOUBLE) AS BMR\nFROM jobtoqueryrelevance\nINNER JOIN experiment_data ON\n\tjobtoqueryrelevance.query = experiment_data.q\n    AND jobtoqueryrelevance.jobid = experiment_data.jobid\nWHERE \n\tjobtoqueryrelevance.unixtime >= imhotep_unixtime('2024-01-01') AND jobtoqueryrelevance.unixtime < imhotep_unixtime('2024-11-12')\n\tAND jobtoqueryrelevance.country='CA'\nGROUP BY _group",
  "queryTables" : [ "skipperhive.imhotep.jobtoqueryrelevance", "skipperhive.imhotep.organic" ],
  "queryIndex" : 115,
  "runStartToQueryComplete" : 912
}, {
  "elapsedMillis" : 11929,
  "totalScheduledMillis" : 4159997,
  "cpuMillis" : 1686995,
  "queuedMillis" : 0,
  "executeMillis" : 7519,
  "getResultMillis" : 0,
  "iterateMillis" : 4465,
  "rows" : 48047,
  "error" : null,
  "scannedBytes" : 34905623097,
  "query" : "with jobs as (SELECT coalesce(parent_company_id, job_source_id+1000000) as parent_company_id \n, coalesce(max(parent_company_name), max(job_source_name)) as parent_company_name   \n, min(job_source_id) as job_source_id\n, count(distinct agg_job_id) as jobs_l30days \n, sum(organic_apply_starts) as orgAS_l30days \n\nFROM datalake.imhotep.jobactivitymetrics j\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today')\nand job_country_code = 'US' and is_job_searchable > 0 \n--and parent_company_id is not null \nand advertiser_type not in ('Test', 'Indeed')\ngroup by 1)\n\n, rev as (select parent_company_id \n, sum(net_revenue_cents)/100 as spend_lyear \nFROM datalake.imhotep.grdm j \nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1y') AND IMHOTEP_UNIXTIME('today') \ngroup by 1) \n\n, together as (select jobs.* \n, coalesce(spend_lyear, 0) as spend_lyear \n, coalesce(last_any_products, cast('2000-01-01' as date)) as last_revenue_date  -- if no last revenue date, then say they last spend in 2000 \n, date_diff('day', coalesce(last_any_products, cast('2000-01-01' as date)), CURRENT_DATE) as days_since_last_spend \nfrom jobs \nleft join rev on rev.parent_company_id = jobs.parent_company_id \nleft join datalake.core.product_analytics_fct_first_last_activity_dates_parent f \n\ton f.parent_company_id = jobs.parent_company_id\n--where jobs_l30days > 100    \n)\n, together_ordered as (select *, \nntile(10) over (order by jobs_l30days desc) as jobs_ntile -- 1 is most jobs \n, ntile(10) over (order by spend_lyear asc) as spend_ntile -- 1 is lowest spend \n, ntile(10) over (order by days_since_last_spend desc) as days_since_last_spend_ntile -- 1 is never spender\nfrom together )\n\n, together_ordered_fixed as (select parent_company_id  \n, job_source_id\n, parent_company_name \n, orgAS_l30days \n, jobs_l30days\n, days_since_last_spend\n, spend_lyear\n, jobs_ntile \n, case when spend_lyear <= 0 then 1 else spend_ntile end as spend_ntile \n, case when days_since_last_spend > 9000 then 1 else days_since_last_spend_ntile end as days_since_last_spend_ntile\n\nfrom together_ordered )\n\n, rfm as (select * \n, jobs_ntile + spend_ntile + days_since_last_spend_ntile as rfm_unweighted \n, 1*jobs_ntile + 100*spend_ntile + 10*days_since_last_spend_ntile as rfm_weighted -- the higher this number the bigger the penalty\nfrom together_ordered_fixed\norder by 1*jobs_ntile + 100*spend_ntile + 10*days_since_last_spend_ntile desc\n)\n\n, jobs_first_hour as (SELECT sourceid\n, jobid  \n, max(normtitle) as normtitle \n, coalesce(max(jlmsa), 'rural') as msa \n, sum(coalesce(applystarts,0)) as applystarts\n\nFROM datalake.imhotep.searchimpressions j\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today')\nand country in ('us', 'US') and sponsored = 0 and jobageminutes <= 60\ngroup by 1, 2)\n\n, jobs_first_hour_ordered as (SELECT * \n, ntile(10) over (order by applystarts asc) as job_ntile\nFROM jobs_first_hour)\n\n\n, subset as (select case when rfm_weighted > 1000 then 'A_1000+ Biggest Penalty'\nwhen rfm_weighted > 900 then 'B_900'\nwhen rfm_weighted > 800 then 'C_800'\nwhen rfm_weighted > 700 then 'D_700'\nwhen rfm_weighted > 600 then 'E_600'\nwhen rfm_weighted > 500 then 'F_500'\nwhen rfm_weighted > 400 then 'G_400'\nwhen rfm_weighted > 300 then 'H_300'\nwhen rfm_weighted > 200 then 'I_200' else 'J_100 Lowest Penalty' end as rfm_segment \n, rfm.* \n, j.* \n, row_number() over (partition by job_source_id order by applystarts desc) as rn \n\nfrom rfm  \nleft join jobs_first_hour_ordered j on j.sourceid = rfm.job_source_id \nwhere rfm_weighted > 1000 or rfm_weighted < 200\nand j.job_ntile = 10 )\n\nselect * from subset where rn <= 5\n\n\n\n",
  "queryTables" : [ "datalakehive.core.product_analytics_fct_first_last_activity_dates_parent", "datalakehive.imhotep.grdm", "datalakehive.imhotep.jobactivitymetrics", "datalakehive.imhotep.searchimpressions" ],
  "queryIndex" : 116,
  "runStartToQueryComplete" : 824
}, {
  "elapsedMillis" : 8951,
  "totalScheduledMillis" : 30468301,
  "cpuMillis" : 7809167,
  "queuedMillis" : 1,
  "executeMillis" : 1138,
  "getResultMillis" : 0,
  "iterateMillis" : 7834,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 38376039821,
  "query" : "SELECT _country, count(distinct(accountid)) as count_js, _featurebuildername, currency\nFROM datalake.mdp_offline_feature_store.jobseeker_feature_mdp_inferred_jobseeker_pay_feature_accountid\nwhere minimumyearlypayminor_v0>0\nand eventtime > TIMESTAMP '2024-05-01 00:00:00' \n    AND eventtime < TIMESTAMP '2024-08-28 00:00:00'\ngroup by _country, _featurebuildername, currency\n",
  "queryTables" : [ "datalake.mdp_offline_feature_store.jobseeker_feature_mdp_inferred_jobseeker_pay_feature_accountid" ],
  "queryIndex" : 117,
  "runStartToQueryComplete" : 821
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 10636,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_173523_00141_vjepj): Division by zero",
  "scannedBytes" : 0,
  "query" : "with \n-- Pull all conversations initiated by employers \ndremrToConvs as (\nselect  unixtime, advertiserId,  eventId, conversationId\n  \t\t, case when starts_with(subEventType, 'INBOUND_EMAIL') then 1 else 0 end as is_email\n        , case when starts_with(source, 'Dremr')  then 1 else 0 end as is_Dremr  \n  from conversationEvents \nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('56d') and IMHOTEP_UNIXTIME('28d')\n  and context = 'APPLICATION'\n  and ownerRole != 'JOBSEEKER'\n  and cast(isInitialMessage as int)=1 -- Look at initial messages only, as a proxy for when a conversation is created\ngroup by 1,2,3,4,5,6\n\n              )\n              \n-- Employers with any ATS Integration\n,atsEmployers as (\n\nselect advertiserId  \n  from partnerEmployerMap\n where unixtime BETWEEN IMHOTEP_UNIXTIME('56d') and IMHOTEP_UNIXTIME('28d')\n   and confidenceScore >0\ngroup by  1 \n\n                )\n\n-- data about candidate sync (specify Indeed Apply Sync and One Host ATS Transfer where applicable)\n, atsSync as (\n\nselect advertiser_id, connection_type as ats \n      , agg_job_id\n      ,concat('DRADIS/', cast(advertiser_id as varchar), '-', cast(dradis_candidate_id as varchar)) as conversationId\n\n  from acdcTransferLifecycle\n where unixtime BETWEEN IMHOTEP_UNIXTIME('56d') and IMHOTEP_UNIXTIME('28d')\n   and pipeline_internal_type='INTERNAL_LOCATION_TYPE_EMPLOYER_JOB'\n   and connection_type!= 'h2ia'\n   and driver_type not in ('pipeline-csul', 'pipeline-csul-historical')\ngroup by 1,2,3,4\n            \n            )\n -- Dradis bulk export           \n,dradisBulkExport as (    \t\n\n        SELECT advertiserId\n\t\t\t  ,concat('DRADIS/', cast(advertiserId as varchar), '-', cast(candidateId as varchar)) as conversationId\n        FROM datalake.imhotep.dradisCandidateExportRequest\n        CROSS JOIN UNNEST(split(candidateIds, ',')) as t (candidateId)\n        WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('56d') and IMHOTEP_UNIXTIME('28d')\n       group by 1,2\n  )     \n\n\n-- advertiser segment details\n,advertiserDetails as ( \n\nselect advertiser_id\n   , max_by(parent_company_size_segment, unixtime) as parent_company_size_segment\n   , max_by(type, unixtime) as type\n   , max_by(billing_country, unixtime) as billing_country\n  from  daily_employer2 \n  where unixtime BETWEEN IMHOTEP_UNIXTIME('56d') and IMHOTEP_UNIXTIME('28d')\ngroup by 1\n\n   )\n\n\n -- Aggregate convo counts per query\n, empDataAgg as (\n\n\n select \n\tdremrToConvs.advertiserId\n   ,case when atsEmployers.advertiserId is not null then 1 else 0 end as isAtsIntegrated   \n   ,count(*) as allConvos\n   ,count_if(is_Dremr=1) as dremrConvos\n   --,count_if(is_Dremr=1 and is_email=1) as dremrEmailConvos\n   ,count_if(is_Dremr=1 and atsSync.conversationId is not null) as dremrAtsSyncAll\n   ,count_if(is_Dremr=1 and dradisBulkExport.conversationId is not null) as dremrDradisBulkExport\n   ,count_if(is_Dremr=1 and (atsSync.conversationId is not null or dradisBulkExport.conversationId is not null)) as dremrAtsSyncOrBulkExport\n   \n   \n  from dremrToConvs \n  left join atsEmployers on dremrToConvs.advertiserId=atsEmployers.advertiserId\n  left join atsSync on dremrToConvs.advertiserId=atsSync.advertiser_id\n        and dremrToConvs.conversationId=atsSync.conversationId\n  left join dradisBulkExport on dremrToConvs.advertiserId=dradisBulkExport.advertiserId\n        and dremrToConvs.conversationId=dradisBulkExport.conversationId\n    \n  group by 1,2\n                )\n                \n \n,segConvos as (\nselect\n    ce.advertiserId\n   ,eventId\n   ,ce.encryptedConversationId\n   ,(isImported = '1') as isEmail\nFROM conversationEvents ce\njoin convsConversationCreation cc on  ce.encryptedConversationId = cc.encryptedConversationId \n\nWHERE ce.unixtime BETWEEN IMHOTEP_UNIXTIME('209d') AND IMHOTEP_UNIXTIME('28d')\nand   cc.unixtime BETWEEN IMHOTEP_UNIXTIME('223d') AND IMHOTEP_UNIXTIME('28d')\nand ((ce.unixtime - cc.unixtime) < (60*60*24*14))\nand ce.context='APPLICATION'\nand ce.ownerRole != 'JOBSEEKER'\nGROUP BY 1,2,3,4\n)\n\n\n, segConvosAgg as (\n\nselect advertiserId\n      ,count(*) as totalMessages\n      ,count_if(isEmail) as emailMessages\n      ,count_if(NOT isEmail) as onPlatformMessages \n  from segConvos\ngroup by 1 \n\n\t\t)\n\n,segConvosAgg2 as (\n\n select advertiserId, case when emailMessages> 0 and onPlatformMessages=0 then 'Email Only'\n\t\t\t when  emailMessages=0 and onPlatformMessages>0 then 'Chat Only'\n\t\t\t when  emailMessages>0 and onPlatformMessages>0 then 'Email & Chat'\n             end as usageType\n\n  from segConvosAgg\n                 )\n\n\nselect \n        advertiserDetails.parent_company_size_segment as size\n       ,segConvosAgg2.usageType\n       ,count() as empCount\n       , 100.0*count()/sum(count()) over () pctEmpCountOfAll\n    --  ,count_if(isAtsIntegrated=1) as empCountAtsIntegrated\n      ,100.00* count_if(isAtsIntegrated=1)/count(*) as empPctAtsIntegratedWithinSegment\n      ,sum(allConvos) as ttlConvosInitiated\n\t  ,sum(DremrConvos) as DremrConvosInitiated\n  --    ,sum(dremrConvos) as ttlDremrConvosInitiated\n      ,100.00* sum(dremrConvos)/sum(allConvos) as dremrConvosPctOfAllInitiated\n      \n      ,100.00* sum(dremrAtsSyncAll)/sum(dremrConvos) as pctOfDremrConvosAtsSyncAll\n      ,100.00* sum(dremrDradisBulkExport)/sum(dremrConvos) as pctOfDremrConvosDradisBulkExport\n      ,100.00* sum(dremrAtsSyncOrBulkExport)/sum(dremrConvos) as pctOfDremrConvosAtsSyncOrBulkExport\n     \n from empDataAgg\nleft join advertiserDetails on empDataAgg.advertiserId=advertiserDetails.advertiser_id\nleft join segConvosAgg2     on empDataAgg.advertiserId=segConvosAgg2.advertiserId\nwhere  parent_company_size_segment in ('L', 'XL') and usageType is not null\ngroup by 1,2\n                \n\n                \n\n              \n              \n              ",
  "queryTables" : [ "datalakehive.imhotep.dradiscandidateexportrequest", "skipperhive.imhotep.acdctransferlifecycle", "skipperhive.imhotep.conversationevents", "skipperhive.imhotep.conversationevents", "skipperhive.imhotep.convsconversationcreation", "skipperhive.imhotep.daily_employer2", "skipperhive.imhotep.partneremployermap" ],
  "queryIndex" : 118,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 7629,
  "totalScheduledMillis" : 5527717,
  "cpuMillis" : 2550316,
  "queuedMillis" : 1,
  "executeMillis" : 2501,
  "getResultMillis" : 0,
  "iterateMillis" : 5167,
  "rows" : 3,
  "error" : null,
  "scannedBytes" : 80407269872,
  "query" : "with convos as (\nselect\n    ce.advertiserId\n   ,eventId\n   ,ce.encryptedConversationId\n   ,(isImported = '1') as isEmail\nFROM conversationEvents ce\njoin convsConversationCreation cc on  ce.encryptedConversationId = cc.encryptedConversationId \n\nWHERE ce.unixtime BETWEEN IMHOTEP_UNIXTIME('181d') AND IMHOTEP_UNIXTIME('1d')\nand   cc.unixtime BETWEEN IMHOTEP_UNIXTIME('195d') AND IMHOTEP_UNIXTIME('1d')\nand ((ce.unixtime - cc.unixtime) < (60*60*24*14))\nand ce.context='APPLICATION'\nand ce.ownerRole != 'JOBSEEKER'\nGROUP BY 1,2,3,4\n)\n\n\n, agg as (\n\nselect advertiserId\n      ,count(*) as totalMessages\n      ,count_if(isEmail) as emailMessages\n      ,count_if(NOT isEmail) as onPlatformMessages \n  from convos\ngroup by 1 \n\n\t\t)\n        \n,advertiserDetails as ( \n\nselect advertiser_id\n   , max_by(parent_company_size_segment, unixtime) as parent_company_size_segment\n   , max_by(type, unixtime) as type\n   , max_by(billing_country, unixtime) as billing_country\n  from  daily_employer2 \n  where unixtime BETWEEN IMHOTEP_UNIXTIME('2d') and IMHOTEP_UNIXTIME('1d')\ngroup by 1\n\n   )\n        \n\n select \n            case when emailMessages> 0 and onPlatformMessages=0 then 'Email Only'\n\t\t\t when  emailMessages=0 and onPlatformMessages>0 then 'Chat Only'\n\t\t\t when  emailMessages>0 and onPlatformMessages>0 then 'Email & Chat'\n             end as usageType\n        ,count(distinct advertiserId) as empCountDistinct\n        ,100.0*count(distinct advertiserId)/sum(count(distinct advertiserId)) over() as empCountDistinct\n        ,count() as empCount\n        ,100.0*count()/sum(count()) over() as pctEmpCount\n\n  from agg\nleft join advertiserDetails on agg.advertiserId=advertiserDetails.advertiser_id\nwhere parent_company_size_segment='S'\ngroup by 1\norder by 1\n        \n\n\n\n\n",
  "queryTables" : [ "skipperhive.imhotep.conversationevents", "skipperhive.imhotep.convsconversationcreation", "skipperhive.imhotep.daily_employer2" ],
  "queryIndex" : 119,
  "runStartToQueryComplete" : 822
}, {
  "elapsedMillis" : 1013,
  "totalScheduledMillis" : 3424,
  "cpuMillis" : 377,
  "queuedMillis" : 0,
  "executeMillis" : 825,
  "getResultMillis" : 0,
  "iterateMillis" : 274,
  "rows" : 100,
  "error" : null,
  "scannedBytes" : 1609485,
  "query" : "  SELECT \n  \tadvertiserid as advertiser_id\n    , t.permission as product_perm\n    , accountid as account_id\n  FROM \n  \tdatalake.imhotep.advertiserusers  \n  \tCROSS JOIN UNNEST (permissionSetNames) as T (permission)\n  WHERE \n  \tunixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n  GROUP BY\n    advertiserid \n    , t.permission \n    , accountid\n\nLIMIT 100",
  "queryTables" : [ "datalakehive.imhotep.advertiserusers" ],
  "queryIndex" : 120,
  "runStartToQueryComplete" : 824
}, {
  "elapsedMillis" : 46297,
  "totalScheduledMillis" : 73200631,
  "cpuMillis" : 15829140,
  "queuedMillis" : 0,
  "executeMillis" : 15891,
  "getResultMillis" : 0,
  "iterateMillis" : 30443,
  "rows" : 136,
  "error" : null,
  "scannedBytes" : 543662533351,
  "query" : "WITH most_recent_starts AS (\n    SELECT appid, env, runId, ROW_NUMBER() OVER(PARTITION BY appid, env ORDER BY unixtime DESC) AS startup_num\n    FROM javaruntimeversions\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('4y') AND IMHOTEP_UNIXTIME('today')\n    GROUP BY appid, env, runId, unixtime\n), most_recent_runs AS (\n    SELECT mrs.appid, mrs.env, jrv.unixtime AS most_recent_start_unixtime, jrv.osimage, jrv.osimageversionid, jrv.runid AS runid \n    FROM most_recent_starts mrs\n    LEFT JOIN javaruntimeversions jrv ON mrs.runId=jrv.runId AND mrs.startup_num=1\n    WHERE jrv.unixtime BETWEEN IMHOTEP_UNIXTIME('4y') AND IMHOTEP_UNIXTIME('today')\n), service_data AS (\n    SELECT \n        mrr.appid, mrr.env, srs.applicationname, srs.applicationtype, srs.runtimetype, srs.teamid, \n        srs.lifecycle, srs.state, srs.git_project_url,\n        FROM_UNIXTIME(mrr.most_recent_start_unixtime) AS most_recent_start_time, mrr.runid, mrr.osimage, mrr.osimageversionid\n    FROM most_recent_runs mrr\n    LEFT JOIN serviceregistrysnapshots srs ON mrr.appid=srs.applicationid\n    WHERE srs.unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n), scoped_data AS (\n\tSELECT * FROM service_data sd WHERE sd.lifecycle!='UNAVAILABLE'\n), daemonizer_data AS (\n    SELECT \n        sd.*,\n        jlv.libversion AS daemonizer_version\n    FROM scoped_data sd \n    INNER JOIN javalibversions jlv ON jlv.runid=sd.runid\n    WHERE \n        jlv.unixtime BETWEEN IMHOTEP_UNIXTIME('4y') AND IMHOTEP_UNIXTIME('today')\n        AND jlv.lib='indeed:daemonizer'\n)\n\nSELECT sd.*, dd.daemonizer_version \nFROM scoped_data sd\nLEFT JOIN daemonizer_data dd ON sd.runid=dd.runid\nWHERE dd.teamid LIKE '%'",
  "queryTables" : [ "skipperhive.imhotep.javalibversions", "skipperhive.imhotep.javaruntimeversions", "skipperhive.imhotep.javaruntimeversions", "skipperhive.imhotep.javaruntimeversions", "skipperhive.imhotep.javaruntimeversions", "skipperhive.imhotep.serviceregistrysnapshots", "skipperhive.imhotep.serviceregistrysnapshots" ],
  "queryIndex" : 121,
  "runStartToQueryComplete" : 869
}, {
  "elapsedMillis" : 44687,
  "totalScheduledMillis" : 73187587,
  "cpuMillis" : 15852072,
  "queuedMillis" : 0,
  "executeMillis" : 13598,
  "getResultMillis" : 0,
  "iterateMillis" : 31124,
  "rows" : 8048,
  "error" : null,
  "scannedBytes" : 543662390025,
  "query" : "WITH most_recent_starts AS (\n    SELECT appid, env, runId, ROW_NUMBER() OVER(PARTITION BY appid, env ORDER BY unixtime DESC) AS startup_num\n    FROM javaruntimeversions\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('4y') AND IMHOTEP_UNIXTIME('today')\n    GROUP BY appid, env, runId, unixtime\n), most_recent_runs AS (\n    SELECT mrs.appid, mrs.env, jrv.unixtime AS most_recent_start_unixtime, jrv.osimage, jrv.osimageversionid, jrv.runid AS runid \n    FROM most_recent_starts mrs\n    LEFT JOIN javaruntimeversions jrv ON mrs.runId=jrv.runId AND mrs.startup_num=1\n    WHERE jrv.unixtime BETWEEN IMHOTEP_UNIXTIME('4y') AND IMHOTEP_UNIXTIME('today')\n), service_data AS (\n    SELECT \n        mrr.appid, mrr.env, srs.applicationname, srs.applicationtype, srs.runtimetype, srs.teamid, \n        srs.lifecycle, srs.state, srs.git_project_url,\n        FROM_UNIXTIME(mrr.most_recent_start_unixtime) AS most_recent_start_time, mrr.runid, mrr.osimage, mrr.osimageversionid\n    FROM most_recent_runs mrr\n    LEFT JOIN serviceregistrysnapshots srs ON mrr.appid=srs.applicationid\n    WHERE srs.unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n), scoped_data AS (\n\tSELECT * FROM service_data sd WHERE sd.lifecycle!='UNAVAILABLE'\n), boot_data AS (\n    SELECT \n        sd.*,\n        jlv.libversion AS springboot_version\n    FROM scoped_data sd \n    INNER JOIN javalibversions jlv ON jlv.runid=sd.runid\n    WHERE \n        jlv.unixtime BETWEEN IMHOTEP_UNIXTIME('4y') AND IMHOTEP_UNIXTIME('today')\n        AND jlv.lib='org.springframework.boot:spring-boot'\n)\n\nSELECT sd.*, bd.springboot_version FROM scoped_data sd\nLEFT JOIN boot_data bd ON sd.runid=bd.runid",
  "queryTables" : [ "skipperhive.imhotep.javalibversions", "skipperhive.imhotep.javaruntimeversions", "skipperhive.imhotep.javaruntimeversions", "skipperhive.imhotep.javaruntimeversions", "skipperhive.imhotep.javaruntimeversions", "skipperhive.imhotep.serviceregistrysnapshots", "skipperhive.imhotep.serviceregistrysnapshots" ],
  "queryIndex" : 122,
  "runStartToQueryComplete" : 869
}, {
  "elapsedMillis" : 8909,
  "totalScheduledMillis" : 1983926,
  "cpuMillis" : 251339,
  "queuedMillis" : 1,
  "executeMillis" : 1198,
  "getResultMillis" : 0,
  "iterateMillis" : 7738,
  "rows" : 655,
  "error" : null,
  "scannedBytes" : 8790235745,
  "query" : "WITH daily_data AS (\n    SELECT\n        date_trunc('minute', from_unixtime(lp.unixtime)) as date,\n        moderationApi, \n        moderationType, \n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 30 PRECEDING AND current row) AS block_count,\n\t\tSUM(COUNT(*)) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 30 PRECEDING AND current row) AS request_count,\n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS weekly_block_count,\n\t\tSUM(COUNT(*)) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS weekly_request_count\n    FROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.flagged IS NOT NULL\n        AND lp.metric = 'moderation-text'\n        AND unixtime BETWEEN imhotep_unixtime(timestamp '2024-10-24') AND imhotep_unixtime(timestamp '2024-10-29')\n        and appName='ContentGenerationService' and moderationApi='openAIModerations' and moderationType='input'\n    GROUP BY\n        date_trunc('minute', from_unixtime(lp.unixtime)),\n        moderationApi, \n        moderationType \n),\nblock_rate AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        cast(request_count * 240 as double) / cast(30 * weekly_request_count as double) as relative_request_rate,\n        cast(block_count as double) / request_count as raw_block_rate,\n        -- We adjust the proportion estimates by adding z^2/2 successes and z^2/2 failures (z^2 obs total) to the counts.\n        -- This can be thought of as a Bayesian prior, or as a correction to the Normal approximation for rates close to 0 or 1.\n        -- For large values of request_count this converges to the raw proportion (block_rate ~ raw_block_rate).\n        -- Using z=3.0, in other words, we're going to require a \"3-sigma\" detection.\n        cast(block_count + 4.5 as double) / (request_count + 9.0) as block_rate, -- corrected/smoothed\n        cast(block_count as double) / (request_count + 9.0) as block_rate_zc, -- zero-centered corrected/smoothed rate (only adding to denominator)\n        cast(weekly_block_count + (240 * 4.5 / 30) as double) / (weekly_request_count + (240 * 9.0 / 30)) as  weekly_block_rate, -- corrected/smoothed\n        cast(weekly_block_count as double) / (weekly_request_count + (240 * 9.0 / 30)) as  weekly_block_rate_zc, -- corrected/smoothed        \n        cast(weekly_block_count as double) /  weekly_request_count as raw_weekly_block_rate,  \n        (cast(block_count + 4.5 as double) / (request_count + 9.0)) - (cast(weekly_block_count + (240 * 4.5 / 30) as double) / (weekly_request_count + (240 * 9.0 / 30))) as change,\n        sum(1.0) over (partition by moderationApi, moderationType ORDER BY date ROWS BETWEEN 240 + 30 PRECEDING AND 1 PRECEDING) as previous_dates_count\n    FROM\n        daily_data\n),\n\nblock_rate_change AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        request_count,\n\t\trelative_request_rate,        \n        weekly_request_count,\n        STDDEV(block_rate-weekly_block_rate) OVER (partition by moderationApi, moderationType ORDER BY date ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS stddev_obs,\n        SQRT((block_rate * (1.0 - block_rate) / request_count) + ((weekly_block_rate * (1.0 - weekly_block_rate) / weekly_request_count))) as stddev_approx,\n        raw_block_rate,  \n        block_rate,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        raw_weekly_block_rate,  \n        weekly_block_rate, -- corrected/smoothed\n        change,\n        case weekly_block_rate_zc\n           when 0 then 0\n           else (block_rate_zc - weekly_block_rate_zc) \n        end as change_zc,\n\t\tprevious_dates_count             \n    FROM\n        block_rate\n),\nconfidence_interval AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        stddev_obs,\n\t\tstddev_approx,\n        greatest(stddev_approx, stddev_obs) as stddev,\n        block_rate,\n        block_rate - 6 * greatest(stddev_approx, stddev_obs)  AS block_rate_lower_bound,\n        block_rate + 6 * greatest(stddev_approx, stddev_obs) AS block_rate_upper_bound,          \n        weekly_block_rate,\n\t\tweekly_request_count,\n\t\traw_block_rate,        \n        raw_weekly_block_rate,        \n        change,\n        change_zc,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        request_count,\n\t\trelative_request_rate,                \n        change - 6 * greatest(stddev_approx, stddev_obs) AS change_lower_bound,\n        change + 6 * greatest(stddev_approx, stddev_obs) AS change_upper_bound,\n        previous_dates_count,\n        row_number() OVER (partition by moderationApi, moderationType ORDER BY date) as row_n         \n    FROM\n        block_rate_change\n    --WHERE\n    --\tweekly_request_count > 100\n    --    and request_count > 100\n)\nSELECT\n    date,\n    moderationApi, \n    moderationType,\n    request_count,\n\trelative_request_rate,            \n    stddev_obs,\n    stddev_approx,\n    stddev,\n    block_rate,\n\tblock_rate_lower_bound,\n    block_rate_upper_bound,\n    weekly_block_rate,\n    weekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,    \nchange,\n    change / weekly_block_rate as relative_change,\n    change_zc / weekly_block_rate_zc as relative_change_zc,\n    change_zc,\n    block_rate_zc,\n    weekly_block_rate_zc,        \n    change_lower_bound,\n    change_upper_bound,\n    change_lower_bound * 1.0 / weekly_block_rate as relative_change_lower_bound,\n    change_upper_bound * 1.0 / weekly_block_rate as relative_change_upper_bound,\n    greatest(change_lower_bound / weekly_block_rate, 0) as relative_change_lower_bound_sig,\n    least(change_upper_bound / weekly_block_rate, 0) as relative_change_upper_bound_sig,     \n    IF((change_lower_bound > 0 or change_upper_bound<0) and (previous_dates_count > 240), 1, 0) as is_sig_change,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (date = (max(date) over ())) and (previous_dates_count > 6), 1, 0) as is_latest_date_sig_change,\n    change/stddev as z_score,\n    IF(date = (max(date) over ()), change/stddev, NULL) as latest_date_z_score, \n    max(date) over () as latest_data_date,\n    previous_dates_count            \nFROM\n    confidence_interval -- Note: return values for all dates unlike with the alerting query\nWHERE\n    (change/stddev) IS NOT NULL\n    and ((row_n % 15 = 0)  or (abs(change/stddev) > 6))\n    and previous_dates_count > (0.9 * 240)\nORDER BY\n    date DESC, moderationApi ASC, moderationType DESC",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 123,
  "runStartToQueryComplete" : 848
}, {
  "elapsedMillis" : 28982,
  "totalScheduledMillis" : 85776718,
  "cpuMillis" : 21044746,
  "queuedMillis" : 0,
  "executeMillis" : 1791,
  "getResultMillis" : 0,
  "iterateMillis" : 27236,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 879674675134,
  "query" : "WITH\n\ninterview_event as(\nselect distinct advertiser_id from datalake.imhotep.employer_user_actions_spark\nwhere hour >= cast(date_add('day',-7,CURRENT_DATE) as varchar)\nAND element = 'schedule-interview-modal-create-new-interview'\nAND custom_action_type = 'click'),\n\nsbs_reps as(\nselect distinct ldap\nfrom datalake.imhotep.indeedemployeesnapshot\nwhere sup_org_name like '%SBS%'\nand day >= cast(date_add('day',-7,CURRENT_DATE) as varchar)\n)\n\nSELECT \ndate_trunc('day',cast(from_unixtime(unixtime) as timestamp)) as date\n, masquerading_user\n, advertiser_id\nfrom datalake.imhotep.employer_user_actions_spark\nWHERE hour >= cast(date_add('day',-7,CURRENT_DATE) as varchar)\nand is_masquerading=1\nAND element = 'schedule-interview-modal-create-new-interview'\nAND custom_action_type = 'click'\nand advertiser_id in (select distinct advertiser_id from interview_event)\nand masquerading_user in (select distinct ldap from sbs_reps)\n\norder by 1 DESC\nlimit 50",
  "queryTables" : [ "datalakehive.imhotep.employer_user_actions_spark", "datalakehive.imhotep.employer_user_actions_spark", "datalakehive.imhotep.indeedemployeesnapshot" ],
  "queryIndex" : 124,
  "runStartToQueryComplete" : 868
}, {
  "elapsedMillis" : 9707,
  "totalScheduledMillis" : 2575955,
  "cpuMillis" : 347932,
  "queuedMillis" : 1,
  "executeMillis" : 1731,
  "getResultMillis" : 0,
  "iterateMillis" : 8013,
  "rows" : 655,
  "error" : null,
  "scannedBytes" : 8798876210,
  "query" : "WITH daily_data AS (\n    SELECT\n        date_trunc('minute', from_unixtime(lp.unixtime)) as date,\n        appName,\n        moderationApi, \n        moderationType, \n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 30 PRECEDING AND current row) AS block_count,\n\t\tSUM(COUNT(*)) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 30 PRECEDING AND current row) AS request_count,\n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS weekly_block_count,\n\t\tSUM(COUNT(*)) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS weekly_request_count\n    FROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.flagged IS NOT NULL\n        AND lp.metric = 'moderation-text'\n        AND unixtime BETWEEN imhotep_unixtime(timestamp '2024-10-24') AND imhotep_unixtime(timestamp '2024-10-29')\n        and appName='ContentGenerationService' and moderationApi='openAIModerations' and moderationType='input'\n        -- see rate_change query for filters by appName etc.\n    GROUP BY\n        date_trunc('minute', from_unixtime(lp.unixtime)),\n\t\tappName,         \n        moderationApi, \n        moderationType \n),\nblock_rate AS (\n    SELECT\n        date,\n\t\tappName, \n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        cast(request_count * 240 as double) / cast(30 * weekly_request_count as double) as relative_request_rate,\n        cast(block_count as double) / request_count as raw_block_rate,\n        -- We adjust the proportion estimates by adding z^2/2 successes and z^2/2 failures (z^2 obs total) to the counts.\n        -- This can be thought of as a Bayesian prior, or as a correction to the Normal approximation for rates close to 0 or 1.\n        -- For large values of request_count this converges to the raw proportion (block_rate ~ raw_block_rate).\n        -- Using z=3.0, in other words, we're going to require a \"3-sigma\" detection.\n        cast(block_count + 4.5 as double) / (request_count + 9.0) as block_rate, -- corrected/smoothed\n        cast(block_count as double) / (request_count + 9.0) as block_rate_zc, -- zero-centered corrected/smoothed rate (only adding to denominator)\n        cast(weekly_block_count + (240 * 4.5 / 30) as double) / (weekly_request_count + (240 * 9.0 / 30)) as  weekly_block_rate, -- corrected/smoothed\n        cast(weekly_block_count as double) / (weekly_request_count + (240 * 9.0 / 30)) as  weekly_block_rate_zc, -- corrected/smoothed        \n        cast(weekly_block_count as double) /  weekly_request_count as raw_weekly_block_rate,  \n        (cast(block_count + 4.5 as double) / (request_count + 9.0)) - (cast(weekly_block_count + (240 * 4.5 / 30) as double) / (weekly_request_count + (240 * 9.0 / 30))) as change,\n        sum(1.0) over (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 240 + 30 PRECEDING AND 1 PRECEDING) as previous_dates_count\n    FROM\n        daily_data\n),\n\nblock_rate_change AS (\n    SELECT\n        date,\n\t\tappName,         \n        moderationApi, \n        moderationType,\n        request_count,\n\t\trelative_request_rate,        \n        weekly_request_count,\n        STDDEV(block_rate-weekly_block_rate) OVER (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS stddev_obs,\n        SQRT((block_rate * (1.0 - block_rate) / request_count) + ((weekly_block_rate * (1.0 - weekly_block_rate) / weekly_request_count))) as stddev_approx,\n        raw_block_rate,  \n        block_rate,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        raw_weekly_block_rate,  \n        weekly_block_rate, -- corrected/smoothed\n        change,\n        case weekly_block_rate_zc\n           when 0 then 0\n           else (block_rate_zc - weekly_block_rate_zc) \n        end as change_zc,\n\t\tprevious_dates_count        \n    FROM\n        block_rate\n),\nconfidence_interval AS (\n    SELECT\n        date,\n\t\tappName,         \n        moderationApi, \n        moderationType,\n        stddev_obs,\n\t\tstddev_approx,\n        greatest(stddev_approx, stddev_obs) as stddev,\n        block_rate,\n        block_rate - 6 * greatest(stddev_approx, stddev_obs)  AS block_rate_lower_bound,\n        block_rate + 6 * greatest(stddev_approx, stddev_obs) AS block_rate_upper_bound,          \n        weekly_block_rate,\n\t\tweekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,        \n        change,\n        change_zc,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        request_count,\n\t\trelative_request_rate,                \n        change - 6 * greatest(stddev_approx, stddev_obs) AS change_lower_bound,\n        change + 6 * greatest(stddev_approx, stddev_obs) AS change_upper_bound,\n        previous_dates_count,\n        row_number() OVER (partition by moderationApi, moderationType ORDER BY date) as row_n \n    FROM\n        block_rate_change\n    --WHERE\n    --\tweekly_request_count > 100\n    --    and request_count > 100\n)\nSELECT\n    date,\n\tappName,     \n    moderationApi, \n    moderationType,\n    request_count,\n\trelative_request_rate,            \n    stddev_obs,\n    stddev_approx,\n    stddev,\n    block_rate,\n\tblock_rate_lower_bound,\n    block_rate_upper_bound,\n    weekly_block_rate,\n    weekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,    \n    change,\n    change / weekly_block_rate as relative_change,\n    change_zc / weekly_block_rate_zc as relative_change_zc,\n    change_zc,\n    block_rate_zc,\n    weekly_block_rate_zc,\n    \n    change_lower_bound,\n    change_upper_bound,\n    change_lower_bound * 1.0 / weekly_block_rate as relative_change_lower_bound,\n    change_upper_bound * 1.0 / weekly_block_rate as relative_change_upper_bound,\n    greatest(change_lower_bound / weekly_block_rate, 0) as relative_change_lower_bound_sig,\n    least(change_upper_bound / weekly_block_rate, 0) as relative_change_upper_bound_sig,     \n    IF((change_lower_bound > 0 or change_upper_bound<0) and (previous_dates_count > 240), 1, 0) as is_sig_change,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (date = (max(date) over ())) and (previous_dates_count > 6), 1, 0) as is_latest_date_sig_change,\n    change/stddev as z_score,\n    IF(date = (max(date) over ()), change/stddev, NULL) as latest_date_z_score, \n    max(date) over () as latest_data_date,\n    previous_dates_count            \nFROM\n    confidence_interval -- Note: return values for all dates unlike with the alerting query\nWHERE\n    (change/stddev) IS NOT NULL\n    and ((row_n % 15 = 0)  or (abs(change/stddev) > 6))\n    and previous_dates_count > (0.9 * 240)\nORDER BY\n    date DESC, moderationApi ASC, moderationType DESC",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 125,
  "runStartToQueryComplete" : 850
}, {
  "elapsedMillis" : 5841,
  "totalScheduledMillis" : 380697,
  "cpuMillis" : 45920,
  "queuedMillis" : 0,
  "executeMillis" : 2017,
  "getResultMillis" : 0,
  "iterateMillis" : 3842,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 611961737,
  "query" : "SELECT COUNT(DISTINCT accountid) AS distinct_account_count\nFROM datalake.imhotep.passsigninattempt\nWHERE unixtime > IMHOTEP_UNIXTIME('1month') AND successful = 1",
  "queryTables" : [ "datalakehive.imhotep.passsigninattempt" ],
  "queryIndex" : 126,
  "runStartToQueryComplete" : 850
}, {
  "elapsedMillis" : 20868,
  "totalScheduledMillis" : 6293698,
  "cpuMillis" : 1925256,
  "queuedMillis" : 1,
  "executeMillis" : 4915,
  "getResultMillis" : 0,
  "iterateMillis" : 15989,
  "rows" : 35,
  "error" : null,
  "scannedBytes" : 35132444598,
  "query" : "-- Trigger RB Rules:\n\n-- Rules w/ Payments cat\nWITH rules AS (\n    SELECT rule_id, created_by, rule_state, responses\n    FROM rulebook_snapshot rs\n    WHERE unixtime BETWEEN imhotep_unixtime('1d') AND imhotep_unixtime('today')\n    AND context = 'advertiser'\n    AND (\n        REGEXP_LIKE(LOWER(rule), 'triggeredrulenames') \n        OR REGEXP_LIKE(LOWER(rule), 'triggeredruleids')\n        OR rule_id IN (4800, 4803, 4605, 4853, 4864, 4854, 3161, 3160, 2615, \n                       3257, 3282, 3341, 3346, 3350, 2597, 2610, 4505, 3362, \n                       3267, 4080, 3363, 2616, 3499, 4174, 4183, 4703)\n    \t)\n    AND rule_state = 'ACTIVE'\n    GROUP BY 1,2,3,4\n),\n\n-- Advertisers that matched rules from the CTE above\nrule_matches AS (\n    SELECT ruleid, contentkey\n    FROM rulecontentresult rc\n    INNER JOIN rules r ON r.rule_id = rc.ruleid\n    WHERE unixtime BETWEEN imhotep_unixtime('2024-01-01') AND imhotep_unixtime('7d') --change rule match date here\n    AND match = 1\n    GROUP BY 1,2\n),\n\n-- Advertisers info that matched payments rules\ndmod AS (\n    SELECT ruleid, advertiserid, showhostedjobs, industry\n    FROM dradismod dmod\n    INNER JOIN rule_matches rm ON CAST(dmod.advertiserid AS VARCHAR) = rm.contentkey\n    WHERE unixtime BETWEEN imhotep_unixtime('2d') AND imhotep_unixtime('1d')\n    AND showhostedjobs != 'pending'\n    AND industry != 'Job Seeker'\n    GROUP BY 1,2,3,4\n),\n\nrule_metrics AS (\n    SELECT \n        ruleid,\n        COUNT(DISTINCT CASE WHEN industry = 'Fraud/Scam' THEN advertiserid END) AS fraud_count,\n        COUNT(DISTINCT CASE WHEN showhostedjobs = 'rejected' THEN advertiserid END) AS rejected_count,\n        COUNT(DISTINCT advertiserid) AS all_count, \n        ROUND(COUNT(DISTINCT CASE WHEN industry = 'Fraud/Scam' THEN advertiserid END) / CAST(COUNT(DISTINCT advertiserid) AS DOUBLE) * 100,2) AS fraud_perc,\n        ROUND(COUNT(DISTINCT CASE WHEN showhostedjobs = 'rejected' THEN advertiserid END) / CAST(COUNT(DISTINCT advertiserid) AS DOUBLE) * 100,2) AS rejection_perc\n    FROM dmod\n    GROUP BY 1\n)\n\n-- Left join on the first CTE with the rule_metrics CTE to get an output with all rule values (null values coalesced to zero)\nSELECT\n    rule_id, \n    created_by, \n    rule_state, \n    COALESCE(fraud_count,0) AS fraud_count,\n    COALESCE(rejected_count,0) AS rejected_count,\n    COALESCE(all_count,0) AS all_count,\n    COALESCE(fraud_perc,0) AS fraud_perc,\n    COALESCE(rejection_perc,0) AS rejection_perc\nFROM rules r\nLEFT JOIN rule_metrics rm ON rm.ruleid = r.rule_id\nGROUP BY 1,2,3,4,5,6,7,8\nORDER BY all_count DESC",
  "queryTables" : [ "skipperhive.imhotep.dradismod", "skipperhive.imhotep.rulebook_snapshot", "skipperhive.imhotep.rulebook_snapshot", "skipperhive.imhotep.rulecontentresult" ],
  "queryIndex" : 127,
  "runStartToQueryComplete" : 871
}, {
  "elapsedMillis" : 17354,
  "totalScheduledMillis" : 40022609,
  "cpuMillis" : 10342273,
  "queuedMillis" : 0,
  "executeMillis" : 1745,
  "getResultMillis" : 0,
  "iterateMillis" : 15647,
  "rows" : 5,
  "error" : null,
  "scannedBytes" : 428708671052,
  "query" : "/*WITH\n\nsponsor_event as(\n  Select distinct advertiser_id \n  FROM datalake.imhotep.sponsormodulesevents2 \n  WHERE hour >= cast(date_add('day',-21,CURRENT_DATE) as varchar)\n  AND page='sponsorOrganic' \n  AND event='element_click' \n  AND element_name='cpc_sponsorship' \n  AND is_masquerading=1\n),*/\n\nWITH\n\nsbs_reps as (\n\tselect DISTINCT ldap\n\tFROM datalake.imhotep.indeedemployeesnapshot\n\tWHERE sup_org_name LIKE '%SBS%'\n    and day >= cast(date_add('day',-7,CURRENT_DATE) as varchar)\n)\n\nSELECT \ndate_trunc('day',cast(from_unixtime(unixtime) as timestamp)) as date\n, masquerading_user\n, advertiser_id\n, element\n, url_path\n\nFROM datalake.imhotep.employer_user_actions_spark\n--WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n  where hour >= cast(date_add('day',-7,CURRENT_DATE) as varchar)\n  and custom_action_type like '%click%'\n\n  and is_masquerading = 1\n  and ((url_path = '/sponsor/edit/sponsor' and action_name='sponsored-button')\n  or (url_path = '/objective-campaign/create/confirmation' and element like 'save-campaign-button'))\n  \n  and masquerading_user in (Select distinct ldap FROM sbs_reps)\n  --  and advertiser_id = 773008\n\n  --  and ((url_path = '/sponsor/edit/sponsor'and action_name='sponsored-button') or (url_path = '/objective-campaign/create/confirmation' and action_name = 'save-campaign-button'))\n  --  and advertiser_id in (Select distinct advertiser_id FROM sponsor_event)\n\nGROUP BY 1,2,3,4,5\nORDER BY 1 desc",
  "queryTables" : [ "datalakehive.imhotep.employer_user_actions_spark", "datalakehive.imhotep.indeedemployeesnapshot" ],
  "queryIndex" : 128,
  "runStartToQueryComplete" : 869
}, {
  "elapsedMillis" : 2756,
  "totalScheduledMillis" : 363582,
  "cpuMillis" : 72078,
  "queuedMillis" : 0,
  "executeMillis" : 1652,
  "getResultMillis" : 0,
  "iterateMillis" : 1124,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 1216719804,
  "query" : "SELECT COUNT(DISTINCT accountid) AS distinct_account_count\nFROM datalake.imhotep.passsigninattempt\nWHERE unixtime > IMHOTEP_UNIXTIME('2month') AND successful = 1",
  "queryTables" : [ "datalakehive.imhotep.passsigninattempt" ],
  "queryIndex" : 129,
  "runStartToQueryComplete" : 869
}, {
  "elapsedMillis" : 17972,
  "totalScheduledMillis" : 46995874,
  "cpuMillis" : 11113340,
  "queuedMillis" : 0,
  "executeMillis" : 3761,
  "getResultMillis" : 0,
  "iterateMillis" : 14246,
  "rows" : 135,
  "error" : null,
  "scannedBytes" : 543662604794,
  "query" : "WITH most_recent_starts AS (\n    SELECT appid, env, runId, ROW_NUMBER() OVER(PARTITION BY appid, env ORDER BY unixtime DESC) AS startup_num\n    FROM javaruntimeversions\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('4y') AND IMHOTEP_UNIXTIME('today')\n    GROUP BY appid, env, runId, unixtime\n), most_recent_runs AS (\n    SELECT mrs.appid, mrs.env, jrv.unixtime AS most_recent_start_unixtime, jrv.osimage, jrv.osimageversionid, jrv.runid AS runid \n    FROM most_recent_starts mrs\n    LEFT JOIN javaruntimeversions jrv ON mrs.runId=jrv.runId AND mrs.startup_num=1\n    WHERE jrv.unixtime BETWEEN IMHOTEP_UNIXTIME('4y') AND IMHOTEP_UNIXTIME('today')\n), service_data AS (\n    SELECT \n        mrr.appid, mrr.env, srs.applicationname, srs.applicationtype, srs.runtimetype, srs.teamid, \n        srs.lifecycle, srs.state, srs.git_project_url,\n        FROM_UNIXTIME(mrr.most_recent_start_unixtime) AS most_recent_start_time, mrr.runid, mrr.osimage, mrr.osimageversionid\n    FROM most_recent_runs mrr\n    LEFT JOIN serviceregistrysnapshots srs ON mrr.appid=srs.applicationid\n    WHERE srs.unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n), scoped_data AS (\n\tSELECT * FROM service_data sd WHERE sd.lifecycle!='UNAVAILABLE'\n), daemonizer_data AS (\n    SELECT \n        sd.*,\n        jlv.libversion AS daemonizer_version\n    FROM scoped_data sd \n    INNER JOIN javalibversions jlv ON jlv.runid=sd.runid\n    WHERE \n        jlv.unixtime BETWEEN IMHOTEP_UNIXTIME('4y') AND IMHOTEP_UNIXTIME('today')\n        AND jlv.lib='indeed:daemonizer'\n)\n\nSELECT sd.*, dd.daemonizer_version \nFROM scoped_data sd\nLEFT JOIN daemonizer_data dd ON sd.runid=dd.runid\nWHERE dd.teamid LIKE '%'",
  "queryTables" : [ "skipperhive.imhotep.javalibversions", "skipperhive.imhotep.javaruntimeversions", "skipperhive.imhotep.javaruntimeversions", "skipperhive.imhotep.javaruntimeversions", "skipperhive.imhotep.javaruntimeversions", "skipperhive.imhotep.serviceregistrysnapshots", "skipperhive.imhotep.serviceregistrysnapshots" ],
  "queryIndex" : 130,
  "runStartToQueryComplete" : 893
}, {
  "elapsedMillis" : 18017,
  "totalScheduledMillis" : 47019418,
  "cpuMillis" : 11033999,
  "queuedMillis" : 0,
  "executeMillis" : 3771,
  "getResultMillis" : 0,
  "iterateMillis" : 14289,
  "rows" : 136,
  "error" : null,
  "scannedBytes" : 543662604543,
  "query" : "WITH most_recent_starts AS (\n    SELECT appid, env, runId, ROW_NUMBER() OVER(PARTITION BY appid, env ORDER BY unixtime DESC) AS startup_num\n    FROM javaruntimeversions\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('4y') AND IMHOTEP_UNIXTIME('today')\n    GROUP BY appid, env, runId, unixtime\n), most_recent_runs AS (\n    SELECT mrs.appid, mrs.env, jrv.unixtime AS most_recent_start_unixtime, jrv.osimage, jrv.osimageversionid, jrv.runid AS runid \n    FROM most_recent_starts mrs\n    LEFT JOIN javaruntimeversions jrv ON mrs.runId=jrv.runId AND mrs.startup_num=1\n    WHERE jrv.unixtime BETWEEN IMHOTEP_UNIXTIME('4y') AND IMHOTEP_UNIXTIME('today')\n), service_data AS (\n    SELECT \n        mrr.appid, mrr.env, srs.applicationname, srs.applicationtype, srs.runtimetype, srs.teamid, \n        srs.lifecycle, srs.state, srs.git_project_url,\n        FROM_UNIXTIME(mrr.most_recent_start_unixtime) AS most_recent_start_time, mrr.runid, mrr.osimage, mrr.osimageversionid\n    FROM most_recent_runs mrr\n    LEFT JOIN serviceregistrysnapshots srs ON mrr.appid=srs.applicationid\n    WHERE srs.unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n), scoped_data AS (\n\tSELECT * FROM service_data sd WHERE sd.lifecycle!='UNAVAILABLE'\n), daemonizer_data AS (\n    SELECT \n        sd.*,\n        jlv.libversion AS daemonizer_version\n    FROM scoped_data sd \n    INNER JOIN javalibversions jlv ON jlv.runid=sd.runid\n    WHERE \n        jlv.unixtime BETWEEN IMHOTEP_UNIXTIME('4y') AND IMHOTEP_UNIXTIME('today')\n        AND jlv.lib='indeed:daemonizer'\n)\n\nSELECT sd.*, dd.daemonizer_version \nFROM scoped_data sd\nLEFT JOIN daemonizer_data dd ON sd.runid=dd.runid\nWHERE dd.teamid LIKE '%'",
  "queryTables" : [ "skipperhive.imhotep.javalibversions", "skipperhive.imhotep.javaruntimeversions", "skipperhive.imhotep.javaruntimeversions", "skipperhive.imhotep.javaruntimeversions", "skipperhive.imhotep.javaruntimeversions", "skipperhive.imhotep.serviceregistrysnapshots", "skipperhive.imhotep.serviceregistrysnapshots" ],
  "queryIndex" : 131,
  "runStartToQueryComplete" : 893
}, {
  "elapsedMillis" : 4219,
  "totalScheduledMillis" : 70228,
  "cpuMillis" : 7189,
  "queuedMillis" : 0,
  "executeMillis" : 1577,
  "getResultMillis" : 0,
  "iterateMillis" : 2691,
  "rows" : 9,
  "error" : null,
  "scannedBytes" : 163348283,
  "query" : "WITH opened_daemonizer_mrs AS (\n    SELECT path_with_namespace_plus_mr_iid\n    FROM imhotep.gitlabevents ge \n    WHERE \n        ge.unixtime BETWEEN IMHOTEP_UNIXTIME('2024-04-01') AND IMHOTEP_UNIXTIME('today')\n        AND action='open'\n        AND gitlabhook_objectattributes_title LIKE '%Daemonizer Migration%'\n), flow AS (\n    SELECT \n    \tpath_with_namespace_plus_mr_iid AS merge_request_id, \n        action, \n        CASE \n        \tWHEN action = 'open' THEN FROM_UNIXTIME(CAST(gitlabhook_objectattributes_createdat AS DOUBLE))\n            ELSE FROM_UNIXTIME(gitlabhook_objectattributes_updatedat) \n        END AS action_time,\n        ROW_NUMBER() OVER(PARTITION BY path_with_namespace_plus_mr_iid, action ORDER BY gitlabhook_objectattributes_updatedat ASC) AS step_number\n    FROM imhotep.gitlabevents ge \n    WHERE \n        ge.unixtime BETWEEN IMHOTEP_UNIXTIME('2024-04-01') AND IMHOTEP_UNIXTIME('today')\n        AND ge.path_with_namespace_plus_mr_iid IN (SELECT path_with_namespace_plus_mr_iid FROM opened_daemonizer_mrs)\n        AND action NOT IN ('null')\n    ORDER BY path_with_namespace_plus_mr_iid, gitlabhook_objectattributes_updatedat ASC\n), steps AS (\n\tSELECT merge_request_id, action, action_time\n\tFROM flow \n\tWHERE step_number = 1  -- don't show repeated chains of MR updates\n\tORDER BY merge_request_id, action_time ASC\n), agg_steps AS (\n\tSELECT \n    \tmerge_request_id, \n        ARRAY_JOIN(ARRAY_AGG(action ORDER BY action_time, action), ',') AS steps \n    FROM steps \n    GROUP BY merge_request_id\n)\n\n--SELECT * FROM steps ORDER BY merge_request_id, action_time\n\nSELECT steps, COUNT(merge_request_id) AS num_values FROM agg_steps GROUP BY steps",
  "queryTables" : [ "skipperhive.imhotep.gitlabevents", "skipperhive.imhotep.gitlabevents" ],
  "queryIndex" : 132,
  "runStartToQueryComplete" : 882
}, {
  "elapsedMillis" : 11373,
  "totalScheduledMillis" : 127150,
  "cpuMillis" : 29675,
  "queuedMillis" : 0,
  "executeMillis" : 747,
  "getResultMillis" : 0,
  "iterateMillis" : 10644,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 2723760647,
  "query" : "select * from datalake.tiller.oplin_events_usage order by _h2_inserted desc limit 10",
  "queryTables" : [ "datalake.tiller.oplin_events_usage" ],
  "queryIndex" : 133,
  "runStartToQueryComplete" : 889
}, {
  "elapsedMillis" : 14830,
  "totalScheduledMillis" : 26395202,
  "cpuMillis" : 2702652,
  "queuedMillis" : 1,
  "executeMillis" : 3803,
  "getResultMillis" : 0,
  "iterateMillis" : 11047,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 53266805635,
  "query" : "with msa_jobs as (\n    select sj.jobid as agg_job_id\n    , jlmsa\n    , trim(jlmsa) as jlmsa_trimmed\n    , sum(case when trim(jlmsa) is not null then 1 else 0 end) AS urban_jobs\n    , sum(case when trim(jlmsa) is null then 1 else 0 end) AS rural_jobs\n    , max_by(trim(jlmsa), hour) as latest_msa\n    from datalake.imhotep.searchablejobs sj\n    where hour between date_format(from_unixtime(to_unixtime(date('2024-10-01'))), '%Y-%m-%d %H:%i:%s') and date_format(from_unixtime(to_unixtime(date('2024-10-20'))), '%Y-%m-%d %H:%i:%s')\n    group by 1,2,3\n)\n\nselect * from msa_jobs\nwhere rural_jobs>0 and jlmsa is not null\nlimit 100\n",
  "queryTables" : [ "datalakehive.imhotep.searchablejobs" ],
  "queryIndex" : 134,
  "runStartToQueryComplete" : 895
}, {
  "elapsedMillis" : 66161,
  "totalScheduledMillis" : 246741683,
  "cpuMillis" : 55559150,
  "queuedMillis" : 0,
  "executeMillis" : 12168,
  "getResultMillis" : 0,
  "iterateMillis" : 54058,
  "rows" : 4,
  "error" : null,
  "scannedBytes" : 2828267847131,
  "query" : "with premium_offer as (\n\tSELECT job_hash,\n        (CASE WHEN (CONTAINS(grp, '#B2:jobmo_sep_2024_premium_mvp1') and CONTAINS(grp, '#A2:premium_package_mvp_sponsor_confirmation1')) THEN 'test1'\n        \tWHEN (CONTAINS(grp, '#B2:jobmo_sep_2024_premium_mvp2') and CONTAINS(grp, '#A2:premium_package_mvp_sponsor_confirmation1')) THEN 'test2'\n            WHEN (CONTAINS(grp, '#B2:jobmo_sep_2024_premium_mvp3') and CONTAINS(grp, '#A2:premium_package_mvp_sponsor_confirmation1')) THEN 'test3'\n        \tELSE 'control' END ) as test_grp\n    FROM datalake.imhotep.sponsormodulesevents2\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-09-19') AND (IMHOTEP_UNIXTIME('today')) \n        AND (CONTAINS(grp, '#A2:premium_package_mvp_sponsor_confirmation0') OR CONTAINS(grp, '#A2:premium_package_mvp_sponsor_confirmation1'))\n\t\tAND is_privileged=0 AND is_masquerading=0 AND ipcountry='US' AND element_name in ('premium_features_ghost','premium_features') -- AND NOT edit  \n    GROUP BY 1,2\n)\n,\npremium_sponsor as (\n\tSELECT job_hash,\n    \tDATE(from_unixtime(unixtime)) as sponsor_start_date,\n        advertiser_id\n    FROM datalake.imhotep.sponsormodulesevents2 \n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-09-19') AND (IMHOTEP_UNIXTIME('today')) \n    \tAND is_privileged=0 AND is_masquerading=0 AND ipcountry='US' --AND NOT edit  \n        AND NOT is_free_to_post AND event='page_submission'\n        AND budget_tier in ('PREMIUM','PREMIUM_PACKAGE')\n        AND job_hash IN (SELECT job_hash FROM premium_offer)\n)\n,\nbase_t as (\nSELECT \n\nCASE \n        WHEN CONTAINS(recent_advertiser_test_groups, '#A2:premium_package_mvp_sponsor_confirmation0') THEN 'control'\n        WHEN CONTAINS(recent_advertiser_test_groups, '#A2:premium_package_mvp_sponsor_confirmation1') AND CONTAINS(recent_advertiser_test_groups, '#B2:jobmo_sep_2024_premium_mvp1') THEN 'test1'\n        WHEN CONTAINS(recent_advertiser_test_groups, '#A2:premium_package_mvp_sponsor_confirmation1') AND CONTAINS(recent_advertiser_test_groups, '#B2:jobmo_sep_2024_premium_mvp2') THEN 'test2'\n        WHEN CONTAINS(recent_advertiser_test_groups, '#A2:premium_package_mvp_sponsor_confirmation1') AND CONTAINS(recent_advertiser_test_groups, '#B2:jobmo_sep_2024_premium_mvp3') THEN 'test3'\n        ELSE NULL \n    END AS test_grp,\n            job_hash_underscore, daily_dradis_revenue_cents,\n        job_age_days\n--MAX(CASE WHEN daily_dradis_revenue_cents > 0 THEN job_age_days ELSE NULL END) OVER (PARTITION BY job_hash_underscore) AS last_spending_day\nFROM datalake.imhotep.dradis_job2\nWHERE  unixtime BETWEEN IMHOTEP_UNIXTIME('2024-09-19') AND (IMHOTEP_UNIXTIME('today')) \nand job_hash_underscore IN (select job_hash from premium_sponsor)\nand \n(CONTAINS(recent_advertiser_test_groups, '#A2:premium_package_mvp_sponsor_confirmation0') or \nCONTAINS(recent_advertiser_test_groups, '#B2:jobmo_sep_2024_premium_mvp1') or \nCONTAINS(recent_advertiser_test_groups, '#B2:jobmo_sep_2024_premium_mvp2') or \nCONTAINS(recent_advertiser_test_groups,'#B2:jobmo_sep_2024_premium_mvp3') or \nCONTAINS(recent_advertiser_test_groups, '#A2:premium_package_mvp_sponsor_confirmation1')) --filter for proctor grp\n--standard dradis filter\nand advertiser_type not in  ('Job Board','Test','NULL','Sandbox') and claim_version ='NULL' \n  and advertiser_internally_reported_industry not in ('Fraud/Scam','Spam','XO/S/JS','Job Seeker')\n  and advertiser_id not in (0, 43233, 459913, 2225717, 3507986, 3879560, 3879585, 3942867, 4205377, 4841581, 5947263, 5948211, 6284290, 6302066, 6384297, 6982716, 6997812, 7249199, 12405367, 16613338, 18552332, 25627469, 26108352, 26108717, 26108792, 26108845, 26387297, 28108792, 34801098, 35492727, 35602484, 38931109, 42045174, 54191120, 57836609, 58047475, 59025892, 59249532, 59272371, 59648098, 60474994, 61299917, 61412142, 61412820, 61413952, 61494280, 61633373, 62478551, 62758988, 62759012, 63508117, 63844048, 63850326, 65323046, 65789593, 66801582, 67462127, 67463298, 67463472, 67463586, 67463657)\n --newly created job\nand date_created>20240919\nand date_created<20241019\nand country IN ('us', 'US') \nand trailing_90_days_dradis_hack_campaign_revenue_cents = 0 --not dradis hack campaign\n--frontend filters\n  and   job_hash_underscore IN (select job_hash from premium_offer)\n  )\n  ,\n  last_spending_day_t as (\n  select test_grp,\n    job_hash_underscore,\n    MAX(CASE WHEN daily_dradis_revenue_cents > 0 THEN job_age_days ELSE NULL END) AS last_spending_day \n    from base_t\n    group by 1,2)\n    \n    \nselect test_grp as dataset, round(avg(last_spending_day),2) as avg_last_spending_day,\napprox_percentile(last_spending_day,0.5) as median_last_spending_day,\napprox_percentile(last_spending_day,0.10) as pct10_last_spending_day, \napprox_percentile(last_spending_day,0.25) as pct25_last_spending_day,\napprox_percentile(last_spending_day,0.75) as pct75_last_spending_day,\napprox_percentile(last_spending_day,0.90) as pct90_last_spending_day,\napprox_percentile(last_spending_day,0.95) as pct95_last_spending_day,\napprox_percentile(last_spending_day,0.99) as pct99_last_spending_day--,count(distinct job_hash_underscore) as jobs \nfrom last_spending_day_t\ngroup by 1\nhaving test_grp is not NULL",
  "queryTables" : [ "datalakehive.imhotep.dradis_job2", "datalakehive.imhotep.sponsormodulesevents2", "datalakehive.imhotep.sponsormodulesevents2", "datalakehive.imhotep.sponsormodulesevents2" ],
  "queryIndex" : 135,
  "runStartToQueryComplete" : 948
}, {
  "elapsedMillis" : 2978,
  "totalScheduledMillis" : 334503,
  "cpuMillis" : 21357,
  "queuedMillis" : 0,
  "executeMillis" : 1643,
  "getResultMillis" : 0,
  "iterateMillis" : 1364,
  "rows" : 5,
  "error" : null,
  "scannedBytes" : 750803519,
  "query" : "select fcc_id, COUNT(*) as unique_visitors\nfrom datalake.glassdoor.unique_visitors\nwhere day between '2024-09-01' and '2024-10-01'\nGROUP BY fcc_id\nlimit 5",
  "queryTables" : [ "datalakehive.glassdoor.unique_visitors" ],
  "queryIndex" : 136,
  "runStartToQueryComplete" : 898
}, {
  "elapsedMillis" : 4993,
  "totalScheduledMillis" : 809118,
  "cpuMillis" : 158381,
  "queuedMillis" : 0,
  "executeMillis" : 1720,
  "getResultMillis" : 0,
  "iterateMillis" : 3288,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 1881838089,
  "query" : "SELECT COUNT(DISTINCT accountid) AS distinct_account_count\nFROM datalake.imhotep.passsigninattempt\nWHERE unixtime > IMHOTEP_UNIXTIME('3month') AND successful = 1",
  "queryTables" : [ "datalakehive.imhotep.passsigninattempt" ],
  "queryIndex" : 137,
  "runStartToQueryComplete" : 904
}, {
  "elapsedMillis" : 21731,
  "totalScheduledMillis" : 54314269,
  "cpuMillis" : 12587836,
  "queuedMillis" : 0,
  "executeMillis" : 4655,
  "getResultMillis" : 0,
  "iterateMillis" : 17104,
  "rows" : 8048,
  "error" : null,
  "scannedBytes" : 543662424159,
  "query" : "WITH most_recent_starts AS (\n    SELECT appid, env, runId, ROW_NUMBER() OVER(PARTITION BY appid, env ORDER BY unixtime DESC) AS startup_num\n    FROM javaruntimeversions\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('4y') AND IMHOTEP_UNIXTIME('today')\n    GROUP BY appid, env, runId, unixtime\n), most_recent_runs AS (\n    SELECT mrs.appid, mrs.env, jrv.unixtime AS most_recent_start_unixtime, jrv.osimage, jrv.osimageversionid, jrv.runid AS runid \n    FROM most_recent_starts mrs\n    LEFT JOIN javaruntimeversions jrv ON mrs.runId=jrv.runId AND mrs.startup_num=1\n    WHERE jrv.unixtime BETWEEN IMHOTEP_UNIXTIME('4y') AND IMHOTEP_UNIXTIME('today')\n), service_data AS (\n    SELECT \n        mrr.appid, mrr.env, srs.applicationname, srs.applicationtype, srs.runtimetype, srs.teamid, \n        srs.lifecycle, srs.state, srs.git_project_url,\n        FROM_UNIXTIME(mrr.most_recent_start_unixtime) AS most_recent_start_time, mrr.runid, mrr.osimage, mrr.osimageversionid\n    FROM most_recent_runs mrr\n    LEFT JOIN serviceregistrysnapshots srs ON mrr.appid=srs.applicationid\n    WHERE srs.unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n), scoped_data AS (\n\tSELECT * FROM service_data sd WHERE sd.lifecycle!='UNAVAILABLE'\n), boot_data AS (\n    SELECT \n        sd.*,\n        jlv.libversion AS springboot_version\n    FROM scoped_data sd \n    INNER JOIN javalibversions jlv ON jlv.runid=sd.runid\n    WHERE \n        jlv.unixtime BETWEEN IMHOTEP_UNIXTIME('4y') AND IMHOTEP_UNIXTIME('today')\n        AND jlv.lib='org.springframework.boot:spring-boot'\n)\n\nSELECT sd.*, bd.springboot_version FROM scoped_data sd\nLEFT JOIN boot_data bd ON sd.runid=bd.runid",
  "queryTables" : [ "skipperhive.imhotep.javalibversions", "skipperhive.imhotep.javaruntimeversions", "skipperhive.imhotep.javaruntimeversions", "skipperhive.imhotep.javaruntimeversions", "skipperhive.imhotep.javaruntimeversions", "skipperhive.imhotep.serviceregistrysnapshots", "skipperhive.imhotep.serviceregistrysnapshots" ],
  "queryIndex" : 138,
  "runStartToQueryComplete" : 924
}, {
  "elapsedMillis" : 38967,
  "totalScheduledMillis" : 98729507,
  "cpuMillis" : 6114538,
  "queuedMillis" : 0,
  "executeMillis" : 11402,
  "getResultMillis" : 0,
  "iterateMillis" : 27588,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 192196182771,
  "query" : "SELECT \n\tCOUNT(*) as total_profile_views, \n   \tSUM(r.sent) as outreaches,\n    SUM(r.resp_pos) as resp_pos,\n    COUNT(js.account_id) as profile_with_linkedIn,\n    ROUND(CAST(SUM(r.sent) AS DOUBLE) * 100 / COUNT(*), 1) as outreach_rate\nFROM \n\tdatalake.imhotep.rsresumeview v\n\nLEFT JOIN\n\tdatalake.imhotep.rscontacts r\nON\n\tv.recruiterAccountId = r.senderAccountId\n    AND v.resumeAccountId = r.recipientAccountId\n    AND r.unixtime BETWEEN IMHOTEP_UNIXTIME('29d') AND IMHOTEP_UNIXTIME('1d')\n\nLEFT JOIN \n\tdatalake.imhotep.js_fact_store_snapshot_prod js\nON\n\tv.resumeAccountId = js.account_id\n\tAND js.resume_links_size > 0\n\tAND CARDINALITY(FILTER(js.resume_links_array, x -> x LIKE '%linkedin%')) > 0\n    AND js.unixtime BETWEEN IMHOTEP_UNIXTIME('29d') AND IMHOTEP_UNIXTIME('1d')\n\nWHERE \n\tv.unixtime BETWEEN IMHOTEP_UNIXTIME('29d') AND IMHOTEP_UNIXTIME('1d')\n    AND js.account_id IS NOT NULL -- with LinkedIn link\n--    AND js.account_id IS NULL -- exclude linkedIn users\n--    AND r.batchSize = 1",
  "queryTables" : [ "datalakehive.imhotep.js_fact_store_snapshot_prod", "datalakehive.imhotep.rscontacts", "datalakehive.imhotep.rsresumeview" ],
  "queryIndex" : 139,
  "runStartToQueryComplete" : 943
}, {
  "elapsedMillis" : 93021,
  "totalScheduledMillis" : 378398237,
  "cpuMillis" : 61453102,
  "queuedMillis" : 0,
  "executeMillis" : 35710,
  "getResultMillis" : 0,
  "iterateMillis" : 57328,
  "rows" : 54,
  "error" : null,
  "scannedBytes" : 3857796209359,
  "query" : "SELECT date_format(DATE_TRUNC('WEEK', FROM_UNIXTIME(unixtime)),'%Y-%m-%d') as weekStart\n, (case when feedid = 50461 then 'Hosted' else 'Indexed' end) as jobProduct\n--, count(DISTINCT(jobId)) as unutilizedJobs\n, count(DISTINCT(case when has_employer_base_pay = 1 then jobId else null end)) as unutilizedExplicitPayJobs\n, count(DISTINCT(case when jlpostal != '' OR jlenhanced = 1 then jobId else null end)) as unutilizedBetterLocationJobs\n, count(DISTINCT(case when contains(applyvisibility, 'mobile') then jobId else null end)) as unutilizedIndeedApplyableJobs\n, count(DISTINCT(case when has_employer_base_pay = 1 AND contains(applyvisibility, 'mobile') AND (jlpostal != '' OR jlenhanced = 1) then jobId else null end)) as unutilizedBetterJobs\n-- logic for the above fields comes from https://link.indeed.tech/YD476T \nFROM datalake.imhotep.searchablejobs\nWHERE unixtime between imhotep_unixtime(CURRENT_DATE - INTERVAL '183' DAY) \nAND imhotep_unixtime(CURRENT_DATE - INTERVAL '1' DAY)\nAND (waldoVisibilityLevel not in ('organic','jobalert')\n\tAND NOT(waldoVisibilityLevel = 'sponsored' AND sponVisibility = 'spon_active'))\nAND jobcountry != 'JP'\nAND dupestatus != 1 \nGROUP BY 1,2",
  "queryTables" : [ "datalakehive.imhotep.searchablejobs" ],
  "queryIndex" : 140,
  "runStartToQueryComplete" : 1010
}, {
  "elapsedMillis" : 7663,
  "totalScheduledMillis" : 343712,
  "cpuMillis" : 62408,
  "queuedMillis" : 0,
  "executeMillis" : 3970,
  "getResultMillis" : 0,
  "iterateMillis" : 3726,
  "rows" : 2,
  "error" : null,
  "scannedBytes" : 2696420534,
  "query" : "WITH \n\nsubscription_attributes AS (\n\n\tSELECT subscription_id, DATE(purchased_at) AS last_purchase_date\n    FROM datalake.core.product_analytics_dim_resume_subscription_current\n    \n    \t\n),\n\nrsContacts AS (\n\n    SELECT\t\n    \tDATE(FROM_UNIXTIME(unixtime)) AS activity_date,\n        subscriptionid AS subscription_id,\n        advertiserid AS advertiser_id,\n        IF(source = 'MATCHES', 'Match', 'Search') AS product,\n        IF(subscriptiontier = 'PROFESSIONAL' \n        \tAND (last_purchase_date < DATE('2024-04-02') OR last_purchase_date IS NULL)\n            AND source != 'MATCHES', 'Legacy Search', 'Smart Sourcing') AS subscription_tier,\n        SUM(sent) AS contacts_sent,\n        SUM(resp_any) AS all_responses,\n        SUM(resp_pos) AS positive_responses\n    FROM \n    \tdatalake.imhotep.rsContacts rsContacts\n    LEFT JOIN\n        subscription_attributes \n        \tON rsContacts.subscriptionid = subscription_attributes.subscription_id\n    WHERE \n    \tunixtime BETWEEN IMHOTEP_UNIXTIME('2024-04-02') AND IMHOTEP_UNIXTIME('today') \n\tGROUP BY 1, 2, 3, 4, 5\n\n)\n\nSELECT\n\tsubscription_tier,\n    COUNT(DISTINCT advertiser_id) AS num_advertisers,\n    COUNT(DISTINCT subscription_id) AS num_subscriptions,\n    SUM(contacts_sent) AS contacts_sent,\n    SUM(all_responses) AS all_responses,\n    (SUM(all_responses) * 1.0000) / SUM(contacts_sent) AS all_response_rate,\n    SUM(positive_responses) AS positive_responses,\n    (SUM(positive_responses) * 1.0000) / SUM(contacts_sent) AS positive_response_rate\nFROM \n\trsContacts\nWHERE advertiser_id = 2489298\n\nGROUP BY 1\n\n",
  "queryTables" : [ "datalakehive.core.product_analytics_dim_resume_subscription_current", "datalakehive.imhotep.rscontacts" ],
  "queryIndex" : 141,
  "runStartToQueryComplete" : 926
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 1068,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_173714_00165_vjepj): Query exceeded the maximum execution time limit of 10.00m",
  "scannedBytes" : 0,
  "query" : "-- What are the largest clusters which exactly match between legacy and mvp?\n-- Do the bin files in the jobindex artifact exactly match for those jobs?\n\nwith\n--lets try to collect the clusters into sets, a special case for adding the original into the set also\ncluster_job_array_prep as\n(   select modelId,\n           concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n           originalJobId as originalRepostId,\n           array_distinct(array_agg(jobCopyJobId)) as copyJobIds\n    from datalake.imhotep.duplicationDetectionRadContents\n    where imhotep_unixtime('1d') <= unixtime and unixtime < imhotep_unixtime('1d') + 24*60*60\n    and modelId in ('Legacy RepostDetector', 'legacyRepostModel-2.2')\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n    group by 1,2,3\n),\nlegacy_cluster_job_arrays as\n(   select model,\n           originalRepostId,\n           array_min(array_union(copyJobIds, array [originalRepostId])) as newRepostId,\n           array_sort(array_distinct(array_union(copyJobIds, array [originalRepostId]))) as jobIds\n    from cluster_job_array_prep\n    where modelId='Legacy RepostDetector'\n),\nmvp_cluster_job_arrays as\n(   select model,\n           originalRepostId,\n           array_min(array_union(copyJobIds, array [originalRepostId])) as newRepostId,\n           array_sort(array_distinct(array_union(copyJobIds, array [originalRepostId]))) as jobIds\n    from cluster_job_array_prep\n    where modelId='legacyRepostModel-2.2'\n)\nselect lcja.originalRepostId,\n       --lcja.newRepostId,\n       cardinality(coalesce(lcja.jobIds, mcja.jobIds)) as cluster_size\nfrom            legacy_cluster_job_arrays lcja\nfull outer join mvp_cluster_job_arrays    mcja on (    lcja.newRepostId = mcja.newRepostId\n                                                   and lcja.originalRepostId = mcja.originalRepostId\n                                                   and lcja.jobIds = mcja.jobIds)\nwhere lcja.newRepostId is not null\nand   mcja.newRepostId is not null\norder by cluster_size desc\nlimit 1000",
  "queryTables" : [ "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents" ],
  "queryIndex" : 142,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 16467,
  "totalScheduledMillis" : 8009563,
  "cpuMillis" : 2590809,
  "queuedMillis" : 0,
  "executeMillis" : 2475,
  "getResultMillis" : 0,
  "iterateMillis" : 14034,
  "rows" : 3,
  "error" : null,
  "scannedBytes" : 80403936376,
  "query" : "with convos as (\nselect\n    ce.advertiserId\n   ,eventId\n   ,ce.encryptedConversationId\n   ,(isImported = '1') as isEmail\nFROM conversationEvents ce\njoin convsConversationCreation cc on  ce.encryptedConversationId = cc.encryptedConversationId \n\nWHERE ce.unixtime BETWEEN IMHOTEP_UNIXTIME('181d') AND IMHOTEP_UNIXTIME('1d')\nand   cc.unixtime BETWEEN IMHOTEP_UNIXTIME('195d') AND IMHOTEP_UNIXTIME('1d')\nand ((ce.unixtime - cc.unixtime) < (60*60*24*14))\nand ce.context='APPLICATION'\nand ce.ownerRole != 'JOBSEEKER'\nGROUP BY 1,2,3,4\n)\n\n\n, agg as (\n\nselect advertiserId\n      ,count(*) as totalMessages\n      ,count_if(isEmail) as emailMessages\n      ,count_if(NOT isEmail) as onPlatformMessages \n  from convos\ngroup by 1 \n\n\t\t)\n        \n,advertiserDetails as ( \n\nselect advertiser_id\n   , max_by(parent_company_size_segment, unixtime) as parent_company_size_segment\n   , max_by(type, unixtime) as type\n   , max_by(billing_country, unixtime) as billing_country\n  from  daily_employer2 \n  where unixtime BETWEEN IMHOTEP_UNIXTIME('2d') and IMHOTEP_UNIXTIME('1d')\ngroup by 1\n\n   )\n        \n\n select \n            case when emailMessages> 0 and onPlatformMessages=0 then 'Email Only'\n\t\t\t when  emailMessages=0 and onPlatformMessages>0 then 'Chat Only'\n\t\t\t when  emailMessages>0 and onPlatformMessages>0 then 'Email & Chat'\n             end as usageType\n        ,count(distinct advertiserId) as empCountDistinct\n        ,100.0*count(distinct advertiserId)/sum(count(distinct advertiserId)) over() as empCountDistinct\n        ,count() as empCount\n        ,100.0*count()/sum(count()) over() as pctEmpCount\n\n  from agg\nleft join advertiserDetails on agg.advertiserId=advertiserDetails.advertiser_id\nwhere parent_company_size_segment in ('L', 'XL')\ngroup by 1\norder by 1\n        \n\n\n\n\n",
  "queryTables" : [ "skipperhive.imhotep.conversationevents", "skipperhive.imhotep.convsconversationcreation", "skipperhive.imhotep.daily_employer2" ],
  "queryIndex" : 143,
  "runStartToQueryComplete" : 946
}, {
  "elapsedMillis" : 5186,
  "totalScheduledMillis" : 74300,
  "cpuMillis" : 16731,
  "queuedMillis" : 0,
  "executeMillis" : 3597,
  "getResultMillis" : 0,
  "iterateMillis" : 1815,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 942574060,
  "query" : "WITH \n\nsubscription_attributes AS (\n\n\tSELECT subscription_id, DATE(purchased_at) AS last_purchase_date\n    FROM datalake.core.product_analytics_dim_resume_subscription_current\n    \n    \t\n),\n\nrsContacts AS (\n\n    SELECT\t\n    \tDATE(FROM_UNIXTIME(unixtime)) AS activity_date,\n        subscriptionid AS subscription_id,\n        advertiserid AS advertiser_id,\n        IF(source = 'MATCHES', 'Match', 'Search') AS product,\n        IF(subscriptiontier = 'PROFESSIONAL' \n        \tAND (last_purchase_date < DATE('2024-04-02') OR last_purchase_date IS NULL)\n            AND source != 'MATCHES', 'Legacy Search', 'Smart Sourcing') AS subscription_tier,\n        SUM(sent) AS contacts_sent,\n        SUM(resp_any) AS all_responses,\n        SUM(resp_pos) AS positive_responses\n    FROM \n    \tdatalake.imhotep.rsContacts rsContacts\n    LEFT JOIN\n        subscription_attributes \n        \tON rsContacts.subscriptionid = subscription_attributes.subscription_id\n    WHERE \n    \tunixtime BETWEEN IMHOTEP_UNIXTIME('2024-08-01') AND IMHOTEP_UNIXTIME('today') \n\tGROUP BY 1, 2, 3, 4, 5\n\n)\n\nSELECT\n\tsubscription_tier,\n    COUNT(DISTINCT advertiser_id) AS num_advertisers,\n    COUNT(DISTINCT subscription_id) AS num_subscriptions,\n    SUM(contacts_sent) AS contacts_sent,\n    SUM(all_responses) AS all_responses,\n    (SUM(all_responses) * 1.0000) / SUM(contacts_sent) AS all_response_rate,\n    SUM(positive_responses) AS positive_responses,\n    (SUM(positive_responses) * 1.0000) / SUM(contacts_sent) AS positive_response_rate\nFROM \n\trsContacts\nWHERE advertiser_id = 16775855\n\nGROUP BY 1\n\n",
  "queryTables" : [ "datalakehive.core.product_analytics_dim_resume_subscription_current", "datalakehive.imhotep.rscontacts" ],
  "queryIndex" : 144,
  "runStartToQueryComplete" : 956
}, {
  "elapsedMillis" : 10987,
  "totalScheduledMillis" : 1013517,
  "cpuMillis" : 176084,
  "queuedMillis" : 0,
  "executeMillis" : 5026,
  "getResultMillis" : 0,
  "iterateMillis" : 5990,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 2119771812,
  "query" : "with cjs as (\nSELECT \n    dcr.job_hash,\n    sum(cast(dcr.numhiresMade as int)) as numhiresMade,\n    sum(cast(dcr.numHiresMadeIndeed as int)) as numHiresMadeIndeed,\n    sum(cast(dcr.numHiresMadeExternal as int)) as numHiresMadeExternal\nFROM datalake.imhotep.dradisClosedJobReason as dcr\nWHERE dcr.unixtime BETWEEN IMHOTEP_UNIXTIME('2024-04-01') AND IMHOTEP_UNIXTIME('2024-10-24')\n\tand dcr.numhiresMade> '0'\n    and closedJobReason = 'notIndeed'\ngroup by 1\n)\nselect count(distinct cjs.job_hash) as jobs_w_eh,\ncount(distinct hs.jobhash) as jobs_w_eh_n_ih\nfrom cjs \nleft join datalake.imhotep.hiredsignal hs \n\ton hs.unixtime BETWEEN IMHOTEP_UNIXTIME('2022-04-01') AND IMHOTEP_UNIXTIME('2024-10-24') \n    and hs.jobhash = cjs.job_hash \n\n",
  "queryTables" : [ "datalakehive.imhotep.dradisclosedjobreason", "datalakehive.imhotep.hiredsignal" ],
  "queryIndex" : 145,
  "runStartToQueryComplete" : 964
}, {
  "elapsedMillis" : 211674,
  "totalScheduledMillis" : 5244611,
  "cpuMillis" : 2746811,
  "queuedMillis" : 0,
  "executeMillis" : 6673,
  "getResultMillis" : 0,
  "iterateMillis" : 205012,
  "rows" : 3,
  "error" : null,
  "scannedBytes" : 4425440,
  "query" : "SELECT passwd\nFROM logrepo.log.rozNavTiming\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1000d') AND IMHOTEP_UNIXTIME('1d') \nGROUP BY passwd\nLIMIT 10",
  "queryTables" : [ "logrepo.log.roznavtiming" ],
  "queryIndex" : 146,
  "runStartToQueryComplete" : 1180
}, {
  "elapsedMillis" : 10535,
  "totalScheduledMillis" : 650425,
  "cpuMillis" : 364850,
  "queuedMillis" : 0,
  "executeMillis" : 2084,
  "getResultMillis" : 0,
  "iterateMillis" : 8470,
  "rows" : 4,
  "error" : null,
  "scannedBytes" : 4116152412,
  "query" : "with classifiedData AS (\nSELECT\n    regexp_replace(timberlakeclassificationevent.name, '^datalake-prod', 'datalake') as tableName,\n    timberlakeclassificationevent.fieldname,\n    timberlakeclassificationevent.classification,\n    bool_or(timberlakeclassificationevent.elementsexamined > 0 AND timberlakeclassificationevent.elementsmatching > 0) as contentsMatched\nFROM datalake.imhotep.timberlakeclassificationevent\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-09-01') AND IMHOTEP_UNIXTIME('2024-10-15')\nAND classificationtype = 'FIELD'\nAND regexp_like(timberlakeclassificationevent.name, '^datalake-prod')\nGROUP BY\n    name, fieldname, classification\nHAVING\n    bool_or(timberlakeclassificationevent.elementsexamined > 0)\n)\nSELECT\n    classification,\n    COUNT(*) AS total,\n    COUNT(CASE WHEN contentsMatched THEN 1 END) AS matched_true,\n    ROUND(100.0 * COUNT(CASE WHEN contentsMatched THEN 1 END) / COUNT(*), 2) AS percentage_true\nFROM\n    classifiedData\nGROUP BY\n    classification",
  "queryTables" : [ "datalakehive.imhotep.timberlakeclassificationevent" ],
  "queryIndex" : 147,
  "runStartToQueryComplete" : 984
}, {
  "elapsedMillis" : 7036,
  "totalScheduledMillis" : 609046,
  "cpuMillis" : 286321,
  "queuedMillis" : 1,
  "executeMillis" : 3122,
  "getResultMillis" : 0,
  "iterateMillis" : 4007,
  "rows" : 4,
  "error" : null,
  "scannedBytes" : 5457187297,
  "query" : "WITH last_active AS\n\t(\n\t\tSELECT  \n            company_id, \n            MAX(CASE WHEN product = 'indeedplus' THEN FROM_UNIXTIME(unixtime) END) AS ppc_last_active,\n            MAX(CASE WHEN COALESCE(product, '') <> 'indeedplus' THEN FROM_UNIXTIME(unixtime) END) AS ppp_last_active\n\t\tFROM \n        \tdatalake.imhotep.recruit_company_jobs\n\t\tWHERE \n        \tunixtime BETWEEN IMHOTEP_UNIXTIME('2022-01-01') AND IMHOTEP_UNIXTIME('today')\n\t\tGROUP BY\n        \t1\n\t)\nSELECT \n\tCASE \n        WHEN ppc_last_active IS NULL THEN 'PPP - Yet to Migrate'\n        WHEN DATE_TRUNC('week', ppp_last_active) < DATE_TRUNC('week', ppc_last_active) THEN 'PPC Migration started - only active on PPC'\n        WHEN DATE_TRUNC('week', ppp_last_active) >= DATE_TRUNC('week', ppc_last_active) THEN 'PPC Migration started - still active on PPP'\n        WHEN ppp_last_active IS NULL THEN 'PPC - Acquired on PPC no prior PPP'\n\tEND AS migration_status, \n\tCOUNT(company_id) AS companies\nFROM \n\tlast_active\nGROUP BY \n\t1",
  "queryTables" : [ "datalakehive.imhotep.recruit_company_jobs" ],
  "queryIndex" : 148,
  "runStartToQueryComplete" : 982
}, {
  "elapsedMillis" : 13165,
  "totalScheduledMillis" : 11349479,
  "cpuMillis" : 3508562,
  "queuedMillis" : 0,
  "executeMillis" : 3375,
  "getResultMillis" : 0,
  "iterateMillis" : 9922,
  "rows" : 48,
  "error" : null,
  "scannedBytes" : 43673280168,
  "query" : "WITH migration_date AS\n\t(\n\t\tSELECT  \n            company_id, \n            MIN(CASE WHEN product = 'indeedplus' THEN FROM_UNIXTIME(unixtime) END) AS ppc_migration_date,\n\t\t\tMAX(CASE WHEN COALESCE(product, '') <> 'indeedplus' THEN FROM_UNIXTIME(unixtime) END) AS ppp_last_date\n\t\tFROM \n        \tdatalake.imhotep.recruit_company_jobs\n\t\tWHERE \n        \tunixtime BETWEEN IMHOTEP_UNIXTIME('2022-01-01') AND IMHOTEP_UNIXTIME('today')\n\t\tGROUP BY\n        \t1\n\t),\nweekly_rev AS\n\t(\n        SELECT \n            r.company_id, \n            DATE_TRUNC('week', FROM_UNIXTIME(unixtime)) AS week,\n            ppc_migration_date,\n            SUM(rev) AS rev,\n            COUNT(DISTINCT DATE_TRUNC('day', FROM_UNIXTIME(unixtime))) AS active_days\n        FROM \n            datalake.imhotep.recruit_company_jobs r\n        INNER JOIN\n            migration_date m\n            ON r.company_id = m.company_id\n        WHERE\n            unixtime BETWEEN IMHOTEP_UNIXTIME('2022-01-01') AND IMHOTEP_UNIXTIME('today')\n            --Only include migrated companies\n            AND ppc_migration_date IS NOT NULL\n            AND ppp_last_date IS NOT NULL\n        GROUP BY \n            1, 2, 3\n        HAVING\n            SUM(rev) > 0\n    ),\npre_post_active_days AS\n\t(\n    \tSELECT\n    \t\tcompany_id,\n            SUM(CASE WHEN week < ppc_migration_date THEN active_days END) AS pre_migration_active_days,\n            SUM(CASE WHEN week >= ppc_migration_date THEN active_days END) AS post_migration_active_days\n\t\tFROM weekly_rev\n        GROUP BY\n        \t1    \n    ),\npre_migration_weekly_baseline AS\n\t(\n        SELECT \n            company_id,\n            1e0*SUM(rev)/COUNT(week) AS pre_migration_wkly_baseline\n        FROM\n            weekly_rev\n        WHERE\n            week < ppc_migration_date\n            AND week >= DATE('2023-10-01')\n        GROUP BY\n            1\n    ),\nweekly_vs_baseline AS\n\t(\n        SELECT \n            r.company_id, \n            r.week, \n            r.rev, \n            pre_migration_wkly_baseline, \n            100*((1e0*r.rev/pre_migration_wkly_baseline)-1) AS pct_change_vs_ppp\n        FROM\n        \tweekly_rev r\n        INNER JOIN \n        \tpre_migration_weekly_baseline b\n        \tON r.company_id = b.company_id\n\t\tINNER JOIN\n      \t\tpre_post_active_days d\n            ON r.company_id = d.company_id\n\t\tWHERE\n\t\t\t--At least 30 days of pre and post migration activity under each company for reasonable evaluation of behavior\n            pre_migration_active_days >= 30\n        \tAND post_migration_active_days >= 30\n            --Show dates up to latest completely populated week in dataset\n            AND WEEK <= (SELECT MAX(week) FROM weekly_rev WHERE active_days = 7)\n\t)\nSELECT \n\tweek,\n    APPROX_PERCENTILE(pct_change_vs_ppp, 0.5) AS median_pct_change_vs_pre_migration_baseline\nFROM \n\tweekly_vs_baseline\nWHERE\n\tweek > DATE('2024-02-01')\nGROUP BY \n\t1\nORDER BY\n\t1",
  "queryTables" : [ "datalakehive.imhotep.recruit_company_jobs", "datalakehive.imhotep.recruit_company_jobs", "datalakehive.imhotep.recruit_company_jobs", "datalakehive.imhotep.recruit_company_jobs", "datalakehive.imhotep.recruit_company_jobs", "datalakehive.imhotep.recruit_company_jobs", "datalakehive.imhotep.recruit_company_jobs", "datalakehive.imhotep.recruit_company_jobs" ],
  "queryIndex" : 149,
  "runStartToQueryComplete" : 1004
}, {
  "elapsedMillis" : 3603,
  "totalScheduledMillis" : 75357,
  "cpuMillis" : 18642,
  "queuedMillis" : 0,
  "executeMillis" : 1737,
  "getResultMillis" : 0,
  "iterateMillis" : 1896,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 942338032,
  "query" : "WITH \n\nsubscription_attributes AS (\n\n\tSELECT subscription_id, DATE(purchased_at) AS last_purchase_date\n    FROM datalake.core.product_analytics_dim_resume_subscription_current\n    \n    \t\n),\n\nrsContacts AS (\n\n    SELECT\t\n    \tDATE(FROM_UNIXTIME(unixtime)) AS activity_date,\n        subscriptionid AS subscription_id,\n        advertiserid AS advertiser_id,\n        IF(source = 'MATCHES', 'Match', 'Search') AS product,\n        IF(subscriptiontier = 'PROFESSIONAL' \n        \tAND (last_purchase_date < DATE('2024-04-02') OR last_purchase_date IS NULL)\n            AND source != 'MATCHES', 'Legacy Search', 'Smart Sourcing') AS subscription_tier,\n        SUM(sent) AS contacts_sent,\n        SUM(resp_any) AS all_responses,\n        SUM(resp_pos) AS positive_responses\n    FROM \n    \tdatalake.imhotep.rsContacts rsContacts\n    LEFT JOIN\n        subscription_attributes \n        \tON rsContacts.subscriptionid = subscription_attributes.subscription_id\n    WHERE \n    \tunixtime BETWEEN IMHOTEP_UNIXTIME('2024-08-01') AND IMHOTEP_UNIXTIME('today') \n\tGROUP BY 1, 2, 3, 4, 5\n\n)\n\nSELECT\n\tsubscription_tier,\n    COUNT(DISTINCT advertiser_id) AS num_advertisers,\n    COUNT(DISTINCT subscription_id) AS num_subscriptions,\n    SUM(contacts_sent) AS contacts_sent,\n    SUM(all_responses) AS all_responses,\n    (SUM(all_responses) * 1.0000) / SUM(contacts_sent) AS all_response_rate,\n    SUM(positive_responses) AS positive_responses,\n    (SUM(positive_responses) * 1.0000) / SUM(contacts_sent) AS positive_response_rate\nFROM \n\trsContacts\nWHERE advertiser_id = 16775855\n\nGROUP BY 1\n\n",
  "queryTables" : [ "datalakehive.core.product_analytics_dim_resume_subscription_current", "datalakehive.imhotep.rscontacts" ],
  "queryIndex" : 150,
  "runStartToQueryComplete" : 995
}, {
  "elapsedMillis" : 7596,
  "totalScheduledMillis" : 928002,
  "cpuMillis" : 90701,
  "queuedMillis" : 0,
  "executeMillis" : 2381,
  "getResultMillis" : 0,
  "iterateMillis" : 5251,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 2119771812,
  "query" : "with cjs as (\nSELECT \n    dcr.job_hash,\n    sum(cast(dcr.numhiresMade as int)) as numhiresMade,\n    sum(cast(dcr.numHiresMadeIndeed as int)) as numHiresMadeIndeed,\n    sum(cast(dcr.numHiresMadeExternal as int)) as numHiresMadeExternal\nFROM datalake.imhotep.dradisClosedJobReason as dcr\nWHERE dcr.unixtime BETWEEN IMHOTEP_UNIXTIME('2024-04-01') AND IMHOTEP_UNIXTIME('2024-10-24')\n\tand dcr.numhiresMade> '0'\n    and closedJobReason = 'notIndeed'\ngroup by 1\n)\nselect count(distinct cjs.job_hash) as jobs_w_eh,\ncount(distinct hs.jobhash) as jobs_w_eh_n_ih\nfrom cjs \nleft join datalake.imhotep.hiredsignal hs \n\ton hs.unixtime BETWEEN IMHOTEP_UNIXTIME('2022-04-01') AND IMHOTEP_UNIXTIME('2024-10-24') \n    and hs.jobhash = cjs.job_hash \n\n",
  "queryTables" : [ "datalakehive.imhotep.dradisclosedjobreason", "datalakehive.imhotep.hiredsignal" ],
  "queryIndex" : 151,
  "runStartToQueryComplete" : 1007
}, {
  "elapsedMillis" : 7887,
  "totalScheduledMillis" : 7355693,
  "cpuMillis" : 2079391,
  "queuedMillis" : 0,
  "executeMillis" : 3311,
  "getResultMillis" : 0,
  "iterateMillis" : 4657,
  "rows" : 70,
  "error" : null,
  "scannedBytes" : 29098618794,
  "query" : "WITH migration_date AS\n\t(\n\t\tSELECT  \n            company_id, \n            MIN(CASE WHEN product = 'indeedplus' THEN FROM_UNIXTIME(unixtime) END) AS ppc_migration_date,\n\t\t\tMAX(CASE WHEN COALESCE(product, '') <> 'indeedplus' THEN FROM_UNIXTIME(unixtime) END) AS ppp_last_date\n\t\tFROM \n        \tdatalake.imhotep.recruit_company_jobs\n\t\tWHERE \n        \tunixtime BETWEEN IMHOTEP_UNIXTIME('2022-01-01') AND IMHOTEP_UNIXTIME('today')\n\t\tGROUP BY\n        \t1\n\t),\nmonthly_companies AS\n\t(\n\t\tSELECT  \n        \tc.company_id, \n\t\t\t(DATE_TRUNC('month', FROM_UNIXTIME(unixtime))) AS month,\n            (DATE_TRUNC('month', ppc_migration_date)) as migration_month,\n\t\t\tSUM(CASE WHEN COALESCE(product, '') <> 'indeedplus' THEN 1 END) AS ppp_count,\n            SUM(CASE WHEN product = 'indeedplus' THEN 1 END) AS ppc_count,\n            --Identify PPP activity after PPC migration has already started within the same month\n            SUM(CASE WHEN \n            \tCOALESCE(product, '') <> 'indeedplus' \n                AND FROM_UNIXTIME(unixtime) > ppc_migration_date \n\t\t\tTHEN 1 END) AS ppp_after_ppc_count\n\t\tFROM \n        \tdatalake.imhotep.recruit_company_jobs c\n        LEFT JOIN\n        \tmigration_date m\n            ON c.company_id = m.company_id    \n\t\tWHERE \n        \tunixtime BETWEEN IMHOTEP_UNIXTIME('2023-03-01') AND IMHOTEP_UNIXTIME('today')\n\t\tGROUP BY \n        \t1, 2, 3\n\t),\nmonthly_companies_labelled AS\n\t(\n\t\tSELECT  \n        \tc.*,\n\t\t\tCASE \n            \tWHEN (ppc_migration_date IS NULL OR month < migration_month) THEN 'PPP - Yet to migrate'\n\t\t\t\tWHEN ppp_last_DATE IS NULL THEN 'PPC - Acquired on PPC no prior PPP'\n                WHEN \n                \t(COALESCE(ppp_count, 0) > 0\n                    AND ppc_migration_date IS NOT NULL\n                    AND month > migration_month)\n\t\t\t\t\tOR ((COALESCE(ppp_after_ppc_count, 0)) > 0 AND month = migration_month)\n\t\t\t\tTHEN 'PPC Migration started - still active on PPP'\n                WHEN \n                \t(COALESCE(ppp_count, 0) = 0 \n                    AND ppc_migration_date IS NOT NULL\n                    AND month > migration_month\n                    )\n                    OR ((COALESCE(ppp_after_ppc_count, 0)) = 0 AND month = migration_month)\n\t\t\t\tTHEN 'PPC Migration started - only active on PPC'\n\t\t\tEND AS cohort\n\t\tFROM \n        \tmonthly_companies c\n        LEFT JOIN\n        \tmigration_date m\n            ON c.company_id = m.company_id    \n    )\nSELECT\n\tCAST(base_mth.month + INTERVAL '1' MONTH AS DATE) AS month, \n    base_mth.cohort,\n    COUNT(DISTINCT base_mth.company_id) AS companies, \n    COUNT(DISTINCT next_mth.company_id) AS retained_companies,\n\t100*(1e0*COUNT(DISTINCT next_mth.company_id)/COUNT(DISTINCT base_mth.company_id)) AS retention_rate,\n\t100-(100*(1e0*COUNT(DISTINCT next_mth.company_id)/COUNT(DISTINCT base_mth.company_id))) AS churn_rate\nFROM \n\tmonthly_companies_labelled AS base_mth\nLEFT JOIN\n\tmonthly_companies_labelled AS next_mth\n\tON base_mth.company_id = next_mth.company_id\n\tAND base_mth.cohort = next_mth.cohort\n\tAND base_mth.month + INTERVAL '1' MONTH = next_mth.month\nWHERE \n\tbase_mth.month + INTERVAL '1' MONTH <= DATE_TRUNC('month', CURRENT_TIMESTAMP)\nGROUP BY\n\t1, 2\nORDER BY\n\t1",
  "queryTables" : [ "datalakehive.imhotep.recruit_company_jobs", "datalakehive.imhotep.recruit_company_jobs", "datalakehive.imhotep.recruit_company_jobs", "datalakehive.imhotep.recruit_company_jobs", "datalakehive.imhotep.recruit_company_jobs", "datalakehive.imhotep.recruit_company_jobs" ],
  "queryIndex" : 152,
  "runStartToQueryComplete" : 1008
}, {
  "elapsedMillis" : 7175,
  "totalScheduledMillis" : 10602597,
  "cpuMillis" : 2297678,
  "queuedMillis" : 0,
  "executeMillis" : 1358,
  "getResultMillis" : 0,
  "iterateMillis" : 5914,
  "rows" : 48,
  "error" : null,
  "scannedBytes" : 43673280168,
  "query" : "WITH migration_date AS\n\t(\n\t\tSELECT  \n            company_id, \n            MIN(CASE WHEN product = 'indeedplus' THEN FROM_UNIXTIME(unixtime) END) AS ppc_migration_date,\n\t\t\tMAX(CASE WHEN COALESCE(product, '') <> 'indeedplus' THEN FROM_UNIXTIME(unixtime) END) AS ppp_last_date\n\t\tFROM \n        \tdatalake.imhotep.recruit_company_jobs\n\t\tWHERE \n        \tunixtime BETWEEN IMHOTEP_UNIXTIME('2022-01-01') AND IMHOTEP_UNIXTIME('today')\n\t\tGROUP BY\n        \t1\n\t),\nweekly_rev AS\n\t(\n        SELECT \n            r.company_id, \n            DATE_TRUNC('week', FROM_UNIXTIME(unixtime)) AS week,\n            ppc_migration_date,\n            SUM(rev) AS rev,\n            COUNT(DISTINCT DATE_TRUNC('day', FROM_UNIXTIME(unixtime))) AS active_days\n        FROM \n            datalake.imhotep.recruit_company_jobs r\n        INNER JOIN\n            migration_date m\n            ON r.company_id = m.company_id\n        WHERE\n            unixtime BETWEEN IMHOTEP_UNIXTIME('2022-01-01') AND IMHOTEP_UNIXTIME('today')\n            --Only include migrated companies\n            AND ppc_migration_date IS NOT NULL\n            AND ppp_last_date IS NOT NULL\n        GROUP BY \n            1, 2, 3\n        HAVING\n            SUM(rev) > 0\n    ),\npre_post_active_days AS\n\t(\n    \tSELECT\n    \t\tcompany_id,\n            SUM(CASE WHEN week < ppc_migration_date THEN active_days END) AS pre_migration_active_days,\n            SUM(CASE WHEN week >= ppc_migration_date THEN active_days END) AS post_migration_active_days\n\t\tFROM weekly_rev\n        GROUP BY\n        \t1    \n    ),\npre_migration_weekly_baseline AS\n\t(\n        SELECT \n            company_id,\n            1e0*SUM(rev)/COUNT(week) AS pre_migration_wkly_baseline\n        FROM\n            weekly_rev\n        WHERE\n            week < ppc_migration_date\n            AND week >= DATE('2024-01-01')\n        GROUP BY\n            1\n    ),\nweekly_vs_baseline AS\n\t(\n        SELECT \n            r.company_id, \n            r.week, \n            r.rev, \n            pre_migration_wkly_baseline, \n            100*((1e0*r.rev/pre_migration_wkly_baseline)-1) AS pct_change_vs_ppp\n        FROM\n        \tweekly_rev r\n        INNER JOIN \n        \tpre_migration_weekly_baseline b\n        \tON r.company_id = b.company_id\n\t\tINNER JOIN\n      \t\tpre_post_active_days d\n            ON r.company_id = d.company_id\n\t\tWHERE\n        \t--At least 30 days of pre and post migration activity under each company for reasonable evaluation of behavior\n            pre_migration_active_days >= 30\n        \tAND post_migration_active_days >= 30\n            --Show dates up to latest completely populated week in dataset\n            AND WEEK <= (SELECT MAX(week) FROM weekly_rev WHERE active_days = 7)\n\t)\nSELECT \n\tweek,\n    APPROX_PERCENTILE(pct_change_vs_ppp, 0.5) AS median_pct_change_vs_pre_migration_baseline\nFROM \n\tweekly_vs_baseline\nWHERE\n\tweek > DATE('2024-02-01')\nGROUP BY \n\t1\nORDER BY\n\t1",
  "queryTables" : [ "datalakehive.imhotep.recruit_company_jobs", "datalakehive.imhotep.recruit_company_jobs", "datalakehive.imhotep.recruit_company_jobs", "datalakehive.imhotep.recruit_company_jobs", "datalakehive.imhotep.recruit_company_jobs", "datalakehive.imhotep.recruit_company_jobs", "datalakehive.imhotep.recruit_company_jobs", "datalakehive.imhotep.recruit_company_jobs" ],
  "queryIndex" : 153,
  "runStartToQueryComplete" : 1009
}, {
  "elapsedMillis" : 4707,
  "totalScheduledMillis" : 280117,
  "cpuMillis" : 31556,
  "queuedMillis" : 1,
  "executeMillis" : 2229,
  "getResultMillis" : 0,
  "iterateMillis" : 2512,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 2717808792,
  "query" : "WITH \n\nsubscription_attributes AS (\n\n\tSELECT subscription_id, DATE(purchased_at) AS last_purchase_date\n    FROM datalake.core.product_analytics_dim_resume_subscription_current\n    \n    \t\n),\n\nrsContacts AS (\n\n    SELECT\t\n    \tDATE(FROM_UNIXTIME(unixtime)) AS activity_date,\n        subscriptionid AS subscription_id,\n        advertiserid AS advertiser_id,\n        IF(source = 'MATCHES', 'Match', 'Search') AS product,\n        IF(subscriptiontier = 'PROFESSIONAL' \n        \tAND (last_purchase_date < DATE('2024-04-02') OR last_purchase_date IS NULL)\n            AND source != 'MATCHES', 'Legacy Search', 'Smart Sourcing') AS subscription_tier,\n        SUM(sent) AS contacts_sent,\n        SUM(resp_any) AS all_responses,\n        SUM(resp_pos) AS positive_responses\n    FROM \n    \tdatalake.imhotep.rsContacts rsContacts\n    LEFT JOIN\n        subscription_attributes \n        \tON rsContacts.subscriptionid = subscription_attributes.subscription_id\n    WHERE \n    \tunixtime BETWEEN IMHOTEP_UNIXTIME('2024-01-01') AND IMHOTEP_UNIXTIME('today') \n\tGROUP BY 1, 2, 3, 4, 5\n\n)\n\nSELECT\n\tsubscription_tier,\n    COUNT(DISTINCT advertiser_id) AS num_advertisers,\n    COUNT(DISTINCT subscription_id) AS num_subscriptions,\n    SUM(contacts_sent) AS contacts_sent,\n    SUM(all_responses) AS all_responses,\n    (SUM(all_responses) * 1.0000) / SUM(contacts_sent) AS all_response_rate,\n    SUM(positive_responses) AS positive_responses,\n    (SUM(positive_responses) * 1.0000) / SUM(contacts_sent) AS positive_response_rate\nFROM \n\trsContacts\nWHERE advertiser_id = 16775855\n\nGROUP BY 1\n\n",
  "queryTables" : [ "datalakehive.core.product_analytics_dim_resume_subscription_current", "datalakehive.imhotep.rscontacts" ],
  "queryIndex" : 154,
  "runStartToQueryComplete" : 1007
}, {
  "elapsedMillis" : 3705,
  "totalScheduledMillis" : 22938,
  "cpuMillis" : 3533,
  "queuedMillis" : 0,
  "executeMillis" : 2358,
  "getResultMillis" : 0,
  "iterateMillis" : 1547,
  "rows" : 100,
  "error" : null,
  "scannedBytes" : 41503811,
  "query" : "WITH phone_8x8_surveys AS (\n\tSELECT \n      'Live Phone' as channel,\n      'Phone CSAT' as survey_name,\n      CAST(rep_id AS VARCHAR) as rep_id,\n      cs_rep_full_name as rep_full_name,\n      cs_rep_ldap,\n      cs_rep_sup_org_name,\n      cs_rep_team,\n      final_agent_id,\n      final_agent_email,\n      call_datetime as response_date,\n      call_date as survey_date,\n      transaction_id as response_id,\n      call_id as survey_instance_id,\n      'Live Phone' as interaction_type,\n      queue_name,\n      TRY_CAST(q1_response as double) as csat_score,\n      q2_response as indeed_score,\n      q3_response as csat_feedback\n\tFROM datalake.analysis.surveys_8x8_post_call_survey\n),\nsalesforce_case_data AS (\n    SELECT \n      casenumber,\n      status,\n      closeddate,\n      type_cs__c,\n      sub_type_cs__c,\n      product__c,\n      owner_name__c,\n      campaign_type__c,\n      subject\n    FROM datalake.salesforce.\"case\" \n),\nsalesforce_user_data AS (\n\tSELECT\n    \tadc_user_id__c, \n        name, \n        username, \n        email, \n        alias, \n        department, \n        lastname\n\tFROM datalake.salesforce.\"user\"\n)\nSELECT \n\tphone_8x8_surveys.*,\n    salesforce_user_data.name,\n    salesforce_user_data.email,\n    salesforce_user_data.alias,\n    salesforce_user_data.department,\n    salesforce_user_data.lastname\nFROM phone_8x8_surveys\nLEFT JOIN salesforce_user_data\nON phone_8x8_surveys.rep_id = salesforce_user_data.adc_user_id__c\nWHERE csat_score IS NOT NULL AND csat_score  > 0.0\nLIMIT 100",
  "queryTables" : [ "datalakehive.analysis.surveys_8x8_post_call_survey", "datalakehive.salesforce.user" ],
  "queryIndex" : 155,
  "runStartToQueryComplete" : 1006
}, {
  "elapsedMillis" : 4215,
  "totalScheduledMillis" : 1598444,
  "cpuMillis" : 190732,
  "queuedMillis" : 1,
  "executeMillis" : 971,
  "getResultMillis" : 0,
  "iterateMillis" : 3256,
  "rows" : 655,
  "error" : null,
  "scannedBytes" : 8493252369,
  "query" : "WITH daily_data AS (\n    SELECT\n        date_trunc('minute', from_unixtime(lp.unixtime)) as date,\n        moderationApi, \n        moderationType, \n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 30 PRECEDING AND current row) AS block_count,\n\t\tSUM(COUNT(*)) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 30 PRECEDING AND current row) AS request_count,\n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS weekly_block_count,\n\t\tSUM(COUNT(*)) OVER (partition by moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS weekly_request_count\n    FROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.flagged IS NOT NULL\n        AND lp.metric = 'moderation-text'\n        AND unixtime BETWEEN imhotep_unixtime(timestamp '2024-10-24') AND imhotep_unixtime(timestamp '2024-10-29')\n        and moderationApi='openAIModerations' and moderationType='input'\n    GROUP BY\n        date_trunc('minute', from_unixtime(lp.unixtime)),\n        moderationApi, \n        moderationType \n),\nblock_rate AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        cast(request_count * 240 as double) / cast(30 * weekly_request_count as double) as relative_request_rate,\n        cast(block_count as double) / request_count as raw_block_rate,\n        -- We adjust the proportion estimates by adding z^2/2 successes and z^2/2 failures (z^2 obs total) to the counts.\n        -- This can be thought of as a Bayesian prior, or as a correction to the Normal approximation for rates close to 0 or 1.\n        -- For large values of request_count this converges to the raw proportion (block_rate ~ raw_block_rate).\n        -- Using z=3.0, in other words, we're going to require a \"3-sigma\" detection.\n        cast(block_count + 4.5 as double) / (request_count + 9.0) as block_rate, -- corrected/smoothed\n        cast(block_count as double) / (request_count + 9.0) as block_rate_zc, -- zero-centered corrected/smoothed rate (only adding to denominator)\n        cast(weekly_block_count + (240 * 4.5 / 30) as double) / (weekly_request_count + (240 * 9.0 / 30)) as  weekly_block_rate, -- corrected/smoothed\n        cast(weekly_block_count as double) / (weekly_request_count + (240 * 9.0 / 30)) as  weekly_block_rate_zc, -- corrected/smoothed        \n        cast(weekly_block_count as double) /  weekly_request_count as raw_weekly_block_rate,  \n        (cast(block_count + 4.5 as double) / (request_count + 9.0)) - (cast(weekly_block_count + (240 * 4.5 / 30) as double) / (weekly_request_count + (240 * 9.0 / 30))) as change,\n        sum(1.0) over (partition by moderationApi, moderationType ORDER BY date ROWS BETWEEN 240 + 30 PRECEDING AND 1 PRECEDING) as previous_dates_count\n    FROM\n        daily_data\n),\n\nblock_rate_change AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        request_count,\n\t\trelative_request_rate,        \n        weekly_request_count,\n        STDDEV(block_rate-weekly_block_rate) OVER (partition by moderationApi, moderationType ORDER BY date ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS stddev_obs,\n        SQRT((block_rate * (1.0 - block_rate) / request_count) + ((weekly_block_rate * (1.0 - weekly_block_rate) / weekly_request_count))) as stddev_approx,\n        raw_block_rate,  \n        block_rate,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        raw_weekly_block_rate,  \n        weekly_block_rate, -- corrected/smoothed\n        change,\n        case weekly_block_rate_zc\n           when 0 then 0\n           else (block_rate_zc - weekly_block_rate_zc) \n        end as change_zc,\n\t\tprevious_dates_count             \n    FROM\n        block_rate\n),\nconfidence_interval AS (\n    SELECT\n        date,\n        moderationApi, \n        moderationType,\n        stddev_obs,\n\t\tstddev_approx,\n        greatest(stddev_approx, stddev_obs) as stddev,\n        block_rate,\n        block_rate - 6 * greatest(stddev_approx, stddev_obs)  AS block_rate_lower_bound,\n        block_rate + 6 * greatest(stddev_approx, stddev_obs) AS block_rate_upper_bound,          \n        weekly_block_rate,\n\t\tweekly_request_count,\n\t\traw_block_rate,        \n        raw_weekly_block_rate,        \n        change,\n        change_zc,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        request_count,\n\t\trelative_request_rate,                \n        change - 6 * greatest(stddev_approx, stddev_obs) AS change_lower_bound,\n        change + 6 * greatest(stddev_approx, stddev_obs) AS change_upper_bound,\n        previous_dates_count,\n        row_number() OVER (partition by moderationApi, moderationType ORDER BY date) as row_n         \n    FROM\n        block_rate_change\n    --WHERE\n    --\tweekly_request_count > 100\n    --    and request_count > 100\n)\nSELECT\n    date,\n    moderationApi, \n    moderationType,\n    request_count,\n\trelative_request_rate,            \n    stddev_obs,\n    stddev_approx,\n    stddev,\n    block_rate,\n\tblock_rate_lower_bound,\n    block_rate_upper_bound,\n    weekly_block_rate,\n    weekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,    \nchange,\n    change / weekly_block_rate as relative_change,\n    change_zc / weekly_block_rate_zc as relative_change_zc,\n    change_zc,\n    block_rate_zc,\n    weekly_block_rate_zc,        \n    change_lower_bound,\n    change_upper_bound,\n    change_lower_bound * 1.0 / weekly_block_rate as relative_change_lower_bound,\n    change_upper_bound * 1.0 / weekly_block_rate as relative_change_upper_bound,\n    greatest(change_lower_bound / weekly_block_rate, 0) as relative_change_lower_bound_sig,\n    least(change_upper_bound / weekly_block_rate, 0) as relative_change_upper_bound_sig,     \n    IF((change_lower_bound > 0 or change_upper_bound<0) and (previous_dates_count > 240), 1, 0) as is_sig_change,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (date = (max(date) over ())) and (previous_dates_count > 6), 1, 0) as is_latest_date_sig_change,\n    change/stddev as z_score,\n    IF(date = (max(date) over ()), change/stddev, NULL) as latest_date_z_score, \n    max(date) over () as latest_data_date,\n    previous_dates_count            \nFROM\n    confidence_interval -- Note: return values for all dates unlike with the alerting query\nWHERE\n    (change/stddev) IS NOT NULL\n    and ((row_n % 15 = 0)  or (abs(change/stddev) > 6))\n    and previous_dates_count > (0.9 * 240)\nORDER BY\n    date DESC, moderationApi ASC, moderationType DESC",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 156,
  "runStartToQueryComplete" : 1008
}, {
  "elapsedMillis" : 3511,
  "totalScheduledMillis" : 1545413,
  "cpuMillis" : 211387,
  "queuedMillis" : 0,
  "executeMillis" : 1111,
  "getResultMillis" : 0,
  "iterateMillis" : 2442,
  "rows" : 1423,
  "error" : null,
  "scannedBytes" : 8802097630,
  "query" : "WITH daily_data AS (\n    SELECT\n        date_trunc('minute', from_unixtime(lp.unixtime)) as date,\n        appName,\n        moderationApi, \n        moderationType, \n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 30 PRECEDING AND current row) AS block_count,\n\t\tSUM(COUNT(*)) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 30 PRECEDING AND current row) AS request_count,\n\t\tSUM(SUM(CAST(lp.flagged  AS DOUBLE))) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS weekly_block_count,\n\t\tSUM(COUNT(*)) OVER (partition by appName, moderationApi, moderationType ORDER BY date_trunc('minute', from_unixtime(lp.unixtime)) ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS weekly_request_count\n    FROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.flagged IS NOT NULL\n        AND lp.metric = 'moderation-text'\n        AND unixtime BETWEEN imhotep_unixtime(timestamp '2024-10-24') AND imhotep_unixtime(timestamp '2024-10-29')\n        and moderationApi='openAIModerations' and moderationType='input'\n        -- see rate_change query for filters by appName etc.\n    GROUP BY\n        date_trunc('minute', from_unixtime(lp.unixtime)),\n\t\tappName,         \n        moderationApi, \n        moderationType \n),\nblock_rate AS (\n    SELECT\n        date,\n\t\tappName, \n        moderationApi, \n        moderationType,\n        request_count,\n        weekly_request_count,\n        cast(request_count * 240 as double) / cast(30 * weekly_request_count as double) as relative_request_rate,\n        cast(block_count as double) / request_count as raw_block_rate,\n        -- We adjust the proportion estimates by adding z^2/2 successes and z^2/2 failures (z^2 obs total) to the counts.\n        -- This can be thought of as a Bayesian prior, or as a correction to the Normal approximation for rates close to 0 or 1.\n        -- For large values of request_count this converges to the raw proportion (block_rate ~ raw_block_rate).\n        -- Using z=3.0, in other words, we're going to require a \"3-sigma\" detection.\n        cast(block_count + 4.5 as double) / (request_count + 9.0) as block_rate, -- corrected/smoothed\n        cast(block_count as double) / (request_count + 9.0) as block_rate_zc, -- zero-centered corrected/smoothed rate (only adding to denominator)\n        cast(weekly_block_count + (240 * 4.5 / 30) as double) / (weekly_request_count + (240 * 9.0 / 30)) as  weekly_block_rate, -- corrected/smoothed\n        cast(weekly_block_count as double) / (weekly_request_count + (240 * 9.0 / 30)) as  weekly_block_rate_zc, -- corrected/smoothed        \n        cast(weekly_block_count as double) /  weekly_request_count as raw_weekly_block_rate,  \n        (cast(block_count + 4.5 as double) / (request_count + 9.0)) - (cast(weekly_block_count + (240 * 4.5 / 30) as double) / (weekly_request_count + (240 * 9.0 / 30))) as change,\n        sum(1.0) over (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 240 + 30 PRECEDING AND 1 PRECEDING) as previous_dates_count\n    FROM\n        daily_data\n),\n\nblock_rate_change AS (\n    SELECT\n        date,\n\t\tappName,         \n        moderationApi, \n        moderationType,\n        request_count,\n\t\trelative_request_rate,        \n        weekly_request_count,\n        STDDEV(block_rate-weekly_block_rate) OVER (partition by appName, moderationApi, moderationType ORDER BY date ROWS BETWEEN 240 + 30 PRECEDING AND 30 PRECEDING) AS stddev_obs,\n        SQRT((block_rate * (1.0 - block_rate) / request_count) + ((weekly_block_rate * (1.0 - weekly_block_rate) / weekly_request_count))) as stddev_approx,\n        raw_block_rate,  \n        block_rate,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        raw_weekly_block_rate,  \n        weekly_block_rate, -- corrected/smoothed\n        change,\n        case weekly_block_rate_zc\n           when 0 then 0\n           else (block_rate_zc - weekly_block_rate_zc) \n        end as change_zc,\n\t\tprevious_dates_count        \n    FROM\n        block_rate\n),\nconfidence_interval AS (\n    SELECT\n        date,\n\t\tappName,         \n        moderationApi, \n        moderationType,\n        stddev_obs,\n\t\tstddev_approx,\n        greatest(stddev_approx, stddev_obs) as stddev,\n        block_rate,\n        block_rate - 6 * greatest(stddev_approx, stddev_obs)  AS block_rate_lower_bound,\n        block_rate + 6 * greatest(stddev_approx, stddev_obs) AS block_rate_upper_bound,          \n        weekly_block_rate,\n\t\tweekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,        \n        change,\n        change_zc,\n        block_rate_zc,\n        weekly_block_rate_zc,\n        request_count,\n\t\trelative_request_rate,                \n        change - 6 * greatest(stddev_approx, stddev_obs) AS change_lower_bound,\n        change + 6 * greatest(stddev_approx, stddev_obs) AS change_upper_bound,\n        previous_dates_count,\n        row_number() OVER (partition by moderationApi, moderationType ORDER BY date) as row_n \n    FROM\n        block_rate_change\n    --WHERE\n    --\tweekly_request_count > 100\n    --    and request_count > 100\n)\nSELECT\n    date,\n\tappName,     \n    moderationApi, \n    moderationType,\n    request_count,\n\trelative_request_rate,            \n    stddev_obs,\n    stddev_approx,\n    stddev,\n    block_rate,\n\tblock_rate_lower_bound,\n    block_rate_upper_bound,\n    weekly_block_rate,\n    weekly_request_count,\n        raw_block_rate,        \n        raw_weekly_block_rate,    \n    change,\n    change / weekly_block_rate as relative_change,\n    change_zc / weekly_block_rate_zc as relative_change_zc,\n    change_zc,\n    block_rate_zc,\n    weekly_block_rate_zc,\n    \n    change_lower_bound,\n    change_upper_bound,\n    change_lower_bound * 1.0 / weekly_block_rate as relative_change_lower_bound,\n    change_upper_bound * 1.0 / weekly_block_rate as relative_change_upper_bound,\n    greatest(change_lower_bound / weekly_block_rate, 0) as relative_change_lower_bound_sig,\n    least(change_upper_bound / weekly_block_rate, 0) as relative_change_upper_bound_sig,     \n    IF((change_lower_bound > 0 or change_upper_bound<0) and (previous_dates_count > 240), 1, 0) as is_sig_change,\n    IF((change_lower_bound > 0 or change_upper_bound<0) and (date = (max(date) over ())) and (previous_dates_count > 6), 1, 0) as is_latest_date_sig_change,\n    change/stddev as z_score,\n    IF(date = (max(date) over ()), change/stddev, NULL) as latest_date_z_score, \n    max(date) over () as latest_data_date,\n    previous_dates_count            \nFROM\n    confidence_interval -- Note: return values for all dates unlike with the alerting query\nWHERE\n    (change/stddev) IS NOT NULL\n    and ((row_n % 15 = 0)  or (abs(change/stddev) > 6))\n    and previous_dates_count > (0.9 * 240)\nORDER BY\n    date DESC, moderationApi ASC, moderationType DESC",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 157,
  "runStartToQueryComplete" : 1008
}, {
  "elapsedMillis" : 4008,
  "totalScheduledMillis" : 848837,
  "cpuMillis" : 517374,
  "queuedMillis" : 1,
  "executeMillis" : 1561,
  "getResultMillis" : 0,
  "iterateMillis" : 2499,
  "rows" : 37,
  "error" : null,
  "scannedBytes" : 8923745902,
  "query" : "WITH migration_date AS\n\t(\n\t\tSELECT  \n            company_id, \n\t\t\tMIN(CASE WHEN COALESCE(product, '') = 'indeedplus' THEN FROM_UNIXTIME(unixtime) END) AS ppc_migration_date,\n\t\t\tMAX(CASE WHEN COALESCE(product, '') <> 'indeedplus' THEN FROM_UNIXTIME(unixtime) END) AS ppp_last_date,\n            --Last activity date regardless of whether PPC or PPP\n            MAX(FROM_UNIXTIME(unixtime)) AS all_last_date\n\t\tFROM \n        \tdatalake.imhotep.recruit_company_jobs\n\t\tWHERE \n        \tunixtime BETWEEN IMHOTEP_UNIXTIME('2022-01-01') AND IMHOTEP_UNIXTIME('today')\n\t\tGROUP BY\n        \t1\n\t),\nmonthly_companies AS\n\t(\n\t\tSELECT  \n        \tc.company_id, \n\t\t\tCAST(DATE_TRUNC('month', FROM_UNIXTIME(unixtime)) AS DATE) AS month\n\t\tFROM \n        \tdatalake.imhotep.recruit_company_jobs c\n\t\tWHERE \n        \tunixtime BETWEEN IMHOTEP_UNIXTIME('2023-04-01') AND IMHOTEP_UNIXTIME('today')\n\t\tGROUP BY \n        \t1, 2\n\t),\nmonthly_companies_labelled AS\n\t(\n\t\tSELECT\n\t\t\tc.company_id,\n            month,\n            CASE\n            \tWHEN month = CAST(DATE_TRUNC('month', all_last_date) AS DATE) THEN 1 \n\t\t\tEND AS final_active_month_flag,\n            CASE \n            \tWHEN \n                    ppc_migration_date IS NULL \n                    --Retain yet to migrate label for months prior to migration starting\n                    OR month < CAST(DATE_TRUNC('month', ppc_migration_date) AS DATE) \n                THEN 'Yet to start PPC migration'\n\t\t\t\tWHEN\n                \t--Assign migration started label from first month with PPC activity onwards\n                \tCAST(DATE_TRUNC('month', ppc_migration_date) AS DATE) <= month \n\t\t\t\tTHEN 'PPC Migration started'\n\t\t\tEND AS cohort\n\t\tFROM \n        \tmonthly_companies c\n        LEFT JOIN\n        \tmigration_date m\n            ON c.company_id = m.company_id \n\t)\nSELECT\n\tmonth, \n    cohort, \n    COUNT(DISTINCT company_id) AS companies, \n    SUM(final_active_month_flag) AS fully_churned_companies,\n\t100*(1e0*SUM(final_active_month_flag)/COUNT(DISTINCT company_id)) AS fully_churned_rate\nFROM \n\tmonthly_companies_labelled\nWHERE \n\tmonth < DATE_TRUNC('month', CURRENT_DATE)\nGROUP BY \n\t1, 2\nORDER BY\n\t1",
  "queryTables" : [ "datalakehive.imhotep.recruit_company_jobs", "datalakehive.imhotep.recruit_company_jobs" ],
  "queryIndex" : 158,
  "runStartToQueryComplete" : 1008
}, {
  "elapsedMillis" : 17243,
  "totalScheduledMillis" : 46614592,
  "cpuMillis" : 17970156,
  "queuedMillis" : 1,
  "executeMillis" : 3267,
  "getResultMillis" : 0,
  "iterateMillis" : 14005,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 354698785402,
  "query" : "WITH date_range AS (\n    SELECT\n        IMHOTEP_UNIXTIME('2month') AS start_date,\n        IMHOTEP_UNIXTIME('today') AS end_date\n)\nSELECT\n    COUNT(DISTINCT signin.accountid)\nFROM\n    datalake.imhotep.passdailysnapshot snapshot\nJOIN\n    datalake.imhotep.passsigninattempt signin ON snapshot.accountid = signin.accountid\nJOIN\n    date_range dr ON snapshot.unixtime BETWEEN dr.start_date AND dr.end_date\n    AND signin.unixtime BETWEEN dr.start_date AND dr.end_date\nWHERE\n    snapshot.deleted = 0\n    AND signin.successful = 1",
  "queryTables" : [ "datalakehive.imhotep.passdailysnapshot", "datalakehive.imhotep.passsigninattempt" ],
  "queryIndex" : 159,
  "runStartToQueryComplete" : 1040
}, {
  "elapsedMillis" : 5784,
  "totalScheduledMillis" : 1813666,
  "cpuMillis" : 93022,
  "queuedMillis" : 0,
  "executeMillis" : 2683,
  "getResultMillis" : 0,
  "iterateMillis" : 3139,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 5529601248,
  "query" : "WITH \n\nsubscription_attributes AS (\n\n\tSELECT subscription_id, DATE(purchased_at) AS last_purchase_date\n    FROM datalake.core.product_analytics_dim_resume_subscription_current\n    \n    \t\n),\n\nrsContacts AS (\n\n    SELECT\t\n    \tDATE(FROM_UNIXTIME(unixtime)) AS activity_date,\n        subscriptionid AS subscription_id,\n        advertiserid AS advertiser_id,\n        IF(source = 'MATCHES', 'Match', 'Search') AS product,\n        IF(subscriptiontier = 'PROFESSIONAL' \n        \tAND (last_purchase_date < DATE('2023-01-02') OR last_purchase_date IS NULL)\n            AND source != 'MATCHES', 'Legacy Search', 'Smart Sourcing') AS subscription_tier,\n        SUM(sent) AS contacts_sent,\n        SUM(resp_any) AS all_responses,\n        SUM(resp_pos) AS positive_responses\n    FROM \n    \tdatalake.imhotep.rsContacts rsContacts\n    LEFT JOIN\n        subscription_attributes \n        \tON rsContacts.subscriptionid = subscription_attributes.subscription_id\n    WHERE \n    \tunixtime BETWEEN IMHOTEP_UNIXTIME('2023-01-01') AND IMHOTEP_UNIXTIME('today') \n\tGROUP BY 1, 2, 3, 4, 5\n\n)\n\nSELECT\n\tsubscription_tier,\n    COUNT(DISTINCT advertiser_id) AS num_advertisers,\n    COUNT(DISTINCT subscription_id) AS num_subscriptions,\n    SUM(contacts_sent) AS contacts_sent,\n    SUM(all_responses) AS all_responses,\n    (SUM(all_responses) * 1.0000) / SUM(contacts_sent) AS all_response_rate,\n    SUM(positive_responses) AS positive_responses,\n    (SUM(positive_responses) * 1.0000) / SUM(contacts_sent) AS positive_response_rate\nFROM \n\trsContacts\nWHERE advertiser_id = 16775855\n\nGROUP BY 1\n\n",
  "queryTables" : [ "datalakehive.core.product_analytics_dim_resume_subscription_current", "datalakehive.imhotep.rscontacts" ],
  "queryIndex" : 160,
  "runStartToQueryComplete" : 1032
}, {
  "elapsedMillis" : 2830,
  "totalScheduledMillis" : 55786,
  "cpuMillis" : 8548,
  "queuedMillis" : 0,
  "executeMillis" : 1876,
  "getResultMillis" : 0,
  "iterateMillis" : 988,
  "rows" : 2,
  "error" : null,
  "scannedBytes" : 938157014,
  "query" : "WITH \n\nsubscription_attributes AS (\n\n\tSELECT subscription_id, DATE(purchased_at) AS last_purchase_date\n    FROM datalake.core.product_analytics_dim_resume_subscription_current\n    \n    \t\n),\n\nrsContacts AS (\n\n    SELECT\t\n    \tDATE(FROM_UNIXTIME(unixtime)) AS activity_date,\n        subscriptionid AS subscription_id,\n        advertiserid AS advertiser_id,\n        IF(source = 'MATCHES', 'Match', 'Search') AS product,\n        IF(subscriptiontier = 'PROFESSIONAL' \n        \tAND (last_purchase_date < DATE('2024-08-02') OR last_purchase_date IS NULL)\n            AND source != 'MATCHES', 'Legacy Search', 'Smart Sourcing') AS subscription_tier,\n        SUM(sent) AS contacts_sent,\n        SUM(resp_any) AS all_responses,\n        SUM(resp_pos) AS positive_responses\n    FROM \n    \tdatalake.imhotep.rsContacts rsContacts\n    LEFT JOIN\n        subscription_attributes \n        \tON rsContacts.subscriptionid = subscription_attributes.subscription_id\n    WHERE \n    \tunixtime BETWEEN IMHOTEP_UNIXTIME('2024-08-02') AND IMHOTEP_UNIXTIME('today') \n\tGROUP BY 1, 2, 3, 4, 5\n\n)\n\nSELECT\n\tsubscription_tier,\n    COUNT(DISTINCT advertiser_id) AS num_advertisers,\n    COUNT(DISTINCT subscription_id) AS num_subscriptions,\n    SUM(contacts_sent) AS contacts_sent,\n    SUM(all_responses) AS all_responses,\n    (SUM(all_responses) * 1.0000) / SUM(contacts_sent) AS all_response_rate,\n    SUM(positive_responses) AS positive_responses,\n    (SUM(positive_responses) * 1.0000) / SUM(contacts_sent) AS positive_response_rate\nFROM \n\trsContacts\nWHERE advertiser_id = 16775855\n\nGROUP BY 1\n\n",
  "queryTables" : [ "datalakehive.core.product_analytics_dim_resume_subscription_current", "datalakehive.imhotep.rscontacts" ],
  "queryIndex" : 161,
  "runStartToQueryComplete" : 1060
}, {
  "elapsedMillis" : 178399,
  "totalScheduledMillis" : 138663149,
  "cpuMillis" : 119810379,
  "queuedMillis" : 1,
  "executeMillis" : 2565,
  "getResultMillis" : 0,
  "iterateMillis" : 175869,
  "rows" : 88,
  "error" : null,
  "scannedBytes" : 11504911694082,
  "query" : "SELECT \n\tELEMENT_AT(data, 'rum_context_element') as element,\n    ELEMENT_AT(data, 'rum_context_module') as module\nFROM \n\tlogrepo.raw_log.one_host_rum_action\nWHERE \n\tunixtime > IMHOTEP_UNIXTIME('yesterday') AND\n    ELEMENT_AT(data, 'rum_view_name') = '/jobs' AND\n    ELEMENT_AT(data, 'rum_context_scope') = 'jobman-feature-modules' AND\n    ELEMENT_AT(data, 'rum_context_customActionType') = 'click' AND\n    ELEMENT_AT(data, 'rum_view_url') LIKE '%?%' AND\n    ELEMENT_AT(data, 'rum_context_additional_searchTkUuid') IS NOT NULL AND\n    ELEMENT_AT(data, 'rum_context_additional_clickDepthIndex') IS NOT NULL AND\n    ELEMENT_AT(data, 'rum_context_additional_clickDepthPage') IS NOT NULL\n--    CARDINALITY(SPLIT(ELEMENT_AT(data, 'rum_context_additional_clickDepthIndex'), ',')) > 1 AND\n--    CARDINALITY(SPLIT(ELEMENT_AT(data, 'rum_context_additional_clickDepthPage'), ',')) > 1\nGROUP BY\n\tELEMENT_AT(data, 'rum_context_element'),\n    ELEMENT_AT(data, 'rum_context_module')",
  "queryTables" : [ "logrepo.raw_log.one_host_rum_action" ],
  "queryIndex" : 162,
  "runStartToQueryComplete" : 1244
}, {
  "elapsedMillis" : 2896,
  "totalScheduledMillis" : 61694,
  "cpuMillis" : 11886,
  "queuedMillis" : 0,
  "executeMillis" : 1755,
  "getResultMillis" : 0,
  "iterateMillis" : 1181,
  "rows" : 2,
  "error" : null,
  "scannedBytes" : 938100005,
  "query" : "WITH \n\nsubscription_attributes AS (\n\n\tSELECT subscription_id, DATE(purchased_at) AS last_purchase_date\n    FROM datalake.core.product_analytics_dim_resume_subscription_current\n    \n    \t\n),\n\nrsContacts AS (\n\n    SELECT\t\n    \tDATE(FROM_UNIXTIME(unixtime)) AS activity_date,\n        subscriptionid AS subscription_id,\n        advertiserid AS advertiser_id,\n        IF(source = 'MATCHES', 'Match', 'Search') AS product,\n        IF(subscriptiontier = 'PROFESSIONAL' \n        \tAND (last_purchase_date < DATE('2024-08-02') OR last_purchase_date IS NULL)\n            AND source != 'MATCHES', 'Legacy Search', 'Smart Sourcing') AS subscription_tier,\n        SUM(sent) AS contacts_sent,\n        SUM(resp_any) AS all_responses,\n        SUM(resp_pos) AS positive_responses\n    FROM \n    \tdatalake.imhotep.rsContacts rsContacts\n    LEFT JOIN\n        subscription_attributes \n        \tON rsContacts.subscriptionid = subscription_attributes.subscription_id\n    WHERE \n    \tunixtime BETWEEN IMHOTEP_UNIXTIME('2024-08-02') AND IMHOTEP_UNIXTIME('today') \n\tGROUP BY 1, 2, 3, 4, 5\n\n)\n\nSELECT\n\tsubscription_tier,\n    COUNT(DISTINCT advertiser_id) AS num_advertisers,\n    COUNT(DISTINCT subscription_id) AS num_subscriptions,\n    SUM(contacts_sent) AS contacts_sent,\n    SUM(all_responses) AS all_responses,\n    (SUM(all_responses) * 1.0000) / SUM(contacts_sent) AS all_response_rate,\n    SUM(positive_responses) AS positive_responses,\n    (SUM(positive_responses) * 1.0000) / SUM(contacts_sent) AS positive_response_rate\nFROM \n\trsContacts\nWHERE advertiser_id = 16775855\n\nGROUP BY 1\n\n",
  "queryTables" : [ "datalakehive.core.product_analytics_dim_resume_subscription_current", "datalakehive.imhotep.rscontacts" ],
  "queryIndex" : 163,
  "runStartToQueryComplete" : 1071
}, {
  "elapsedMillis" : 3513,
  "totalScheduledMillis" : 54032,
  "cpuMillis" : 35260,
  "queuedMillis" : 1,
  "executeMillis" : 2819,
  "getResultMillis" : 0,
  "iterateMillis" : 787,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 103004183,
  "query" : "WITH test_adids AS (\n    SELECT DISTINCT adid\n    FROM datalake.imhotep.adCampaignPerformanceTest51\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-09-26 00:00:00') \n                      AND IMHOTEP_UNIXTIME('2024-09-26 08:00:00')\n),\nverification_adids AS (\n    SELECT DISTINCT adid\n    FROM datalake.imhotep.adCampaignPerformanceVerification\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-09-26 00:00:00') \n                      AND IMHOTEP_UNIXTIME('2024-09-26 08:00:00')\n),\nadids_in_test_not_in_verification AS (\n    SELECT adid\n    FROM test_adids\n    EXCEPT\n    SELECT adid\n    FROM verification_adids\n),\nadids_in_verification_not_in_test AS (\n    SELECT adid\n    FROM verification_adids\n    EXCEPT\n    SELECT adid\n    FROM test_adids\n)\nSELECT\n    'adids_in_test_not_in_verification' AS difference_type,\n    ARRAY_AGG(adid) AS adid_list\nFROM (\n    SELECT adid\n    FROM adids_in_test_not_in_verification\n    LIMIT 10\n) t",
  "queryTables" : [ "datalakehive.imhotep.adcampaignperformancetest51", "datalakehive.imhotep.adcampaignperformanceverification" ],
  "queryIndex" : 164,
  "runStartToQueryComplete" : 1073
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 0,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_174004_00188_vjepj): Access Denied: Cannot select from columns [billing_country, advertiser_name, type, parent_company_id, advertiser_id] in table or view core: User adevore is not authorized to query Table: core.client_attributes_dim_advertiser_attributes_current in Catalog: datalakehive. Rejected columns: {datalake.core.client_attributes_dim_advertiser_attributes_current=[billing_country, advertiser_name, type, parent_company_id, advertiser_id]} ",
  "scannedBytes" : 0,
  "query" : "  WITH raw_qual_response_base AS (\n      SELECT\n        *,\n        ROW_NUMBER() OVER (PARTITION BY id ORDER BY s3_load_timestamp DESC) AS priority_recent\n      FROM \"datalake\".\"qualtrics_survey_data_raw\".\"qual_responses_base\"\n  ),\n  raw_sbs_survey as (\n    SELECT \n    CAST(sbs.response_id AS VARCHAR) as response_id,\n    CAST(campaign_name AS VARCHAR) as campaign_name, \n    CAST(service_rep_first_name AS VARCHAR) as rep_first_name,\n    CAST(service_rep_last_name AS VARCHAR) as rep_last_name,\n    CAST(email_sent_at AS VARCHAR) as sent_date,\n    CAST(response_at AS DATE) as response_date,\n    CAST(JSON_EXTRACT_SCALAR(values_json, '$.x_variable') AS VARCHAR) as x_variable,\n    CAST(interaction_type AS VARCHAR) as interaction_type,\n    case_id,\n    '' as case_number,\n    CAST(rep_csat_score AS VARCHAR) as csat_score, \n    CAST(rep_csat_feedback AS VARCHAR) as csat_feedback,\n    CAST(indeed_score AS VARCHAR) as indeed_score,\n    CAST(indeed_feedback AS VARCHAR) as indeed_feedback,\n    CAST(advertiser_id AS VARCHAR) as advertiser_id,\n    CAST(cs_rep_id AS VARCHAR) as cs_rep_id\n    FROM datalake.analysis.surveys_qualtrics_sbs_shared_csat_survey sbs\n      JOIN raw_qual_response_base qrbase \n    ON sbs.response_id = qrbase.response_id AND priority_recent = 1\n  ),\n  raw_vendor_survey as (\n    SELECT\n    CAST(qualtrics_response_id AS VARCHAR) as response_id,\n    CAST(campaign_name AS VARCHAR) as campaign_name,\n    CAST(emp_first_name AS VARCHAR) as rep_first_name,\n    '' as rep_last_name,\n    CAST(sent_at AS VARCHAR) as sent_date,\n    CAST(response_at AS DATE) as response_date,\n    CAST(x_variable AS VARCHAR) as x_variable,\n    CAST(interaction_type AS VARCHAR) as interaction_type,\n    salesforce_case_id as case_id,\n    CAST(salesforce_case_number AS VARCHAR) as case_number,\n    CAST(rep_csat AS VARCHAR) as csat_score,\n    CAST(rep_feedback AS VARCHAR) as csat_feedback,\n    CAST(indeed_csat AS VARCHAR) AS indeed_score,\n    CAST(indeed_feedback AS VARCHAR) as indeed_feedback,\n    CAST(advertiser_id AS VARCHAR) as advertiser_id,\n    CAST(COALESCE(raven_agent_id, CAST(zendesk_agent_id AS VARCHAR)) AS VARCHAR) as cs_rep_id\n      FROM datalake.analysis.surveys_qualtrics_vendor_csat qcsat\n      JOIN raw_qual_response_base qrbase \n      ON qcsat.qualtrics_response_id = qrbase.response_id AND priority_recent = 1\n  ),\n  raw_ded_survey as (\n    SELECT \n    CAST(ded.response_id AS VARCHAR) as response_id, \n    CAST(campaign_name AS VARCHAR) as campaign_name, \n    CAST(service_rep_first_name AS VARCHAR) as rep_first_name, \n    CAST(service_rep_last_name AS VARCHAR) as rep_last_name, \n    CAST(email_sent_at AS VARCHAR) as sent_date,\n    CAST(response_at AS DATE) as response_date,\n    CAST(JSON_EXTRACT_SCALAR(values_json, '$.x_variable') AS VARCHAR) as x_variable, \n    CAST(interaction_type AS VARCHAR) as interaction_type, \n    case_id, \n    CAST(case_number AS VARCHAR) as case_number,\n    CAST(rep_csat_score AS VARCHAR) as csat_score, \n    CAST(rep_csat_feedback AS VARCHAR) as csat_feedback, \n    CAST(indeed_score AS VARCHAR) AS indeed_score,\n    CAST(indeed_feedback AS VARCHAR) as indeed_feedback,\n    CAST(advertiser_id AS VARCHAR) as advertiser_id, \n    CAST(cs_rep_id AS VARCHAR) as cs_rep_id\n    FROM datalake.analysis.surveys_dedicated_agency_csat_survey ded\n    JOIN raw_qual_response_base qrbase \n    ON ded.response_id = qrbase.response_id AND priority_recent = 1\n  ),\n  joined_surveys as (\n    SELECT * FROM raw_sbs_survey\n    UNION ALL \n    SELECT * FROM raw_vendor_survey\n    UNION ALL \n    SELECT * FROM raw_ded_survey\n  ),\n  salesforce_case_data as (\n    SELECT DISTINCT\n      casenumber,\n      status,\n        closeddate,\n        type_cs__c,\n        sub_type_cs__c,\n        product__c,\n        owner_name__c,\n        campaign_type__c,\n        subject\n    FROM datalake.salesforce.\"case\" \n ),\n  salesforce_user_data as (\n\tSELECT DISTINCT \n    \tadc_user_id__c, \n        name, \n        username, \n        email, \n        alias, \n        department, \n        lastname\n\tFROM datalake.salesforce.\"user\"\n ),\n advertiser_data as (\n    select distinct \n      a.advertiser_id , \n        a.advertiser_name , \n        a.type as advertiser_type , \n        a.billing_country , \n        p.parent_company_id , \n        p.parent_company_name , \n        p.company_size_segment as parent_company_size_segment \n    from datalake.core.client_attributes_dim_advertiser_attributes_current a \n    left join datalake.core.client_attributes_dim_parent_attributes_current p \n    on a.parent_company_id = p.parent_company_id\n  ),\n  surveys_advertiser as (\n    SELECT DISTINCT\n        (SELECT survey_id FROM \"datalake\".\"qualtrics_survey_data_raw\".\"qual_responses_base\" \n            WHERE response_id = js.response_id ORDER BY s3_load_timestamp DESC LIMIT 1) AS survey_id, \n        js.*,\n        ad.advertiser_name,\n        ad.advertiser_type,\n        ad.billing_country,\n        ad.parent_company_id,\n        ad.parent_company_name,\n        ad.parent_company_size_segment\n      FROM joined_surveys js\n      LEFT JOIN advertiser_data ad\n      ON js.advertiser_id = CAST(ad.advertiser_id AS VARCHAR(256))\n  ),\n  surveys_salesforce as (\n  \tSELECT \n    \tsa.*, \n        sc.status,\n        sc.closeddate,\n        sc.type_cs__c,\n        sc.sub_type_cs__c,\n        sc.product__c,\n        sc.owner_name__c,\n        sc.campaign_type__c,\n        sc.subject,\n        su.name, \n        su.username, \n        su.email, \n        su.alias, \n        su.department, \n        su.lastname\n    FROM surveys_advertiser sa\n    LEFT JOIN salesforce_case_data sc\n    ON sa.case_number = CAST(sc.casenumber AS VARCHAR(256))\n    LEFT JOIN salesforce_user_data su\n    ON sa.cs_rep_id = CAST(su.adc_user_id__c AS VARCHAR(256))\n  ),\n web_surveys as (\n\tSELECT DISTINCT\n  \t\t'Web' as channel,\n    \tNULL as queue,\n        sd.survey_name as survey_name,\n    \tssa.* \n\tFROM surveys_salesforce ssa\n    LEFT JOIN datalake.qualtrics_survey_data_raw.qual_survey_base sd\n    ON CAST(sd.survey_id AS varchar) = CAST(ssa.survey_id as varchar)\n )\nSELECT count(*) FROM web_surveys\n ",
  "queryTables" : [ "datalakehive.analysis.surveys_dedicated_agency_csat_survey", "datalakehive.analysis.surveys_qualtrics_sbs_shared_csat_survey", "datalakehive.analysis.surveys_qualtrics_vendor_csat", "datalakehive.core.client_attributes_dim_advertiser_attributes_current", "datalakehive.core.client_attributes_dim_parent_attributes_current", "datalakehive.qualtrics_survey_data_raw.qual_responses_base", "datalakehive.qualtrics_survey_data_raw.qual_responses_base", "datalakehive.qualtrics_survey_data_raw.qual_responses_base", "datalakehive.qualtrics_survey_data_raw.qual_responses_base", "datalakehive.qualtrics_survey_data_raw.qual_survey_base", "datalakehive.salesforce.case", "datalakehive.salesforce.user" ],
  "queryIndex" : 165,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 45541,
  "totalScheduledMillis" : 69140962,
  "cpuMillis" : 21647029,
  "queuedMillis" : 0,
  "executeMillis" : 5181,
  "getResultMillis" : 0,
  "iterateMillis" : 40403,
  "rows" : 9,
  "error" : null,
  "scannedBytes" : 425356113549,
  "query" : "with cjs as (\nSELECT \n    dcr.job_hash,\n    sum(cast(dcr.numhiresMade as int)) as numhiresMade,\n    sum(cast(dcr.numHiresMadeIndeed as int)) as numHiresMadeIndeed,\n    sum(cast(dcr.numHiresMadeExternal as int)) as numHiresMadeExternal\nFROM datalake.imhotep.dradisClosedJobReason as dcr\nWHERE dcr.unixtime BETWEEN IMHOTEP_UNIXTIME('2024-04-01') AND IMHOTEP_UNIXTIME('2024-10-24')\n\tand dcr.numhiresMade> '0'\ngroup by 1\n)\n,job_id_job_hash_mapping as (\nSELECT \n\tjobhash_underscore, max(agg_job_id) as agg_job_id\nFROM datalake.imhotep.job_id_job_hash_mapping\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-10-23') AND IMHOTEP_UNIXTIME('2024-10-24')\n\tand jobhash_underscore in (select distinct job_hash from cjs)\ngroup by 1 \n)\n,jam as (\nselect \n\tagg_job_id,\n    max(job_product) as job_product,\n    max(job_country_code) as job_country_code,\n    sum(clicks) as clicks,\n    sum(apply_starts) as apply_starts,\n    sum(applies) as applies\nfrom datalake.imhotep.jobactivitymetrics\nwhere day between '2022-04-01' and 'today'\t\n\tand agg_job_id in (select distinct agg_job_id from job_id_job_hash_mapping)\ngroup by 1 \n)\n\n,view as (\nselect \n\tjob_id_job_hash_mapping.agg_job_id,\n    coalesce(applies,0) as applies,\n    coalesce(apply_starts,0) as apply_starts,\n    coalesce(clicks,0) as clicks,\n    numhiresMade,\n    numHiresMadeIndeed,\n    numHiresMadeExternal,\n    job_product,\n    job_country_code\nfrom cjs \njoin job_id_job_hash_mapping on job_id_job_hash_mapping.jobhash_underscore = cjs.job_hash\nleft join jam\n\ton job_id_job_hash_mapping.agg_job_id = jam.agg_job_id\n)\n\nselect \n   case when job_country_code in ('US', 'JP') then job_country_code else 'RoW' end as job_country,\n   case when numHiresMadeExternal>0 and numHiresMadeExternal = numhiresMade then 'Only External'\n        when numHiresMadeExternal>0 and numHiresMadeIndeed>0 then 'External + Internal'\n        else 'Only Internal' end as cohort, \n   sum(numhiresMade) as hires,\n   1.00*count(distinct case when applies>0 then agg_job_id end)/count(distinct agg_job_id) as pct_job_w_apply,\n   1.00*count(distinct case when applies<10 then agg_job_id end)/count(distinct agg_job_id) as pct_job_w_lessthan10applies,\n   avg(applies) as avg_applies,\n   avg(apply_starts) as avg_applystarts,\n   avg(clicks) as avg_clicks\nfrom view \ngroup by 1,2",
  "queryTables" : [ "datalakehive.imhotep.dradisclosedjobreason", "datalakehive.imhotep.dradisclosedjobreason", "datalakehive.imhotep.dradisclosedjobreason", "datalakehive.imhotep.job_id_job_hash_mapping", "datalakehive.imhotep.job_id_job_hash_mapping", "datalakehive.imhotep.jobactivitymetrics" ],
  "queryIndex" : 166,
  "runStartToQueryComplete" : 1142
}, {
  "elapsedMillis" : 3503,
  "totalScheduledMillis" : 66628,
  "cpuMillis" : 4331,
  "queuedMillis" : 0,
  "executeMillis" : 2800,
  "getResultMillis" : 0,
  "iterateMillis" : 724,
  "rows" : 12806,
  "error" : null,
  "scannedBytes" : 1714745,
  "query" : "WITH lib_base AS (\n\n  SELECT\n      tier_0,\n      tier_1,\n      tier_2,\n      tier_3,\n      tier_4,\n      tier_5,\n      tier_6,\n      tier_7,\n      tier_8,\n      lib.teamId,\n      'lib' AS resource_type,\n      'n/a' AS env,\n      languageRuntime AS languageRuntime,\n      libraryName AS resource_name,\n      CAST(highestVersionPublishAgeDays AS BIGINT) AS age\n  FROM libraryFreshnessSnapshot lib\n  LEFT JOIN teamwrksSnapshot tm\n  ON lib.teamid = tm.teamid\n  WHERE lib.unixtime >= IMHOTEP_UNIXTIME('2d') AND lib.unixtime < IMHOTEP_UNIXTIME('1d')\n  AND tm.unixtime >= IMHOTEP_UNIXTIME('2d') AND tm.unixtime < IMHOTEP_UNIXTIME('1d')\n),\n\napp_base AS (\n  SELECT\n      tier_0,\n      tier_1,\n      tier_2,\n      tier_3,\n      tier_4,\n      tier_5,\n      tier_6,\n      tier_7,\n      tier_8,\n      app.teamId,\n      'app' AS resource_type,\n      env,\n      applicationRuntime AS languageRuntime,\n      applicationName AS resource_name,\n      lockdownAge AS age\n  FROM applicationFreshnessSnapshot AS app\n  LEFT JOIN teamwrksSnapshot tm\n  ON app.teamid = tm.teamid\n  WHERE app.unixtime >= IMHOTEP_UNIXTIME('2d') AND app.unixtime < IMHOTEP_UNIXTIME('1d')\n  AND tm.unixtime >= IMHOTEP_UNIXTIME('2d') AND tm.unixtime < IMHOTEP_UNIXTIME('1d')\n)\n\n\nSELECT *\nFROM (\n  SELECT *\n  FROM app_base\n  UNION ALL\n  SELECT *\n  FROM lib_base\n)\nWHERE env != 'MISSING'",
  "queryTables" : [ "skipperhive.imhotep.applicationfreshnesssnapshot", "skipperhive.imhotep.libraryfreshnesssnapshot", "skipperhive.imhotep.teamwrkssnapshot", "skipperhive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 167,
  "runStartToQueryComplete" : 1113
}, {
  "elapsedMillis" : 3152,
  "totalScheduledMillis" : 6183,
  "cpuMillis" : 1800,
  "queuedMillis" : 1,
  "executeMillis" : 2292,
  "getResultMillis" : 0,
  "iterateMillis" : 882,
  "rows" : 12806,
  "error" : null,
  "scannedBytes" : 1714745,
  "query" : "WITH lib_base AS (\n\n  SELECT\n      tier_0,\n      tier_1,\n      tier_2,\n      tier_3,\n      tier_4,\n      tier_5,\n      tier_6,\n      tier_7,\n      tier_8,\n      lib.teamId,\n      'lib' AS resource_type,\n      'n/a' AS env,\n      languageRuntime AS languageRuntime,\n      libraryName AS resource_name,\n      CAST(highestVersionPublishAgeDays AS BIGINT) AS age\n  FROM libraryFreshnessSnapshot lib\n  LEFT JOIN teamwrksSnapshot tm\n  ON lib.teamid = tm.teamid\n  WHERE lib.unixtime >= IMHOTEP_UNIXTIME('2d') AND lib.unixtime < IMHOTEP_UNIXTIME('1d')\n  AND tm.unixtime >= IMHOTEP_UNIXTIME('2d') AND tm.unixtime < IMHOTEP_UNIXTIME('1d')\n),\n\napp_base AS (\n  SELECT\n      tier_0,\n      tier_1,\n      tier_2,\n      tier_3,\n      tier_4,\n      tier_5,\n      tier_6,\n      tier_7,\n      tier_8,\n      app.teamId,\n      'app' AS resource_type,\n      env,\n      applicationRuntime AS languageRuntime,\n      applicationName AS resource_name,\n      lockdownAge AS age\n  FROM applicationFreshnessSnapshot AS app\n  LEFT JOIN teamwrksSnapshot tm\n  ON app.teamid = tm.teamid\n  WHERE app.unixtime >= IMHOTEP_UNIXTIME('2d') AND app.unixtime < IMHOTEP_UNIXTIME('1d')\n  AND tm.unixtime >= IMHOTEP_UNIXTIME('2d') AND tm.unixtime < IMHOTEP_UNIXTIME('1d')\n)\n\n\nSELECT *\nFROM (\n  SELECT *\n  FROM app_base\n  UNION ALL\n  SELECT *\n  FROM lib_base\n)\nWHERE env != 'MISSING'",
  "queryTables" : [ "skipperhive.imhotep.applicationfreshnesssnapshot", "skipperhive.imhotep.libraryfreshnesssnapshot", "skipperhive.imhotep.teamwrkssnapshot", "skipperhive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 168,
  "runStartToQueryComplete" : 1115
}, {
  "elapsedMillis" : 7403,
  "totalScheduledMillis" : 115308,
  "cpuMillis" : 24688,
  "queuedMillis" : 0,
  "executeMillis" : 6219,
  "getResultMillis" : 0,
  "iterateMillis" : 1220,
  "rows" : 59,
  "error" : null,
  "scannedBytes" : 101411184,
  "query" : "WITH lib_base AS (\n\n  SELECT\n      tier_0,\n      tier_1,\n      tier_2,\n      tier_3,\n      tier_4,\n      tier_5,\n      tier_6,\n      tier_7,\n      tier_8,\n      lib.teamId,\n      'lib' AS resource_type,\n      'n/a' AS env,\n      languageRuntime AS languageRuntime,\n      libraryName AS resource_name,\n      CAST(highestVersionPublishAgeDays AS BIGINT) AS age,\n      lib.day\n  FROM libraryFreshnessSnapshot lib\n  LEFT JOIN teamwrksSnapshot tm\n  ON lib.teamid = tm.teamid\n  AND lib.day = DATE_FORMAT(CAST(tm.day AS TIMESTAMP), '%Y-%m-%d')\n  WHERE lib.unixtime BETWEEN IMHOTEP_UNIXTIME('60d') AND IMHOTEP_UNIXTIME('1d')\n  AND tm.unixtime BETWEEN IMHOTEP_UNIXTIME('60d') AND IMHOTEP_UNIXTIME('1d')\n),\n\napp_base AS (\n  SELECT\n      tier_0,\n      tier_1,\n      tier_2,\n      tier_3,\n      tier_4,\n      tier_5,\n      tier_6,\n      tier_7,\n      tier_8,\n      app.teamId,\n      'app' AS resource_type,\n      env,\n      applicationRuntime AS languageRuntime,\n      applicationName AS resource_name,\n      lockdownAge AS age,\n      app.day\n  FROM applicationFreshnessSnapshot AS app\n  LEFT JOIN teamwrksSnapshot tm\n  ON app.teamid = tm.teamid\n  AND app.day = DATE_FORMAT(CAST(tm.day AS TIMESTAMP), '%Y-%m-%d')\n  WHERE app.unixtime BETWEEN IMHOTEP_UNIXTIME('60d') AND IMHOTEP_UNIXTIME('1d')\n  AND tm.unixtime BETWEEN IMHOTEP_UNIXTIME('60d') AND IMHOTEP_UNIXTIME('1d')\n)\n\n\nSELECT\n\tday,\n    100.0 * COUNT_IF(age < 90)/COUNT(*) AS freshness_percentage\nFROM (\n  SELECT *\n  FROM app_base\n  UNION ALL\n  SELECT *\n  FROM lib_base\n)\nWHERE ('' = '' OR teamId like '')\n  AND ('Indeed' = '' OR tier_0 like 'Indeed')\n  AND ('' = '' OR tier_1 like '')\n  AND ('' = '' OR tier_2 like '')\n  AND ('' = '' OR tier_3 like '')\n  AND ('' = '' OR tier_4 like '')\n  AND ('' = '' OR tier_5 like '')\n  AND ('' = '' OR tier_6 like '')\n  AND ('' = '' OR tier_7 like '')\n  AND ('' = '' OR tier_8 like '')\nGROUP BY day",
  "queryTables" : [ "skipperhive.imhotep.applicationfreshnesssnapshot", "skipperhive.imhotep.libraryfreshnesssnapshot", "skipperhive.imhotep.teamwrkssnapshot", "skipperhive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 169,
  "runStartToQueryComplete" : 1119
}, {
  "elapsedMillis" : 2579,
  "totalScheduledMillis" : 1273392,
  "cpuMillis" : 98612,
  "queuedMillis" : 0,
  "executeMillis" : 1388,
  "getResultMillis" : 0,
  "iterateMillis" : 1301,
  "rows" : 100,
  "error" : null,
  "scannedBytes" : 2925062655,
  "query" : "with msa_jobs as (\n    select sj.jobid as agg_job_id\n    , jlmsa\n    , trim(jlmsa) as jlmsa_trimmed\n--    , sum(case when jlmsa!='' then 1 else 0 end) AS urban_jobs\n--    , sum(case when jlmsa='' then 1 else 0 end) AS rural_jobs\n    , max_by(jlmsa, hour) as latest_msa\n    from datalake.imhotep.searchablejobs sj\n    where hour between date_format(from_unixtime(to_unixtime(date('2024-10-01'))), '%Y-%m-%d %H:%i:%s') and date_format(from_unixtime(to_unixtime(date('2024-10-02'))), '%Y-%m-%d %H:%i:%s')\n    group by 1,2,3\n)\n\nselect * from msa_jobs\nwhere jlmsa=''\nlimit 100\n",
  "queryTables" : [ "datalakehive.imhotep.searchablejobs" ],
  "queryIndex" : 170,
  "runStartToQueryComplete" : 1116
}, {
  "elapsedMillis" : 2620,
  "totalScheduledMillis" : 5769,
  "cpuMillis" : 1735,
  "queuedMillis" : 1,
  "executeMillis" : 2156,
  "getResultMillis" : 0,
  "iterateMillis" : 496,
  "rows" : 1581,
  "error" : null,
  "scannedBytes" : 967746,
  "query" : "WITH golden_amis AS (\n    SELECT name, id, created_on, day\n    FROM datalake.imhotep.aws_ami\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n    AND REGEXP_LIKE(name, '^indeed_(ubuntu|(dsp_ecs_)?centos_7|amzn2|AL2023).*')\n)\n, ec2 AS (\n\tSELECT name, image_id, id, account_id, launched_on\n    FROM datalake.imhotep.aws_ec2\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n    AND state='running'\n    AND (emr_role='' OR emr_role IS NULL)\n)\nSELECT DISTINCT(e.id) AS ec2_id, e.name AS ec2_name, e.image_id, e.account_id, e.launched_on, g.name as ami_name\n\t, day(current_timestamp - from_iso8601_timestamp(e.launched_on)) as ec2_age_days\n    , day(current_timestamp - from_iso8601_timestamp(g.created_on)) as ami_age_days\n    /*\n    Cases:\n    \tlaunched_on > 90 days ago = not patched\n        launched_on < 90 days ago\n        \tcreated_on > 120 days ago = not patched -- Giving 30 day buffer given the golden AMI rebuild schedule. \n            created_on <= 120 days ago = patched \n    This does not flag instances that are not picking up the newest image on rebuild but that image is still less than 120 days old. Technically still patched, but on track to not be patched. \n    */\n    , CASE WHEN \n        day(current_timestamp - from_iso8601_timestamp(e.launched_on)) <= 90 -- Must update at least every 90 days\n        \tAND day(current_timestamp - from_iso8601_timestamp(g.created_on)) <= 120 -- If the image it built from is over 120 days old, it's not following the golden image releases\n        THEN 1\n        ELSE 0\n      END AS patched\n    , 1 AS count\nfrom ec2 e\nINNER JOIN golden_amis g\nON e.image_id=g.id\n\n",
  "queryTables" : [ "datalakehive.imhotep.aws_ami", "datalakehive.imhotep.aws_ec2" ],
  "queryIndex" : 171,
  "runStartToQueryComplete" : 1131
}, {
  "elapsedMillis" : 7769,
  "totalScheduledMillis" : 84275,
  "cpuMillis" : 36928,
  "queuedMillis" : 0,
  "executeMillis" : 6376,
  "getResultMillis" : 0,
  "iterateMillis" : 1419,
  "rows" : 3772,
  "error" : null,
  "scannedBytes" : 145400714,
  "query" : "WITH ec2_instances AS (\n  SELECT name, id, image_id, account_id, launched_on\n  FROM datalake.imhotep.aws_ec2\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n  AND state='running' \n  AND (emr_role is NULL or emr_role = '') -- Don't pull in EMR. Not Centos, centrally managed mostly, and has lots of churn. \n)\n, golden_name_amis AS (\n  SELECT id, name, display_name\n  FROM datalake.imhotep.aws_ami\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n  AND LOWER(display_name) LIKE '%golden%'\n)\n, amis AS (\n  SELECT id, name, display_name\n  FROM datalake.imhotep.aws_ami\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n)\n, aws_accounts AS (\n  SELECT \"key\" AS account_id, accountablePartyId AS teamId, accountablePartyType AS teamType\n  FROM datalake.imhotep.ownershipsnapshot\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n  AND namespace='AWS_ACCOUNT' AND statusflagvalue='ACTIVE'\n)\n, all_hosts AS (\n\tSELECT resource_id\n    FROM aws_inspector_findings\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n)\n, ownership AS (\n  SELECT teamid, displayname, intakejira, tier_0, tier_1, tier_2, tier_3, tier_4, tier_5, tier_6, email, engineeringleadldap, productleadldap, programleadldap, technologyleadldap, usersslackchannel\n  FROM datalake.imhotep.teamwrkssnapshot \n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n)\n\nSELECT DISTINCT(e.id), e.name AS ec2_name, e.account_id, o.teamid, o.tier_0, o.tier_1, o.tier_2, o.tier_3, o.tier_4, o.tier_5, o.tier_6, ch.resource_id, amis.name AS ami_name, amis.display_name AS ami_display_name\n\t, CASE WHEN ch.resource_id IS NOT NULL AND LOWER(amis.display_name) LIKE '%golden%' THEN 1 ELSE 0 END AS is_golden\n    , 1 as count\nFROM ec2_instances e\nLEFT OUTER JOIN aws_accounts a ON e.account_id= a.account_id\nLEFT OUTER JOIN all_hosts ch ON ch.resource_id = e.id\nLEFT OUTER JOIN amis ON amis.id = e.image_id\nLEFT OUTER JOIN ownership o ON a.teamId=o.teamid\nWHERE \n\t(''='' OR o.tier_0 = '')\n    AND (''='' OR o.tier_1 = '')\n    AND (''='' OR o.tier_2 = '')\n    AND (''='' OR o.tier_3 = '')\n    AND (''='' OR o.tier_4 = '')\n    AND o.tier_6 != 'Cluster'",
  "queryTables" : [ "datalakehive.imhotep.aws_ami", "datalakehive.imhotep.aws_ec2", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot", "skipperhive.imhotep.aws_inspector_findings" ],
  "queryIndex" : 172,
  "runStartToQueryComplete" : 1142
}, {
  "elapsedMillis" : 1941,
  "totalScheduledMillis" : 1284573,
  "cpuMillis" : 339852,
  "queuedMillis" : 0,
  "executeMillis" : 885,
  "getResultMillis" : 0,
  "iterateMillis" : 1099,
  "rows" : 100,
  "error" : null,
  "scannedBytes" : 2915235339,
  "query" : "with msa_jobs as (\n    select sj.jobid as agg_job_id\n    , jlmsa\n    , trim(jlmsa) as jlmsa_trimmed\n--    , sum(case when jlmsa!='' then 1 else 0 end) AS urban_jobs\n--    , sum(case when jlmsa='' then 1 else 0 end) AS rural_jobs\n    , max_by(jlmsa, hour) as latest_msa\n    from datalake.imhotep.searchablejobs sj\n    where hour between date_format(from_unixtime(to_unixtime(date('2024-10-01'))), '%Y-%m-%d %H:%i:%s') and date_format(from_unixtime(to_unixtime(date('2024-10-02'))), '%Y-%m-%d %H:%i:%s')\n    group by 1,2,3\n)\n\nselect * from msa_jobs\nwhere jlmsa is null\nlimit 100\n",
  "queryTables" : [ "datalakehive.imhotep.searchablejobs" ],
  "queryIndex" : 173,
  "runStartToQueryComplete" : 1140
}, {
  "elapsedMillis" : 125183,
  "totalScheduledMillis" : 350936758,
  "cpuMillis" : 14663696,
  "queuedMillis" : 0,
  "executeMillis" : 80617,
  "getResultMillis" : 0,
  "iterateMillis" : 44607,
  "rows" : 146825,
  "error" : null,
  "scannedBytes" : 1168973514584,
  "query" : "with jobs as (SELECT coalesce(parent_company_id, job_source_id+1000000) as parent_company_id \n, coalesce(max(parent_company_name), max(job_source_name)) as parent_company_name   \n, min(job_source_id) as job_source_id\n, count(distinct agg_job_id) as jobs_l30days \n, sum(organic_apply_starts) as orgAS_l30days \n\nFROM datalake.imhotep.jobactivitymetrics j\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today')\nand job_country_code = 'US' and is_job_searchable > 0 \n--and parent_company_id is not null \nand advertiser_type not in ('Test', 'Indeed')\ngroup by 1)\n\n, rev as (select parent_company_id \n, sum(net_revenue_cents)/100 as spend_lyear \nFROM datalake.imhotep.grdm j \nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1y') AND IMHOTEP_UNIXTIME('today') \ngroup by 1) \n\n, together as (select jobs.* \n, coalesce(spend_lyear, 0) as spend_lyear \n, coalesce(last_any_products, cast('2000-01-01' as date)) as last_revenue_date  -- if no last revenue date, then say they last spend in 2000 \n, date_diff('day', coalesce(last_any_products, cast('2000-01-01' as date)), CURRENT_DATE) as days_since_last_spend \nfrom jobs \nleft join rev on rev.parent_company_id = jobs.parent_company_id \nleft join datalake.core.product_analytics_fct_first_last_activity_dates_parent f \n\ton f.parent_company_id = jobs.parent_company_id\n--where jobs_l30days > 100    \n)\n, together_ordered as (select *, \nntile(10) over (order by jobs_l30days desc) as jobs_ntile -- 1 is most jobs \n, ntile(10) over (order by spend_lyear asc) as spend_ntile -- 1 is lowest spend \n, ntile(10) over (order by days_since_last_spend desc) as days_since_last_spend_ntile -- 1 is never spender\nfrom together )\n\n, together_ordered_fixed as (select parent_company_id  \n, job_source_id\n, parent_company_name \n, orgAS_l30days \n, jobs_l30days\n, days_since_last_spend\n, spend_lyear\n, jobs_ntile \n, case when spend_lyear <= 0 then 1 else spend_ntile end as spend_ntile \n, case when days_since_last_spend > 9000 then 1 else days_since_last_spend_ntile end as days_since_last_spend_ntile\n\nfrom together_ordered )\n\n, rfm as (select * \n, jobs_ntile + spend_ntile + days_since_last_spend_ntile as rfm_unweighted \n, 1*jobs_ntile + 100*spend_ntile + 10*days_since_last_spend_ntile as rfm_weighted -- the higher this number the bigger the penalty\nfrom together_ordered_fixed\norder by 1*jobs_ntile + 100*spend_ntile + 10*days_since_last_spend_ntile desc\n)\n\n, jobs_first_hour as (SELECT sourceid\n, jobid  \n, max(normtitle) as normtitle \n, coalesce(max(jlmsa), 'rural') as msa \n, sum(coalesce(applystarts,0)) as applystarts\n\nFROM datalake.imhotep.mobileorganic j\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today')\nand country in ('us', 'US') and jobageminutes <= 60\ngroup by 1, 2)\n\n, jobs_first_hour_ordered as (SELECT * \n, ntile(10) over (order by applystarts asc) as job_ntile\nFROM jobs_first_hour)\n\n\n, subset as (select case when rfm_weighted > 1000 then 'A_1000+ Biggest Penalty'\nwhen rfm_weighted > 900 then 'B_900'\nwhen rfm_weighted > 800 then 'C_800'\nwhen rfm_weighted > 700 then 'D_700'\nwhen rfm_weighted > 600 then 'E_600'\nwhen rfm_weighted > 500 then 'F_500'\nwhen rfm_weighted > 400 then 'G_400'\nwhen rfm_weighted > 300 then 'H_300'\nwhen rfm_weighted > 200 then 'I_200' else 'J_100 Lowest Penalty' end as rfm_segment \n, rfm.* \n, j.* \n, row_number() over (partition by job_source_id order by applystarts desc) as rn \n\nfrom rfm  \nleft join jobs_first_hour_ordered j on j.sourceid = rfm.job_source_id \nwhere rfm_weighted > 1000 or rfm_weighted < 200\nand j.job_ntile = 10 )\n\nselect * from subset where rn <= 5\n\n\n\n",
  "queryTables" : [ "datalakehive.core.product_analytics_fct_first_last_activity_dates_parent", "datalakehive.imhotep.grdm", "datalakehive.imhotep.jobactivitymetrics", "datalakehive.imhotep.mobileorganic" ],
  "queryIndex" : 174,
  "runStartToQueryComplete" : 1268
}, {
  "elapsedMillis" : 10131,
  "totalScheduledMillis" : 2718854,
  "cpuMillis" : 1922590,
  "queuedMillis" : 0,
  "executeMillis" : 5585,
  "getResultMillis" : 0,
  "iterateMillis" : 4595,
  "rows" : 2496,
  "error" : null,
  "scannedBytes" : 8749976323,
  "query" : "with app_status as(SELECT ats,apply_id, disposition_status, max(unixtime) as unixtime\nFROM signal_back_disposition a\nWHERE \n  -- remove apply_id that existed 1y nefore april\n  NOT EXISTS (\n      SELECT apply_id\n      FROM signal_back_disposition b\n      WHERE unixtime between imhotep_unixtime('2023-04-01') and imhotep_unixtime('2024-04-01')\n        AND a.apply_id=b.apply_id\n  )\n  -- apply_id first appears in april\n  AND EXISTS (\n      SELECT apply_id\n      FROM signal_back_disposition c\n      WHERE unixtime between imhotep_unixtime('2024-04-01') and imhotep_unixtime('2024-05-01')\n        AND a.apply_id=c.apply_id\n  )\n  AND unixtime between imhotep_unixtime('2024-04-01') and imhotep_unixtime('2024-10-01')\n  \n  GROUP BY 1,2,3\n)\n,max_times as (\nSELECT ats\n, apply_id\n, disposition_status\n, unixtime\n, ROW_NUMBER() OVER(PARTITION BY apply_id ORDER BY unixtime ASC) as status_number\nFROM app_status)\n\nSELECT ats, status_number, disposition_status, count(distinct apply_id) as apps\nFROM max_times\nGROUP BY 1,2,3",
  "queryTables" : [ "skipperhive.imhotep.signal_back_disposition", "skipperhive.imhotep.signal_back_disposition", "skipperhive.imhotep.signal_back_disposition" ],
  "queryIndex" : 175,
  "runStartToQueryComplete" : 1153
}, {
  "elapsedMillis" : 3465,
  "totalScheduledMillis" : 6634242,
  "cpuMillis" : 1504712,
  "queuedMillis" : 0,
  "executeMillis" : 1198,
  "getResultMillis" : 0,
  "iterateMillis" : 2290,
  "rows" : 500,
  "error" : null,
  "scannedBytes" : 22850441474,
  "query" : "with examples as (\nSELECT\n\t\tmoderationtext,\n        flagged,\n        flaggedcategories,\n        flaggedwords,\n \t\tappName,\n        moderationApi, \n        moderationType,\n        FROM_UNIXTIME(unixtime) as request_date,\n        requestid       \nFROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n    \tflagged = '1'\n        and lp.metric = 'moderation-text'\n        and unixtime > imhotep_unixtime(DATE(CURRENT_DATE) - interval '4' day)\n        and ('ContentGenerationService' = '' or appName='ContentGenerationService')\n        and ('openAIModerations' = '' or moderationApi='openAIModerations')\n        and ('' = '' or moderationType='')\nlimit 500\n)\n\nSELECT\n        m.*,\n        r.model,\n        r.moderationHeader,\n        r.locale        \nFROM datalake.imhotep.llmproxy r\n        join examples m on m.requestid = r.requestid -- switching to imhotep for speed even though there is a 1D data lag\n    WHERE\n        r.unixtime > imhotep_unixtime(DATE(CURRENT_DATE) - interval '4' day)\n        and r.metric = 'llm-proxy'",
  "queryTables" : [ "datalakehive.imhotep.llmproxy", "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 176,
  "runStartToQueryComplete" : 1149
}, {
  "elapsedMillis" : 2900,
  "totalScheduledMillis" : 4336606,
  "cpuMillis" : 430664,
  "queuedMillis" : 0,
  "executeMillis" : 2094,
  "getResultMillis" : 0,
  "iterateMillis" : 830,
  "rows" : 45,
  "error" : null,
  "scannedBytes" : 13012322112,
  "query" : "SELECT\n \t\tappName,\n        moderationApi, \n        moderationType, \n        count(*) as request_count,\n        COUNT_IF(flagged='1') as flagged_count,\n        COUNT_IF(flagged='1')  * 100.0 / count(*) as block_rate_pct,\n        min(FROM_UNIXTIME(unixtime)) as start_date,\n\t\tmax(FROM_UNIXTIME(unixtime)) as end_date,\n        now() as query_current_date,\n        DATE_DIFF('hour', max(FROM_UNIXTIME(unixtime)), now()) as data_lag_hours\nFROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.metric = 'moderation-text'\n        and unixtime > imhotep_unixtime(DATE(CURRENT_DATE) - interval '4' day)\ngroup by 1, 2, 3",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 177,
  "runStartToQueryComplete" : 1148
}, {
  "elapsedMillis" : 2369,
  "totalScheduledMillis" : 3851546,
  "cpuMillis" : 845361,
  "queuedMillis" : 0,
  "executeMillis" : 950,
  "getResultMillis" : 0,
  "iterateMillis" : 1428,
  "rows" : 33,
  "error" : null,
  "scannedBytes" : 12834206359,
  "query" : "SELECT\n \t\tappName,\n        moderationApi, \n        moderationType,\n        flaggedwords,\n        count(*) as request_count,\n        sum(count(*)) over (partition by appName, moderationApi, moderationType) as app_request_count,\n        count(*) * 100.0 * 100.0 / sum(count(*)) over (partition by appName, moderationApi, moderationType) as bps_of_app_requests\nFROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.metric = 'moderation-text'\n        and unixtime > imhotep_unixtime(DATE(CURRENT_DATE) - interval '4' day)\n        and ('ContentGenerationService' = '' or appName='ContentGenerationService')\n        and moderationApi = 'mcmurdoDenylist'\n        and ('' = '' or moderationType='')\ngroup by 1, 2, 3,4\norder by 5 DESC\nlimit 500",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 178,
  "runStartToQueryComplete" : 1153
}, {
  "elapsedMillis" : 8892,
  "totalScheduledMillis" : 2637733,
  "cpuMillis" : 1112279,
  "queuedMillis" : 0,
  "executeMillis" : 5174,
  "getResultMillis" : 0,
  "iterateMillis" : 3767,
  "rows" : 5000,
  "error" : null,
  "scannedBytes" : 34906468143,
  "query" : "with jobs as (SELECT coalesce(parent_company_id, job_source_id+1000000) as parent_company_id\n, coalesce(max(parent_company_name), max(job_source_name)) as parent_company_name  \n, count(distinct agg_job_id) as jobs_l30days \n, sum(organic_apply_starts) as orgAS_l30days \n\nFROM datalake.imhotep.jobactivitymetrics j\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today')\nand job_country_code = 'US' and is_job_searchable > 0 \n--and parent_company_id is not null \nand advertiser_type not in ('Test', 'Indeed')\ngroup by 1)\n\n, rev as (select parent_company_id \n, sum(net_revenue_cents)/100 as spend_lyear \nFROM datalake.imhotep.grdm j \nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1y') AND IMHOTEP_UNIXTIME('today') \ngroup by 1) \n\n, together as (select jobs.* \n, coalesce(spend_lyear, 0) as spend_lyear \n, coalesce(last_any_products, cast('2000-01-01' as date)) as last_revenue_date  -- if no last revenue date, then say they last spend in 2000 \n, date_diff('day', coalesce(last_any_products, cast('2000-01-01' as date)), CURRENT_DATE) as days_since_last_spend \nfrom jobs \nleft join rev on rev.parent_company_id = jobs.parent_company_id \nleft join datalake.core.product_analytics_fct_first_last_activity_dates_parent f \n\ton f.parent_company_id = jobs.parent_company_id\n--where jobs_l30days > 100    \n)\n\n, together_ordered as (select *, \nntile(10) over (order by jobs_l30days desc) as jobs_ntile -- 1 is most jobs \n, ntile(10) over (order by spend_lyear asc) as spend_ntile -- 1 is lowest spend \n, ntile(10) over (order by days_since_last_spend desc) as days_since_last_spend_ntile -- 1 is never spender\nfrom together )\n\n, together_ordered_fixed as (select parent_company_id \n, parent_company_name \n, orgAS_l30days \n, jobs_l30days\n, days_since_last_spend\n, spend_lyear\n, jobs_ntile \n, case when spend_lyear <= 0 then 1 else spend_ntile end as spend_ntile \n, case when days_since_last_spend > 9000 then 1 else days_since_last_spend_ntile end as days_since_last_spend_ntile\n\nfrom together_ordered )\n\n, rfm as (select * \n, jobs_ntile + spend_ntile + days_since_last_spend_ntile as rfm_unweighted \n, 1*jobs_ntile + 100*spend_ntile + 10*days_since_last_spend_ntile as rfm_weighted -- the higher this number the bigger the penalty\nfrom together_ordered_fixed\norder by 1*jobs_ntile + 100*spend_ntile + 10*days_since_last_spend_ntile desc\n)\n\nselect *\n\nfrom rfm \n--WHERE REGEXP_LIKE(lower(parent_company_name), 'google|walmart|amazon|bank of america|cvs|walgreens|facebook|tesla')\nORDER BY orgAS_l30days desc \nLIMIT 5000\n\n\n\n",
  "queryTables" : [ "datalakehive.core.product_analytics_fct_first_last_activity_dates_parent", "datalakehive.imhotep.grdm", "datalakehive.imhotep.jobactivitymetrics" ],
  "queryIndex" : 179,
  "runStartToQueryComplete" : 1162
}, {
  "elapsedMillis" : 8455,
  "totalScheduledMillis" : 2292823,
  "cpuMillis" : 1046983,
  "queuedMillis" : 1,
  "executeMillis" : 5308,
  "getResultMillis" : 0,
  "iterateMillis" : 3167,
  "rows" : 48047,
  "error" : null,
  "scannedBytes" : 34905502249,
  "query" : "with jobs as (SELECT coalesce(parent_company_id, job_source_id+1000000) as parent_company_id \n, coalesce(max(parent_company_name), max(job_source_name)) as parent_company_name   \n, min(job_source_id) as job_source_id\n, count(distinct agg_job_id) as jobs_l30days \n, sum(organic_apply_starts) as orgAS_l30days \n\nFROM datalake.imhotep.jobactivitymetrics j\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today')\nand job_country_code = 'US' and is_job_searchable > 0 \n--and parent_company_id is not null \nand advertiser_type not in ('Test', 'Indeed')\ngroup by 1)\n\n, rev as (select parent_company_id \n, sum(net_revenue_cents)/100 as spend_lyear \nFROM datalake.imhotep.grdm j \nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1y') AND IMHOTEP_UNIXTIME('today') \ngroup by 1) \n\n, together as (select jobs.* \n, coalesce(spend_lyear, 0) as spend_lyear \n, coalesce(last_any_products, cast('2000-01-01' as date)) as last_revenue_date  -- if no last revenue date, then say they last spend in 2000 \n, date_diff('day', coalesce(last_any_products, cast('2000-01-01' as date)), CURRENT_DATE) as days_since_last_spend \nfrom jobs \nleft join rev on rev.parent_company_id = jobs.parent_company_id \nleft join datalake.core.product_analytics_fct_first_last_activity_dates_parent f \n\ton f.parent_company_id = jobs.parent_company_id\n--where jobs_l30days > 100    \n)\n, together_ordered as (select *, \nntile(10) over (order by jobs_l30days desc) as jobs_ntile -- 1 is most jobs \n, ntile(10) over (order by spend_lyear asc) as spend_ntile -- 1 is lowest spend \n, ntile(10) over (order by days_since_last_spend desc) as days_since_last_spend_ntile -- 1 is never spender\nfrom together )\n\n, together_ordered_fixed as (select parent_company_id  \n, job_source_id\n, parent_company_name \n, orgAS_l30days \n, jobs_l30days\n, days_since_last_spend\n, spend_lyear\n, jobs_ntile \n, case when spend_lyear <= 0 then 1 else spend_ntile end as spend_ntile \n, case when days_since_last_spend > 9000 then 1 else days_since_last_spend_ntile end as days_since_last_spend_ntile\n\nfrom together_ordered )\n\n, rfm as (select * \n, jobs_ntile + spend_ntile + days_since_last_spend_ntile as rfm_unweighted \n, 1*jobs_ntile + 100*spend_ntile + 10*days_since_last_spend_ntile as rfm_weighted -- the higher this number the bigger the penalty\nfrom together_ordered_fixed\norder by 1*jobs_ntile + 100*spend_ntile + 10*days_since_last_spend_ntile desc\n)\n\n, jobs_first_hour as (SELECT sourceid\n, jobid  \n, max(normtitle) as normtitle \n, coalesce(max(jlmsa), 'rural') as msa \n, sum(coalesce(applystarts,0)) as applystarts\n\nFROM datalake.imhotep.searchimpressions j\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today')\nand country in ('us', 'US') and sponsored = 0 and jobageminutes <= 60\ngroup by 1, 2)\n\n, jobs_first_hour_ordered as (SELECT * \n, ntile(10) over (order by applystarts asc) as job_ntile\nFROM jobs_first_hour)\n\n\n, subset as (select case when rfm_weighted > 1000 then 'A_1000+ Biggest Penalty'\nwhen rfm_weighted > 900 then 'B_900'\nwhen rfm_weighted > 800 then 'C_800'\nwhen rfm_weighted > 700 then 'D_700'\nwhen rfm_weighted > 600 then 'E_600'\nwhen rfm_weighted > 500 then 'F_500'\nwhen rfm_weighted > 400 then 'G_400'\nwhen rfm_weighted > 300 then 'H_300'\nwhen rfm_weighted > 200 then 'I_200' else 'J_100 Lowest Penalty' end as rfm_segment \n, rfm.* \n, j.* \n, row_number() over (partition by job_source_id order by applystarts desc) as rn \n\nfrom rfm  \nleft join jobs_first_hour_ordered j on j.sourceid = rfm.job_source_id \nwhere rfm_weighted > 1000 or rfm_weighted < 200\nand j.job_ntile = 10 )\n\nselect * from subset where rn <= 5\n\n\n\n",
  "queryTables" : [ "datalakehive.core.product_analytics_fct_first_last_activity_dates_parent", "datalakehive.imhotep.grdm", "datalakehive.imhotep.jobactivitymetrics", "datalakehive.imhotep.searchimpressions" ],
  "queryIndex" : 180,
  "runStartToQueryComplete" : 1182
}, {
  "elapsedMillis" : 1440,
  "totalScheduledMillis" : 1108094,
  "cpuMillis" : 396622,
  "queuedMillis" : 0,
  "executeMillis" : 865,
  "getResultMillis" : 0,
  "iterateMillis" : 592,
  "rows" : 100,
  "error" : null,
  "scannedBytes" : 2905655277,
  "query" : "with msa_jobs as (\n    select sj.jobid as agg_job_id\n    , jlmsa\n    , trim(jlmsa) as jlmsa_trimmed\n    , sum(case when jlmsa!='' then 1 else 0 end) AS urban_jobs\n    , sum(case when jlmsa='' then 1 else 0 end) AS rural_jobs\n    , max_by(jlmsa, hour) as latest_msa\n    from datalake.imhotep.searchablejobs sj\n    where hour between date_format(from_unixtime(to_unixtime(date('2024-10-01'))), '%Y-%m-%d %H:%i:%s') and date_format(from_unixtime(to_unixtime(date('2024-10-02'))), '%Y-%m-%d %H:%i:%s')\n    group by 1,2,3\n)\n\nselect * from msa_jobs\nlimit 100\n",
  "queryTables" : [ "datalakehive.imhotep.searchablejobs" ],
  "queryIndex" : 181,
  "runStartToQueryComplete" : 1191
}, {
  "elapsedMillis" : 2377,
  "totalScheduledMillis" : 1788,
  "cpuMillis" : 1265,
  "queuedMillis" : 0,
  "executeMillis" : 2198,
  "getResultMillis" : 0,
  "iterateMillis" : 211,
  "rows" : 12806,
  "error" : null,
  "scannedBytes" : 1714745,
  "query" : "WITH lib_base AS (\n\n  SELECT\n      tier_0,\n      tier_1,\n      tier_2,\n      tier_3,\n      tier_4,\n      tier_5,\n      tier_6,\n      tier_7,\n      tier_8,\n      lib.teamId,\n      'lib' AS resource_type,\n      'n/a' AS env,\n      languageRuntime AS languageRuntime,\n      libraryName AS resource_name,\n      CAST(highestVersionPublishAgeDays AS BIGINT) AS age\n  FROM libraryFreshnessSnapshot lib\n  LEFT JOIN teamwrksSnapshot tm\n  ON lib.teamid = tm.teamid\n  WHERE lib.unixtime >= IMHOTEP_UNIXTIME('2d') AND lib.unixtime < IMHOTEP_UNIXTIME('1d')\n  AND tm.unixtime >= IMHOTEP_UNIXTIME('2d') AND tm.unixtime < IMHOTEP_UNIXTIME('1d')\n),\n\napp_base AS (\n  SELECT\n      tier_0,\n      tier_1,\n      tier_2,\n      tier_3,\n      tier_4,\n      tier_5,\n      tier_6,\n      tier_7,\n      tier_8,\n      app.teamId,\n      'app' AS resource_type,\n      env,\n      applicationRuntime AS languageRuntime,\n      applicationName AS resource_name,\n      lockdownAge AS age\n  FROM applicationFreshnessSnapshot AS app\n  LEFT JOIN teamwrksSnapshot tm\n  ON app.teamid = tm.teamid\n  WHERE app.unixtime >= IMHOTEP_UNIXTIME('2d') AND app.unixtime < IMHOTEP_UNIXTIME('1d')\n  AND tm.unixtime >= IMHOTEP_UNIXTIME('2d') AND tm.unixtime < IMHOTEP_UNIXTIME('1d')\n)\n\n\nSELECT *\nFROM (\n  SELECT *\n  FROM app_base\n  UNION ALL\n  SELECT *\n  FROM lib_base\n)\nWHERE env != 'MISSING'",
  "queryTables" : [ "skipperhive.imhotep.applicationfreshnesssnapshot", "skipperhive.imhotep.libraryfreshnesssnapshot", "skipperhive.imhotep.teamwrkssnapshot", "skipperhive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 182,
  "runStartToQueryComplete" : 1194
}, {
  "elapsedMillis" : 2450,
  "totalScheduledMillis" : 1721,
  "cpuMillis" : 1180,
  "queuedMillis" : 0,
  "executeMillis" : 2331,
  "getResultMillis" : 0,
  "iterateMillis" : 153,
  "rows" : 12806,
  "error" : null,
  "scannedBytes" : 1714745,
  "query" : "WITH lib_base AS (\n\n  SELECT\n      tier_0,\n      tier_1,\n      tier_2,\n      tier_3,\n      tier_4,\n      tier_5,\n      tier_6,\n      tier_7,\n      tier_8,\n      lib.teamId,\n      'lib' AS resource_type,\n      'n/a' AS env,\n      languageRuntime AS languageRuntime,\n      libraryName AS resource_name,\n      CAST(highestVersionPublishAgeDays AS BIGINT) AS age\n  FROM libraryFreshnessSnapshot lib\n  LEFT JOIN teamwrksSnapshot tm\n  ON lib.teamid = tm.teamid\n  WHERE lib.unixtime >= IMHOTEP_UNIXTIME('2d') AND lib.unixtime < IMHOTEP_UNIXTIME('1d')\n  AND tm.unixtime >= IMHOTEP_UNIXTIME('2d') AND tm.unixtime < IMHOTEP_UNIXTIME('1d')\n),\n\napp_base AS (\n  SELECT\n      tier_0,\n      tier_1,\n      tier_2,\n      tier_3,\n      tier_4,\n      tier_5,\n      tier_6,\n      tier_7,\n      tier_8,\n      app.teamId,\n      'app' AS resource_type,\n      env,\n      applicationRuntime AS languageRuntime,\n      applicationName AS resource_name,\n      lockdownAge AS age\n  FROM applicationFreshnessSnapshot AS app\n  LEFT JOIN teamwrksSnapshot tm\n  ON app.teamid = tm.teamid\n  WHERE app.unixtime >= IMHOTEP_UNIXTIME('2d') AND app.unixtime < IMHOTEP_UNIXTIME('1d')\n  AND tm.unixtime >= IMHOTEP_UNIXTIME('2d') AND tm.unixtime < IMHOTEP_UNIXTIME('1d')\n)\n\n\nSELECT *\nFROM (\n  SELECT *\n  FROM app_base\n  UNION ALL\n  SELECT *\n  FROM lib_base\n)\nWHERE env != 'MISSING'",
  "queryTables" : [ "skipperhive.imhotep.applicationfreshnesssnapshot", "skipperhive.imhotep.libraryfreshnesssnapshot", "skipperhive.imhotep.teamwrkssnapshot", "skipperhive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 183,
  "runStartToQueryComplete" : 1195
}, {
  "elapsedMillis" : 2530,
  "totalScheduledMillis" : 37213,
  "cpuMillis" : 14803,
  "queuedMillis" : 0,
  "executeMillis" : 2292,
  "getResultMillis" : 0,
  "iterateMillis" : 271,
  "rows" : 59,
  "error" : null,
  "scannedBytes" : 101411184,
  "query" : "WITH lib_base AS (\n\n  SELECT\n      tier_0,\n      tier_1,\n      tier_2,\n      tier_3,\n      tier_4,\n      tier_5,\n      tier_6,\n      tier_7,\n      tier_8,\n      lib.teamId,\n      'lib' AS resource_type,\n      'n/a' AS env,\n      languageRuntime AS languageRuntime,\n      libraryName AS resource_name,\n      CAST(highestVersionPublishAgeDays AS BIGINT) AS age,\n      lib.day\n  FROM libraryFreshnessSnapshot lib\n  LEFT JOIN teamwrksSnapshot tm\n  ON lib.teamid = tm.teamid\n  AND lib.day = DATE_FORMAT(CAST(tm.day AS TIMESTAMP), '%Y-%m-%d')\n  WHERE lib.unixtime BETWEEN IMHOTEP_UNIXTIME('60d') AND IMHOTEP_UNIXTIME('1d')\n  AND tm.unixtime BETWEEN IMHOTEP_UNIXTIME('60d') AND IMHOTEP_UNIXTIME('1d')\n),\n\napp_base AS (\n  SELECT\n      tier_0,\n      tier_1,\n      tier_2,\n      tier_3,\n      tier_4,\n      tier_5,\n      tier_6,\n      tier_7,\n      tier_8,\n      app.teamId,\n      'app' AS resource_type,\n      env,\n      applicationRuntime AS languageRuntime,\n      applicationName AS resource_name,\n      lockdownAge AS age,\n      app.day\n  FROM applicationFreshnessSnapshot AS app\n  LEFT JOIN teamwrksSnapshot tm\n  ON app.teamid = tm.teamid\n  AND app.day = DATE_FORMAT(CAST(tm.day AS TIMESTAMP), '%Y-%m-%d')\n  WHERE app.unixtime BETWEEN IMHOTEP_UNIXTIME('60d') AND IMHOTEP_UNIXTIME('1d')\n  AND tm.unixtime BETWEEN IMHOTEP_UNIXTIME('60d') AND IMHOTEP_UNIXTIME('1d')\n)\n\n\nSELECT\n\tday,\n    100.0 * COUNT_IF(age < 90)/COUNT(*) AS freshness_percentage\nFROM (\n  SELECT *\n  FROM app_base\n  UNION ALL\n  SELECT *\n  FROM lib_base\n)\nWHERE ('' = '' OR teamId like '')\n  AND ('Indeed' = '' OR tier_0 like 'Indeed')\n  AND ('' = '' OR tier_1 like '')\n  AND ('' = '' OR tier_2 like '')\n  AND ('' = '' OR tier_3 like '')\n  AND ('' = '' OR tier_4 like '')\n  AND ('' = '' OR tier_5 like '')\n  AND ('' = '' OR tier_6 like '')\n  AND ('' = '' OR tier_7 like '')\n  AND ('' = '' OR tier_8 like '')\nGROUP BY day",
  "queryTables" : [ "skipperhive.imhotep.applicationfreshnesssnapshot", "skipperhive.imhotep.libraryfreshnesssnapshot", "skipperhive.imhotep.teamwrkssnapshot", "skipperhive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 184,
  "runStartToQueryComplete" : 1200
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 39567,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_174204_00208_vjepj): Error processing metadata for table tiller.adsystemdb_tbladvertiserjobsource",
  "scannedBytes" : 0,
  "query" : "WITH\n\nw_va as (\n\tSELECT source_id, advertiser_id\n    FROM datalake.tiller.adsystemdb_tbladvertiserjobsource\n    WHERE status = 'VERIFIED'\n    GROUP BY 1,2),\n\nw_sj as (\n\tSELECT date_format(DATE_TRUNC('WEEK', FROM_UNIXTIME(sj.unixtime)),'%Y-%m-%d') as weekStart\n\t, w_va.advertiser_id\n    FROM datalake.imhotep.searchablejobs sj\n\tINNER JOIN w_va ON sj.sourceid = w_va.source_id\n    WHERE unixtime between imhotep_unixtime(CURRENT_DATE - INTERVAL '183' DAY) \n\tAND imhotep_unixtime(CURRENT_DATE - INTERVAL '1' DAY)\n\tAND jobcountry != 'JP'\n\tGROUP BY 1,2),\n    \nw_s as (\n\tSELECT date_format(DATE_TRUNC('WEEK', FROM_UNIXTIME(unixtime)),'%Y-%m-%d') as weekStart\n\t, CAST(advertiserid as BIGINT) as advertiser_id\n    , COUNT(DISTINCT(requestTk)) as searches\n    , COUNT(DISTINCT(CASE WHEN totalhitcount>0 \n    \tTHEN requestTk ELSE NULL END)) as searchesWithResults\n    , COUNT(DISTINCT(CASE WHEN totalhitcount>0 AND clickdepth_csv IS NOT NULL \n    \tTHEN requestTk ELSE NULL END)) as searchesWithResultsAndClick\n\tFROM datalake.imhotep.employerjobsearch\n    WHERE unixtime between imhotep_unixtime(CURRENT_DATE - INTERVAL '183' DAY) \n\t\tAND imhotep_unixtime(CURRENT_DATE - INTERVAL '1' DAY)\n\tAND lower(gqlOperationName) not like '%facet%' \n    AND lower(gqlOperationName) not like '%count%' \n    AND onehostmodule = './SimpleJobPicker' \n    /* ^^ Only inlcudes SJP until logging fix (EJSEARCH-1895) completes */\n\tAND country != 'JP'\n    AND coalesce(is_privileged,0) != 1\n    GROUP BY 1,2)\n       \nSELECT weekStart\n, searches\n, (searches-searchesWithResults) as searchesWithZeroResults\n, searchesWithResultsAndClick\n, format('%.2f%%', (cast(searchesWithResultsAndClick as double)/cast(searches as double)*100)) as netClickRate\nFROM\n    (SELECT w_s.weekStart\n    , SUM(w_s.searches) as searches\n    , SUM(w_s.searchesWithResults) as searchesWithResults\n    , SUM(w_s.searchesWithResultsAndClick) as searchesWithResultsAndClick\n    FROM w_s \n    INNER JOIN w_sj\n        ON w_s.advertiser_id = w_sj.advertiser_id \n        AND w_s.weekstart = w_sj.weekstart\n    GROUP BY 1)",
  "queryTables" : [ "datalake.tiller.adsystemdb_tbladvertiserjobsource", "datalakehive.imhotep.employerjobsearch", "datalakehive.imhotep.searchablejobs" ],
  "queryIndex" : 185,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 25024,
  "totalScheduledMillis" : 51786242,
  "cpuMillis" : 13201008,
  "queuedMillis" : 0,
  "executeMillis" : 7238,
  "getResultMillis" : 0,
  "iterateMillis" : 17804,
  "rows" : 934,
  "error" : null,
  "scannedBytes" : 814160201018,
  "query" : "WITH snapshot AS (\n    SELECT \n\t    acctid,\n        resume.resumetype as resumetype,\n        date_trunc('hour', from_unixtime(resume.datecreated)) AS hour_created\n    FROM datalake.jssdi.profile_snapshot\n    CROSS JOIN UNNEST(slice(array_sort(resumes, (r1, r2) -> IF(r1.datecreated<r2.datecreated, 1, IF(r1.datecreated=r2.datecreated, 0, -1))), 1, cardinality(resumes)-1)) AS resume -- get all resumes except first created\n    WHERE \n\t        day = '2024-10-24'\n        AND CARDINALITY(resumes) > 1\n), create_events AS (\n\tSELECT accountid, client, DATE_TRUNC('hour', FROM_UNIXTIME(unixtime)) AS hour_created\n    FROM datalake.imhotep.profileevents\n    WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-10-10') AND IMHOTEP_UNIXTIME('2024-10-17')\n    \tAND (eventtype = 'RESUME_CREATED' OR eventtype = 'PROFILE_CREATED')\n)\nSELECT t1.hour_created, resumetype, t2.client, count(*) as count\nFROM snapshot t1\nLEFT JOIN create_events t2\n\tON t1.acctid = t2.accountid AND t1.hour_created = t2.hour_created\nWHERE t1.hour_created BETWEEN DATE_PARSE('2024-10-10', '%Y-%m-%d') AND DATE_PARSE('2024-10-17', '%Y-%m-%d')\nGROUP BY t1.hour_created, resumetype, t2.client",
  "queryTables" : [ "datalakehive.imhotep.profileevents", "datalakehive.jssdi.profile_snapshot" ],
  "queryIndex" : 186,
  "runStartToQueryComplete" : 1248
}, {
  "elapsedMillis" : 136526,
  "totalScheduledMillis" : 119945408,
  "cpuMillis" : 9764186,
  "queuedMillis" : 0,
  "executeMillis" : 84383,
  "getResultMillis" : 0,
  "iterateMillis" : 52163,
  "rows" : 2,
  "error" : null,
  "scannedBytes" : 450707279402,
  "query" : "WITH experiment_data AS (\n\tSELECT \n    \tCASE WHEN ARRAYS_OVERLAP(ndxgrp, \n            ARRAY['#b15:idxmatchingcontrolplane_e275','#B15:idxmatchingcontrolplane_e275']) \n            THEN 'test' ELSE 'control' END AS _group, \n        q, jobid\n    FROM sponsored -- TABLESAMPLE BERNOULLI (10) -- sampling rate\n    WHERE \n    \tunixtime >= imhotep_unixtime('2024-10-15') AND unixtime < imhotep_unixtime('2024-11-12') -- test start date & end date\n        AND country = 'ca'\n        AND ARRAYS_OVERLAP(ndxgrp, \n        \tARRAY['#b15:idxmatchingcontrolplane_e274','#B15:idxmatchingcontrolplane_e274',\n            \t  '#b15:idxmatchingcontrolplane_e275','#B15:idxmatchingcontrolplane_e275'])\n)\n\nSELECT \n\t_group, \n    COUNT_IF(answer='No') as bad_matches, \n    COUNT() AS all_labels, \n    COUNT_IF(answer='No') / CAST(COUNT() AS DOUBLE) AS BMR\nFROM jobtoqueryrelevance\nINNER JOIN experiment_data ON\n\tjobtoqueryrelevance.query = experiment_data.q\n    AND jobtoqueryrelevance.jobid = experiment_data.jobid\nWHERE \n\tjobtoqueryrelevance.unixtime >= imhotep_unixtime('2024-01-01') AND jobtoqueryrelevance.unixtime < imhotep_unixtime('2024-11-12')\n\tAND jobtoqueryrelevance.country='CA'\nGROUP BY _group",
  "queryTables" : [ "skipperhive.imhotep.jobtoqueryrelevance", "skipperhive.imhotep.sponsored" ],
  "queryIndex" : 187,
  "runStartToQueryComplete" : 1384
}, {
  "elapsedMillis" : 1727,
  "totalScheduledMillis" : 1178241,
  "cpuMillis" : 289806,
  "queuedMillis" : 0,
  "executeMillis" : 886,
  "getResultMillis" : 0,
  "iterateMillis" : 959,
  "rows" : 100,
  "error" : null,
  "scannedBytes" : 2932100576,
  "query" : "with msa_jobs as (\n    select sj.jobid as agg_job_id\n    , jlmsa\n    , trim(jlmsa) as jlmsa_trimmed\n    , sum(case when jlmsa!='' then 1 else 0 end) AS urban_jobs\n    , sum(case when jlmsa='' then 1 else 0 end) AS rural_jobs\n    , max_by(jlmsa, hour) as latest_msa\n    from datalake.imhotep.searchablejobs sj\n    where hour between date_format(from_unixtime(to_unixtime(date('2024-10-01'))), '%Y-%m-%d %H:%i:%s') and date_format(from_unixtime(to_unixtime(date('2024-10-02'))), '%Y-%m-%d %H:%i:%s')\n    group by 1,2,3\n)\n\nselect * from msa_jobs\nlimit 100\n",
  "queryTables" : [ "datalakehive.imhotep.searchablejobs" ],
  "queryIndex" : 188,
  "runStartToQueryComplete" : 1264
}, {
  "elapsedMillis" : 373,
  "totalScheduledMillis" : 96,
  "cpuMillis" : 83,
  "queuedMillis" : 0,
  "executeMillis" : 256,
  "getResultMillis" : 0,
  "iterateMillis" : 128,
  "rows" : 152,
  "error" : null,
  "scannedBytes" : 236565,
  "query" : "select * from datalake.tiller.\"oplin_events_usage$partitions\"",
  "queryTables" : [ "datalake.tiller.oplin_events_usage$partitions" ],
  "queryIndex" : 189,
  "runStartToQueryComplete" : 1269
}, {
  "elapsedMillis" : 1234,
  "totalScheduledMillis" : 358,
  "cpuMillis" : 35,
  "queuedMillis" : 0,
  "executeMillis" : 709,
  "getResultMillis" : 0,
  "iterateMillis" : 533,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 1180170,
  "query" : "SELECT CAST(FROM_UNIXTIME(unixtime) AS timestamp)  AS most_recent_unixtime, dc, ldap,query_duration_millis\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 190,
  "runStartToQueryComplete" : 1298
}, {
  "elapsedMillis" : 1084,
  "totalScheduledMillis" : 112,
  "cpuMillis" : 31,
  "queuedMillis" : 0,
  "executeMillis" : 846,
  "getResultMillis" : 0,
  "iterateMillis" : 254,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 1180170,
  "query" : "SELECT FROM_UNIXTIME(unixtime) AS most_recent_unixtime, dc, ldap,query_duration_millis\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 191,
  "runStartToQueryComplete" : 1301
}, {
  "elapsedMillis" : 974,
  "totalScheduledMillis" : 174,
  "cpuMillis" : 35,
  "queuedMillis" : 0,
  "executeMillis" : 686,
  "getResultMillis" : 0,
  "iterateMillis" : 302,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 1180170,
  "query" : "SELECT FROM_UNIXTIME(unixtime) AT TIME ZONE 'UTC' AS most_recent_unixtime, dc, ldap,query_duration_millis\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 192,
  "runStartToQueryComplete" : 1300
}, {
  "elapsedMillis" : 7466,
  "totalScheduledMillis" : 33452580,
  "cpuMillis" : 10250670,
  "queuedMillis" : 0,
  "executeMillis" : 2358,
  "getResultMillis" : 0,
  "iterateMillis" : 5138,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 363883758082,
  "query" : "WITH\n\tunverified_accounts AS (\n        SELECT \n            accountid\n            , verified\n        FROM imhotep.passdailysnapshot\n        WHERE \n            day = date_format(date_add('day', -1, CURRENT_DATE), '%Y-%m-%d')\n            AND verified != 1\n    ), profiles AS (\n        SELECT \n            acctid AS accountid\n            , resumes\n            , fileinformation\n        FROM jssdi.profile_snapshot \n        WHERE \n            day = date_format(date_add('day', -1, CURRENT_DATE), '%Y-%m-%d')\n            AND cardinality(\n            \tFILTER(\n                \tfileinformation\n                    , f -> f.type = 'RESUME'\n                )\n            ) > 1\n            -- none resume or single resume in PARSED or IR type\n            AND (\n            \tresumes is null\n                OR ( CARDINALITY(resumes) = 1 and resumes[1].resumetype in ('PARSED', 'INDEED_RESUME')\n                )\n\t)\n   )\n    \n    SELECT\n    p.accountid\n    , '<batch_name>_xxx'\n--    , a.verified\n--    , CARDINALITY(resumes) as rez_count\n--    , if (resumes = null, null, resumes[1].resumetype) as rez_type\n--    , cardinality(\n--            \tFILTER(\n--                \tfileinformation\n--                    , f -> f.type = 'RESUME'\n--                )\n--            ) as rez_file_count\n    from profiles p\n    join unverified_accounts a\n    on p.accountid = a.accountid\n --   limit 100",
  "queryTables" : [ "skipperhive.imhotep.passdailysnapshot", "skipperhive.jssdi.profile_snapshot" ],
  "queryIndex" : 193,
  "runStartToQueryComplete" : 1309
}, {
  "elapsedMillis" : 336056,
  "totalScheduledMillis" : 161870816,
  "cpuMillis" : 69741654,
  "queuedMillis" : 0,
  "executeMillis" : 3870,
  "getResultMillis" : 0,
  "iterateMillis" : 332202,
  "rows" : 2,
  "error" : null,
  "scannedBytes" : 5161697054142,
  "query" : "SELECT\n \t\tappName,\n        moderationApi, \n        moderationType, \n        count(*) as request_count,\n        COUNT_IF(flagged=1) as flagged_count,\n        COUNT_IF(flagged=1)  * 100.0 / count(*) as block_rate_pct,\n        min(FROM_UNIXTIME(unixtime)) as start_date,\n\t\tmax(FROM_UNIXTIME(unixtime)) as end_date,\n        now() as query_current_date,\n        DATE_DIFF('hour', max(FROM_UNIXTIME(unixtime)), now()) as data_lag_hours\nFROM\n       logrepo.log.llm_proxy lp\n    WHERE\n        lp.metric = 'moderation-text'\n        and unixtime > imhotep_unixtime(DATE(CURRENT_DATE) - interval '4' day)\n        and ('ContentGenerationService' = '' or appName='ContentGenerationService')\n        and ('openAIModerations' = '' or moderationApi='openAIModerations')\n        and ('' = '' or moderationType='')\ngroup by 1, 2, 3",
  "queryTables" : [ "logrepo.log.llm_proxy" ],
  "queryIndex" : 194,
  "runStartToQueryComplete" : 1653
}, {
  "elapsedMillis" : 1673,
  "totalScheduledMillis" : 1036827,
  "cpuMillis" : 285792,
  "queuedMillis" : 0,
  "executeMillis" : 993,
  "getResultMillis" : 0,
  "iterateMillis" : 698,
  "rows" : 100,
  "error" : null,
  "scannedBytes" : 2921684902,
  "query" : "with msa_jobs as (\n    select sj.jobid as agg_job_id\n    , jlmsa\n    , trim(jlmsa) as jlmsa_trimmed\n    , sum(case when jlmsa!='' then 1 else 0 end) AS urban_jobs\n    , sum(case when jlmsa='' then 1 else 0 end) AS rural_jobs\n    , max_by(jlmsa, hour) as latest_msa\n    from datalake.imhotep.searchablejobs sj\n    where hour between date_format(from_unixtime(to_unixtime(date('2024-10-01'))), '%Y-%m-%d %H:%i:%s') and date_format(from_unixtime(to_unixtime(date('2024-10-02'))), '%Y-%m-%d %H:%i:%s')\n    group by 1,2,3\n)\n\nselect * from msa_jobs\nlimit 100\n",
  "queryTables" : [ "datalakehive.imhotep.searchablejobs" ],
  "queryIndex" : 195,
  "runStartToQueryComplete" : 1320
}, {
  "elapsedMillis" : 400559,
  "totalScheduledMillis" : 310344037,
  "cpuMillis" : 117693375,
  "queuedMillis" : 0,
  "executeMillis" : 8226,
  "getResultMillis" : 0,
  "iterateMillis" : 392357,
  "rows" : 500,
  "error" : null,
  "scannedBytes" : 7766110858562,
  "query" : "with examples as (\nSELECT\n\t\tmoderationtext,\n        flagged,\n        flaggedcategories,\n        flaggedwords,\n \t\tappName,\n        moderationApi, \n        moderationType, \n        FROM_UNIXTIME(unixtime) as request_date,\n        requestid,\n        reqbody,\n        respbody\nFROM\n       logrepo.log.llm_proxy lp\n    WHERE\n    \tflagged = 1\n        and lp.metric = 'moderation-text'\n        and unixtime > imhotep_unixtime(DATE(CURRENT_DATE) - interval '4' day)\n        and ('ContentGenerationService' = '' or appName='ContentGenerationService')\n        and ('openAIModerations' = '' or moderationApi='openAIModerations')\n        and ('' = '' or moderationType='')\nlimit 500\n)\n\nSELECT\n        m.*,\n        r.model,\n        r.moderationHeader,\n        r.locale        \nFROM logrepo.log.llm_proxy r\n        join examples m on m.requestid = r.requestid -- switching to imhotep for speed even though there is a 1D data lag\n    WHERE\n        r.unixtime > imhotep_unixtime(DATE(CURRENT_DATE) - interval '4' day)\n        and r.metric = 'llm-proxy'",
  "queryTables" : [ "logrepo.log.llm_proxy", "logrepo.log.llm_proxy" ],
  "queryIndex" : 196,
  "runStartToQueryComplete" : 1722
}, {
  "elapsedMillis" : 15399,
  "totalScheduledMillis" : 1458715,
  "cpuMillis" : 815217,
  "queuedMillis" : 1,
  "executeMillis" : 5438,
  "getResultMillis" : 0,
  "iterateMillis" : 9992,
  "rows" : 2093,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        tw.tier_5 AS t5,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        tw.tier_5 != 'Unspecified' AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    ('Marketplace'='' OR t1 = 'Marketplace') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '')\nORDER BY date, teamId, project, t0, t1, t2, t3, t4, t5 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 197,
  "runStartToQueryComplete" : 1338
}, {
  "elapsedMillis" : 2862,
  "totalScheduledMillis" : 7318176,
  "cpuMillis" : 1065783,
  "queuedMillis" : 0,
  "executeMillis" : 900,
  "getResultMillis" : 0,
  "iterateMillis" : 1983,
  "rows" : 500,
  "error" : null,
  "scannedBytes" : 22335484555,
  "query" : "with examples as (\nSELECT\n\t\tmoderationtext,\n        flagged,\n        flaggedcategories,\n        flaggedwords,\n \t\tappName,\n        moderationApi, \n        moderationType,\n        FROM_UNIXTIME(unixtime) as request_date,\n        requestid       \nFROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n    \tflagged = '1'\n        and lp.metric = 'moderation-text'\n        and unixtime > imhotep_unixtime(DATE(CURRENT_DATE) - interval '4' day)\n        and ('ContentGenerationService' = '' or appName='ContentGenerationService')\n        and ('openAIModerations' = '' or moderationApi='openAIModerations')\n        and ('input' = '' or moderationType='input')\nlimit 500\n)\n\nSELECT\n        m.*,\n        r.model,\n        r.moderationHeader,\n        r.locale        \nFROM datalake.imhotep.llmproxy r\n        join examples m on m.requestid = r.requestid -- switching to imhotep for speed even though there is a 1D data lag\n    WHERE\n        r.unixtime > imhotep_unixtime(DATE(CURRENT_DATE) - interval '4' day)\n        and r.metric = 'llm-proxy'",
  "queryTables" : [ "datalakehive.imhotep.llmproxy", "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 198,
  "runStartToQueryComplete" : 1325
}, {
  "elapsedMillis" : 12487,
  "totalScheduledMillis" : 1357681,
  "cpuMillis" : 814132,
  "queuedMillis" : 1,
  "executeMillis" : 5833,
  "getResultMillis" : 0,
  "iterateMillis" : 6685,
  "rows" : 2093,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_6 != 'Unspecified' AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5, tw.tier_6\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    ('Marketplace'='' OR t1 = 'Marketplace') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '')\nORDER BY date, teamId, project, t0, t1, t2, t3, t4, t5, t6 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 199,
  "runStartToQueryComplete" : 1335
}, {
  "elapsedMillis" : 13824,
  "totalScheduledMillis" : 5812989,
  "cpuMillis" : 348582,
  "queuedMillis" : 0,
  "executeMillis" : 8869,
  "getResultMillis" : 0,
  "iterateMillis" : 4986,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 6967437529,
  "query" : "SELECT \n\tCOUNT(*) as total_profile_views, \n   \tSUM(r.sent) as outreaches,\n    SUM(r.resp_pos) as resp_pos,\n    COUNT(js.account_id) as profile_with_linkedIn,\n    ROUND(CAST(SUM(r.sent) AS DOUBLE) * 100 / COUNT(*), 1) as outreach_rate\nFROM \n\tdatalake.imhotep.rsresumeview v\n\nLEFT JOIN\n\tdatalake.imhotep.rscontacts r\nON\n\tv.recruiterAccountId = r.senderAccountId\n    AND v.resumeAccountId = r.recipientAccountId\n    AND r.unixtime BETWEEN IMHOTEP_UNIXTIME('5d') AND IMHOTEP_UNIXTIME('4d')\n\nLEFT JOIN \n\tdatalake.imhotep.js_fact_store_snapshot_prod js\nON\n\tv.resumeAccountId = js.account_id\n\tAND js.resume_links_size > 0\n\tAND CARDINALITY(FILTER(js.resume_links_array, x -> x LIKE '%linkedin%')) > 0\n    AND js.unixtime BETWEEN IMHOTEP_UNIXTIME('5d') AND IMHOTEP_UNIXTIME('4d')\n\nWHERE \n\tv.unixtime BETWEEN IMHOTEP_UNIXTIME('5d') AND IMHOTEP_UNIXTIME('4d')\n--    AND js.account_id IS NOT NULL -- with LinkedIn link\n    AND js.account_id IS NULL -- exclude linkedIn users\n--    AND r.batchSize = 1",
  "queryTables" : [ "datalakehive.imhotep.js_fact_store_snapshot_prod", "datalakehive.imhotep.rscontacts", "datalakehive.imhotep.rsresumeview" ],
  "queryIndex" : 200,
  "runStartToQueryComplete" : 1338
}, {
  "elapsedMillis" : 1936,
  "totalScheduledMillis" : 1873330,
  "cpuMillis" : 245497,
  "queuedMillis" : 0,
  "executeMillis" : 1858,
  "getResultMillis" : 0,
  "iterateMillis" : 96,
  "rows" : 45,
  "error" : null,
  "scannedBytes" : 13017814596,
  "query" : "SELECT\n \t\tappName,\n        moderationApi, \n        moderationType, \n        count(*) as request_count,\n        COUNT_IF(flagged='1') as flagged_count,\n        COUNT_IF(flagged='1')  * 100.0 / count(*) as block_rate_pct,\n        min(FROM_UNIXTIME(unixtime)) as start_date,\n\t\tmax(FROM_UNIXTIME(unixtime)) as end_date,\n        now() as query_current_date,\n        DATE_DIFF('hour', max(FROM_UNIXTIME(unixtime)), now()) as data_lag_hours\nFROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.metric = 'moderation-text'\n        and unixtime > imhotep_unixtime(DATE(CURRENT_DATE) - interval '4' day)\ngroup by 1, 2, 3",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 201,
  "runStartToQueryComplete" : 1327
}, {
  "elapsedMillis" : 11097,
  "totalScheduledMillis" : 849568,
  "cpuMillis" : 156481,
  "queuedMillis" : 0,
  "executeMillis" : 4677,
  "getResultMillis" : 0,
  "iterateMillis" : 6451,
  "rows" : 30,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        Lower(tw.tier_1) NOT IN ('global revenue', 'marketing')\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n\t('Marketplace'='' OR t1 = 'Marketplace')\nORDER BY date, t0, t1 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 202,
  "runStartToQueryComplete" : 1339
}, {
  "elapsedMillis" : 11229,
  "totalScheduledMillis" : 569437,
  "cpuMillis" : 60627,
  "queuedMillis" : 0,
  "executeMillis" : 4679,
  "getResultMillis" : 0,
  "iterateMillis" : 6580,
  "rows" : 874,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 as t4,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_4 != 'Unspecified'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    ('Marketplace'='' OR t1 = 'Marketplace') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '')\nORDER BY date, t0, t1, t2, t3, t4 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 203,
  "runStartToQueryComplete" : 1340
}, {
  "elapsedMillis" : 4105,
  "totalScheduledMillis" : 1946044,
  "cpuMillis" : 212353,
  "queuedMillis" : 0,
  "executeMillis" : 941,
  "getResultMillis" : 0,
  "iterateMillis" : 3182,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 12833204417,
  "query" : "SELECT\n \t\tappName,\n        moderationApi, \n        moderationType,\n        flaggedwords,\n        count(*) as request_count,\n        sum(count(*)) over (partition by appName, moderationApi, moderationType) as app_request_count,\n        count(*) * 100.0 * 100.0 / sum(count(*)) over (partition by appName, moderationApi, moderationType) as bps_of_app_requests\nFROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n        lp.metric = 'moderation-text'\n        and unixtime > imhotep_unixtime(DATE(CURRENT_DATE) - interval '4' day)\n        and ('ContentGenerationService' = '' or appName='ContentGenerationService')\n        and moderationApi = 'mcmurdoDenylist'\n        and ('input' = '' or moderationType='input')\ngroup by 1, 2, 3,4\norder by 5 DESC\nlimit 500",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 204,
  "runStartToQueryComplete" : 1334
}, {
  "elapsedMillis" : 8818,
  "totalScheduledMillis" : 447514,
  "cpuMillis" : 59840,
  "queuedMillis" : 0,
  "executeMillis" : 2470,
  "getResultMillis" : 0,
  "iterateMillis" : 6378,
  "rows" : 240,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_3 != 'Unspecified'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    t3,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    ('Marketplace'='' OR t1 = 'Marketplace') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '')\nORDER BY date, t0, t1, t2, t3 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 205,
  "runStartToQueryComplete" : 1340
}, {
  "elapsedMillis" : 9575,
  "totalScheduledMillis" : 154145,
  "cpuMillis" : 20629,
  "queuedMillis" : 0,
  "executeMillis" : 3472,
  "getResultMillis" : 0,
  "iterateMillis" : 6139,
  "rows" : 175,
  "error" : null,
  "scannedBytes" : 276112327,
  "query" : "WITH populated_day AS (\n    SELECT MIN(day) AS most_recent_day\n    FROM (\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"jiracloudissues$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n\n        UNION ALL\n\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"ownershipSnapshot$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n\n        UNION ALL\n\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"teamwrksSnapshot$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n    )\n)\n\n-- Count of a11y violations remediated within SLO in the last 30 days / (All a11y violations remediated within last 30 days + Open issues outside SLO)\nSELECT\n    teamId,\n\tproject,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Closed_Within_SLO,\n    ALL_REM_30 AS All_Remediated_Last_30,\n    UNREM AS Open_Outside_SLO,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    t7\nFROM (\n\tSELECT\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        tw.tier_7 AS t7,\n        \n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- last 30 days\n                  ((ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 1000) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  ((TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 1000) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- last 30 days\n                  (ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT) / 1000) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n                -- last 30 days\n                (ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.day = (SELECT most_recent_day from populated_day) AND\n        ow.day = (SELECT most_recent_day from populated_day) AND\n        tw.day = (SELECT most_recent_day from populated_day) AND\n        ji.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        ow.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        tw.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        tw.tier_1 NOT IN ('Global Revenue', 'Marketing')\n    GROUP BY ow.accountablePartyId, ji.projectkey, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5, tw.tier_6, tw.tier_7\n        HAVING COUNT(\n        CASE WHEN\n            ji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            -- last 30 days\n            (ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 86400 <= 30\n            THEN 1 END\n    ) IS NOT NULL AND (\n        COUNT(\n            CASE WHEN\n                ji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n                -- last 30 days\n                (ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 86400 <= 30\n                THEN 1 END\n        ) + COUNT(\n            CASE WHEN\n                (\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n                ) AND (\n                    (\n                        ji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                        (ji.unixtime - TRY_CAST(ji.createtimestamp AS BIGINT) / 1000) / 86400 > 30\n                    ) OR (\n                        -- SLO days to complete\n                        ji.priority NOT IN ('Blocker') AND\n                        (ji.unixtime - TRY_CAST(ji.createtimestamp AS BIGINT) / 1000) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) > 0\n    )\n)\nWHERE\n\t('Marketplace'='' OR t1 = 'Marketplace') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '') AND\n    (''='' OR t7 = '')\nORDER BY teamId, project, t1, t2, t3, t4, t5, t6, t7 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.jiracloudissues$partitions", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.ownershipsnapshot$partitions", "datalakehive.imhotep.teamwrkssnapshot", "datalakehive.imhotep.teamwrkssnapshot$partitions" ],
  "queryIndex" : 206,
  "runStartToQueryComplete" : 1342
}, {
  "elapsedMillis" : 10293,
  "totalScheduledMillis" : 343794,
  "cpuMillis" : 67355,
  "queuedMillis" : 0,
  "executeMillis" : 3256,
  "getResultMillis" : 0,
  "iterateMillis" : 7060,
  "rows" : 2586,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 as t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        tw.tier_7 AS t7,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_7 != 'Unspecified'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5, tw.tier_6, tw.tier_7\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    t7,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    ('Marketplace'='' OR t1 = 'Marketplace') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '') AND\n    (''='' OR t7 = '') \nORDER BY date, t0, t1, t2, t3, t4, t5, t6, t7 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 207,
  "runStartToQueryComplete" : 1347
}, {
  "elapsedMillis" : 13456,
  "totalScheduledMillis" : 2402042,
  "cpuMillis" : 862008,
  "queuedMillis" : 0,
  "executeMillis" : 2831,
  "getResultMillis" : 0,
  "iterateMillis" : 10665,
  "rows" : 2093,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    t7,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        tw.tier_7 AS t7,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        tw.tier_7 != 'Unspecified' AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5, tw.tier_6, tw.tier_7\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    ('Marketplace'='' OR t1 = 'Marketplace') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '') AND\n    (''='' OR t7 = '')\nORDER BY date, teamId, project, t0, t1, t2, t3, t4, t5, t6, t7 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 208,
  "runStartToQueryComplete" : 1350
}, {
  "elapsedMillis" : 5915,
  "totalScheduledMillis" : 146368,
  "cpuMillis" : 29049,
  "queuedMillis" : 0,
  "executeMillis" : 2167,
  "getResultMillis" : 0,
  "iterateMillis" : 3765,
  "rows" : 6,
  "error" : null,
  "scannedBytes" : 37237234,
  "query" : "select day,\njob_visibility_level,\ncount_if(is_live=1) as count_is_live\nfrom datalake.imhotep.live_jobs\nwhere day BETWEEN '2024-10-01' AND '2024-10-02'\ngroup by 1,2\norder by 1,2",
  "queryTables" : [ "datalakehive.imhotep.live_jobs" ],
  "queryIndex" : 209,
  "runStartToQueryComplete" : 1343
}, {
  "elapsedMillis" : 1258,
  "totalScheduledMillis" : 468,
  "cpuMillis" : 22,
  "queuedMillis" : 0,
  "executeMillis" : 658,
  "getResultMillis" : 0,
  "iterateMillis" : 616,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 1180170,
  "query" : "SELECT CAST(FROM_UNIXTIME(unixtime) AS timestamp)  AS most_recent_unixtime, dc, ldap,query_duration_millis\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 210,
  "runStartToQueryComplete" : 1339
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 504,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_174408_00234_vjepj): Query exceeded the maximum execution time limit of 10.00m",
  "scannedBytes" : 0,
  "query" : "SELECT min(day) FROM jssdi.profile_snapshot WHERE day >= '2020-01-01'",
  "queryTables" : [ "skipperhive.jssdi.profile_snapshot" ],
  "queryIndex" : 211,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 9175,
  "totalScheduledMillis" : 333735,
  "cpuMillis" : 62970,
  "queuedMillis" : 0,
  "executeMillis" : 2422,
  "getResultMillis" : 0,
  "iterateMillis" : 6783,
  "rows" : 2329,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 as t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_6 != 'Unspecified'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5, tw.tier_6\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    ('Marketplace'='' OR t1 = 'Marketplace') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '')\nORDER BY date, t0, t1, t2, t3, t4, t5, t6 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 212,
  "runStartToQueryComplete" : 1349
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 2218,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_174410_00236_vjepj): Query exceeded the maximum execution time limit of 10.00m",
  "scannedBytes" : 0,
  "query" : "SELECT \n\tELEMENT_AT(data, 'rum_context_element') as element,\n    ELEMENT_AT(data, 'rum_context_module') as module\nFROM \n\tlogrepo.raw_log.one_host_rum_action\nWHERE \n\tunixtime > IMHOTEP_UNIXTIME('yesterday') AND\n    ELEMENT_AT(data, 'rum_view_name') = '/jobs' AND\n    ELEMENT_AT(data, 'rum_context_scope') = 'jobman-feature-modules' AND\n    ELEMENT_AT(data, 'rum_context_customActionType') = 'click' AND\n    ELEMENT_AT(data, 'rum_context_additional_searchTkUuid') IS NOT NULL AND\n    ELEMENT_AT(data, 'rum_context_additional_clickDepthIndex') IS NOT NULL AND\n    ELEMENT_AT(data, 'rum_context_additional_clickDepthPage') IS NOT NULL\n--    CARDINALITY(SPLIT(ELEMENT_AT(data, 'rum_context_additional_clickDepthIndex'), ',')) > 1 AND\n--    CARDINALITY(SPLIT(ELEMENT_AT(data, 'rum_context_additional_clickDepthPage'), ',')) > 1\nGROUP BY\n\tELEMENT_AT(data, 'rum_context_element'),\n    ELEMENT_AT(data, 'rum_context_module')",
  "queryTables" : [ "logrepo.raw_log.one_host_rum_action" ],
  "queryIndex" : 213,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 15482,
  "totalScheduledMillis" : 3135881,
  "cpuMillis" : 858792,
  "queuedMillis" : 0,
  "executeMillis" : 3175,
  "getResultMillis" : 0,
  "iterateMillis" : 12337,
  "rows" : 2093,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        tw.tier_4 != 'Unspecified' AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0  \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    ('Marketplace'='' OR t1 = 'Marketplace') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '')\nORDER BY date, teamId, project, t0, t1, t2, t3, t4 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 214,
  "runStartToQueryComplete" : 1357
}, {
  "elapsedMillis" : 8256,
  "totalScheduledMillis" : 74390,
  "cpuMillis" : 13080,
  "queuedMillis" : 0,
  "executeMillis" : 3076,
  "getResultMillis" : 0,
  "iterateMillis" : 5229,
  "rows" : 6,
  "error" : null,
  "scannedBytes" : 191839267,
  "query" : "WITH populated_day AS (\n    SELECT MIN(day) AS most_recent_day\n    FROM (\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"jiracloudissues$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n\n        UNION ALL\n\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"ownershipSnapshot$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n\n        UNION ALL\n\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"teamwrksSnapshot$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n    )\n),\n\nslo_data AS (\n    SELECT\n        teamId,\n        project,\n        CASE\n            WHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n            ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n        END AS SLO_Score,\n        REM_30 AS Closed_Within_SLO,\n        ALL_REM_30 AS All_Remediated_Last_30,\n        UNREM AS Open_Outside_SLO,\n        t1,\n        t2,\n        t3,\n        t4,\n        t5,\n        t6,\n        t7\n    FROM (\n        SELECT\n            ji.projectkey AS project,\n            ow.accountablePartyId AS teamId,\n            tw.tier_1 AS t1,\n            tw.tier_2 AS t2,\n            tw.tier_3 AS t3,\n            tw.tier_4 AS t4,\n            tw.tier_5 AS t5,\n            tw.tier_6 AS t6,\n            tw.tier_7 AS t7,\n\n            COUNT(CASE WHEN\n                ji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n                (\n                    (ji.priority = 'Blocker' AND\n                    ((ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 1000) / 86400 <= 30 AND\n                    ((TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 1000) / 86400000 <= 30) OR \n                    (ji.priority NOT IN ('Blocker') AND\n                    (ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000) / 86400 <= 30 AND\n                    (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT) / 1000) / 86400000 <= 90)\n                )\n            THEN 1 END) AS REM_30,\n\n            COUNT(CASE WHEN\n                ji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n                (ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 86400 <= 30\n            THEN 1 END) AS ALL_REM_30,\n\n            COUNT(CASE WHEN\n                ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n                (\n                    (ji.priority = 'Blocker' AND (ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 86400 > 30) OR\n                    (ji.priority NOT IN ('Blocker') AND (ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 86400 > 90)\n                )\n            THEN 1 END) AS UNREM\n        FROM datalake.imhotep.jiracloudissues AS ji\n        JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n        JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n        WHERE\n            ji.day = (SELECT most_recent_day FROM populated_day) AND\n            ow.day = (SELECT most_recent_day FROM populated_day) AND\n            tw.day = (SELECT most_recent_day FROM populated_day) AND\n            ji.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n            ow.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n            tw.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n            CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n            NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n            ji.projectkey NOT IN ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n            ji.issuetype = 'Bug' AND\n            tw.tier_1 NOT IN ('Global Revenue', 'Marketing')\n        GROUP BY ow.accountablePartyId, ji.projectkey, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5, tw.tier_6, tw.tier_7\n    )\n)\n\nSELECT *\nFROM slo_data\nWHERE \n    SLO_Score > 0 AND SLO_Score != 100 AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '') AND\n    (''='' OR t7 = '')\nORDER BY teamId, project, t1, t2, t3, t4, t5, t6, t7 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.jiracloudissues$partitions", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.ownershipsnapshot$partitions", "datalakehive.imhotep.teamwrkssnapshot", "datalakehive.imhotep.teamwrkssnapshot$partitions" ],
  "queryIndex" : 215,
  "runStartToQueryComplete" : 1350
}, {
  "elapsedMillis" : 7630,
  "totalScheduledMillis" : 383235,
  "cpuMillis" : 69635,
  "queuedMillis" : 0,
  "executeMillis" : 2532,
  "getResultMillis" : 0,
  "iterateMillis" : 5127,
  "rows" : 120,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing')\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    ('Marketplace'='' OR t1 = 'Marketplace') AND\n    (''='' OR t2 = '')\nORDER BY date, t0, t1, t2 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 216,
  "runStartToQueryComplete" : 1351
}, {
  "elapsedMillis" : 996,
  "totalScheduledMillis" : 111,
  "cpuMillis" : 23,
  "queuedMillis" : 0,
  "executeMillis" : 732,
  "getResultMillis" : 0,
  "iterateMillis" : 341,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 1180170,
  "query" : "SELECT FROM_UNIXTIME(unixtime) AT TIME ZONE 'UTC' AS most_recent_unixtime, dc, ldap,query_duration_millis\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 217,
  "runStartToQueryComplete" : 1345
}, {
  "elapsedMillis" : 7110,
  "totalScheduledMillis" : 139113,
  "cpuMillis" : 19632,
  "queuedMillis" : 0,
  "executeMillis" : 3396,
  "getResultMillis" : 0,
  "iterateMillis" : 3742,
  "rows" : 686,
  "error" : null,
  "scannedBytes" : 480265457,
  "query" : "WITH\n\npopulated_day AS (\n    SELECT MIN(day) AS most_recent_day\n    FROM (\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"jiracloudissues$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n\n        UNION ALL\n\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"ownershipSnapshot$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n\n        UNION ALL\n\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"teamwrksSnapshot$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n    )\n)\n\n-- Count of a11y violations remediated within SLO in the last 30 days / (All a11y violations remediated within last 30 days + Open issues)\nSELECT\n    inslo,\n    duedate,\n    teamId,\n\t-- project,\n    issuekey,\n    -- issuetype,\n    priority,\n    status,\n    summary,\n    lastupdated,\n    createdate,\n    labels,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    t7\nFROM (\n\tSELECT\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        ji.issuekey AS issuekey,\n        ji.issuetype AS issuetype,\n        ji.priority AS priority,\n        ji.summary AS summary,\n        ji.status AS status,\n        DATE_FORMAT(FROM_UNIXTIME(CAST(ji.lastupdated AS BIGINT) / 1000), '%Y-%m-%d') AS lastupdated,\n        DATE_FORMAT(DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d'), '%Y-%m-%d') AS createdate,\n        DATE_FORMAT(DATE_ADD('day',\n        \tCASE \n            \tWHEN ji.priority = 'Blocker' THEN 30 \n                ELSE 90 \n            END, DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')), '%Y-%m-%d') AS duedate,\n        CAST(duedate >= DATE_FORMAT(CURRENT_DATE, '%Y-%m-%d') AS BOOLEAN) AS inslo,\n        ji.labels AS labels,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        tw.tier_7 AS t7\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.day = (SELECT most_recent_day from populated_day) AND\n        ow.day = (SELECT most_recent_day from populated_day) AND\n        tw.day = (SELECT most_recent_day from populated_day) AND\n        ji.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        ow.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        tw.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            -- The line below will include \"Pending Closure\" tickets in the resulting table\n            -- OR ji.resolutiontimestamp = 0\n        )\n    GROUP BY\n    \tow.accountablePartyId,\n    \tji.projectkey,\n        ji.issuekey,\n\t\tji.issuetype,\n        ji.priority,\n        ji.summary,\n        ji.status,\n        DATE_FORMAT(FROM_UNIXTIME(CAST(ji.lastupdated AS BIGINT) / 1000), '%Y-%m-%d'),\n        DATE_FORMAT(DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d'), '%Y-%m-%d'),\n        DATE_FORMAT(DATE_ADD('day',\n        \tCASE \n            \tWHEN ji.priority = 'Blocker' THEN 30\n                ELSE 90 \n           \tEND, DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')), '%Y-%m-%d'),\n        CAST(duedate >= DATE_FORMAT(CURRENT_DATE, '%Y-%m-%d') AS BOOLEAN),\n        ji.labels,\n        tw.tier_0,\n        tw.tier_1,\n        tw.tier_2,\n        tw.tier_3,\n        tw.tier_4,\n        tw.tier_5,\n        tw.tier_6,\n        tw.tier_7\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    ('Marketplace'='' OR t1 = 'Marketplace') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '') AND\n    (''='' OR t7 = '')\nORDER BY \n\tinslo ASC,\n\tduedate ASC ",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.jiracloudissues$partitions", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.ownershipsnapshot$partitions", "datalakehive.imhotep.teamwrkssnapshot", "datalakehive.imhotep.teamwrkssnapshot$partitions" ],
  "queryIndex" : 218,
  "runStartToQueryComplete" : 1353
}, {
  "elapsedMillis" : 7072,
  "totalScheduledMillis" : 401578,
  "cpuMillis" : 73155,
  "queuedMillis" : 0,
  "executeMillis" : 2469,
  "getResultMillis" : 0,
  "iterateMillis" : 4625,
  "rows" : 1657,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 as t4,\n        tw.tier_5 AS t5,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_5 != 'Unspecified'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    ('Marketplace'='' OR t1 = 'Marketplace') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '')\nORDER BY date, t0, t1, t2, t3, t4, t5 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 219,
  "runStartToQueryComplete" : 1355
}, {
  "elapsedMillis" : 13941,
  "totalScheduledMillis" : 3189958,
  "cpuMillis" : 817901,
  "queuedMillis" : 0,
  "executeMillis" : 2461,
  "getResultMillis" : 0,
  "iterateMillis" : 11514,
  "rows" : 2093,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    t3,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0\n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    ('Marketplace'='' OR t1 = 'Marketplace') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '')\nORDER BY date, teamId, project, t0, t1, t2, t3 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 220,
  "runStartToQueryComplete" : 1366
}, {
  "elapsedMillis" : 12947,
  "totalScheduledMillis" : 2973079,
  "cpuMillis" : 772105,
  "queuedMillis" : 0,
  "executeMillis" : 2497,
  "getResultMillis" : 0,
  "iterateMillis" : 10476,
  "rows" : 2093,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    ('Marketplace'='' OR t1 = 'Marketplace')\nORDER BY date, teamId, project, t0, t1 ASC ",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 221,
  "runStartToQueryComplete" : 1366
}, {
  "elapsedMillis" : 576742,
  "totalScheduledMillis" : 451026877,
  "cpuMillis" : 33237281,
  "queuedMillis" : 0,
  "executeMillis" : 73923,
  "getResultMillis" : 0,
  "iterateMillis" : 502846,
  "rows" : 2,
  "error" : null,
  "scannedBytes" : 1010464770187,
  "query" : "WITH experiment_data AS (\n\tSELECT \n    \tCASE WHEN ARRAYS_OVERLAP(ndxgrp, \n            ARRAY['#b15:idxmatchingcontrolplane_e275','#B15:idxmatchingcontrolplane_e275']) \n            THEN 'test' ELSE 'control' END AS _group, \n        q, jobid\n    FROM mobileorganic -- TABLESAMPLE BERNOULLI (10) -- sampling rate\n    WHERE \n    \tunixtime >= imhotep_unixtime('2024-10-15') AND unixtime < imhotep_unixtime('2024-11-12') -- test start date & end date\n        AND country = 'ca'\n        AND ARRAYS_OVERLAP(ndxgrp, \n        \tARRAY['#b15:idxmatchingcontrolplane_e274','#B15:idxmatchingcontrolplane_e274',\n            \t  '#b15:idxmatchingcontrolplane_e275','#B15:idxmatchingcontrolplane_e275'])\n)\n\nSELECT \n\t_group, \n    COUNT_IF(answer='No') as bad_matches, \n    COUNT() AS all_labels, \n    COUNT_IF(answer='No') / CAST(COUNT() AS DOUBLE) AS BMR\nFROM jobtoqueryrelevance\nINNER JOIN experiment_data ON\n\tjobtoqueryrelevance.query = experiment_data.q\n    AND jobtoqueryrelevance.jobid = experiment_data.jobid\nWHERE \n\tjobtoqueryrelevance.unixtime >= imhotep_unixtime('2024-01-01') AND jobtoqueryrelevance.unixtime < imhotep_unixtime('2024-11-12')\n\tAND jobtoqueryrelevance.country='CA'\nGROUP BY _group",
  "queryTables" : [ "skipperhive.imhotep.jobtoqueryrelevance", "skipperhive.imhotep.mobileorganic" ],
  "queryIndex" : 222,
  "runStartToQueryComplete" : 1935
}, {
  "elapsedMillis" : 13221,
  "totalScheduledMillis" : 11293403,
  "cpuMillis" : 1443182,
  "queuedMillis" : 0,
  "executeMillis" : 7406,
  "getResultMillis" : 0,
  "iterateMillis" : 16495,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 31355071849,
  "query" : "WITH scalablesegmenthomepageimpression_ AS (\n  SELECT accountid\n         ,agg_job_id \n         ,qual_attributes_job_js_overlap_positive_count\n         ,qual_job_attributes_count\n         ,'scalablesegmenthomepageimpression' AS source\n  FROM datalake.imhotep.scalablesegmenthomepageimpression\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-10-02') AND IMHOTEP_UNIXTIME('2024-10-03')\n  AND qual_attributes_job_js_overlap_positive_count > 0\n  AND  qual_job_attributes_count > 0 \n  GROUP BY 1, 2, 3, 4\n)\n\nSELECT a.account_id\n       ,a.job_id\n       ,a.overlappingjobandjsqualifications AS cnt_overlapping_quals_mce\n       ,b.qual_attributes_job_js_overlap_positive_count AS cnt_overlapping_quals_scalableseg\n       ,a.numjobqualifications AS cnt_job_quals_mce\n       ,b.qual_job_attributes_count AS cnt_job_quals_scalableseg\nFROM datalake.imhotep.mce_evaluation AS a \nINNER JOIN scalablesegmenthomepageimpression_ AS b\nON a.account_id = b.accountid \nAND a.job_id = b.agg_job_id\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-10-02') AND IMHOTEP_UNIXTIME('2024-10-03')\nAND a.overlappingjobandjsqualifications != b.qual_attributes_job_js_overlap_positive_count \nAND a.numjobqualifications != b.qual_job_attributes_count\nLIMIT 10 ",
  "queryTables" : [ "datalakehive.imhotep.mce_evaluation", "datalakehive.imhotep.scalablesegmenthomepageimpression" ],
  "queryIndex" : 223,
  "runStartToQueryComplete" : 1383
}, {
  "elapsedMillis" : 14156,
  "totalScheduledMillis" : 3018866,
  "cpuMillis" : 827433,
  "queuedMillis" : 0,
  "executeMillis" : 2529,
  "getResultMillis" : 0,
  "iterateMillis" : 11656,
  "rows" : 2093,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    ('Marketplace'='' OR t1 = 'Marketplace') AND\n    (''='' OR t2 = '')\nORDER BY date, teamId, project, t0, t1, t2 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 224,
  "runStartToQueryComplete" : 1374
}, {
  "elapsedMillis" : 325768,
  "totalScheduledMillis" : 169879683,
  "cpuMillis" : 26523967,
  "queuedMillis" : 0,
  "executeMillis" : 80867,
  "getResultMillis" : 0,
  "iterateMillis" : 244929,
  "rows" : 2,
  "error" : null,
  "scannedBytes" : 450736520831,
  "query" : "WITH experiment_data AS (\n\tSELECT \n    \tCASE WHEN ARRAYS_OVERLAP(ndxgrp, \n            ARRAY['#b15:idxmatchingcontrolplane_e275','#B15:idxmatchingcontrolplane_e275']) \n            THEN 'test' ELSE 'control' END AS _group, \n        q, jobid\n    FROM sponsored -- TABLESAMPLE BERNOULLI (10) -- sampling rate\n    WHERE \n    \tunixtime >= imhotep_unixtime('2024-10-15') AND unixtime < imhotep_unixtime('2024-11-12') -- test start date & end date\n        AND country = 'ca'\n        AND ARRAYS_OVERLAP(ndxgrp, \n        \tARRAY['#b15:idxmatchingcontrolplane_e274','#B15:idxmatchingcontrolplane_e274',\n            \t  '#b15:idxmatchingcontrolplane_e275','#B15:idxmatchingcontrolplane_e275'])\n        AND EXISTS(SELECT * FROM synset WHERE CONTAINS(synset.cp_configs, 'SQMATCHING-6593-destination') AND synset.status='IN_PRODUCTION' AND synset.unixtime >= imhotep_unixtime('3d') AND synset.unixtime < imhotep_unixtime('2d') AND CONTAINS(synset.query_variants, sponsored.q))\n)\n\nSELECT \n\t_group, \n    COUNT_IF(answer='No') as bad_matches, \n    COUNT() AS all_labels, \n    COUNT_IF(answer='No') / CAST(COUNT() AS DOUBLE) AS BMR\nFROM jobtoqueryrelevance\nINNER JOIN experiment_data ON\n\tjobtoqueryrelevance.query = experiment_data.q\n    AND jobtoqueryrelevance.jobid = experiment_data.jobid\nWHERE \n\tjobtoqueryrelevance.unixtime >= imhotep_unixtime('2024-01-01') AND jobtoqueryrelevance.unixtime < imhotep_unixtime('2024-11-12')\n\tAND jobtoqueryrelevance.country='CA'\nGROUP BY _group",
  "queryTables" : [ "skipperhive.imhotep.jobtoqueryrelevance", "skipperhive.imhotep.sponsored", "skipperhive.imhotep.synset" ],
  "queryIndex" : 225,
  "runStartToQueryComplete" : 1695
}, {
  "elapsedMillis" : 362195,
  "totalScheduledMillis" : 1943404,
  "cpuMillis" : 720103,
  "queuedMillis" : 0,
  "executeMillis" : 3541,
  "getResultMillis" : 0,
  "iterateMillis" : 358662,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 181074159,
  "query" : "select count(1) from logrepo.raw_log.orgClk where unixtime >= imhotep_unixtime('2019-11-02 00:00:00') and unixtime < imhotep_unixtime('2019-11-02 01:00:00')",
  "queryTables" : [ "logrepo.raw_log.orgclk" ],
  "queryIndex" : 226,
  "runStartToQueryComplete" : 1735
}, {
  "elapsedMillis" : 408,
  "totalScheduledMillis" : 36,
  "cpuMillis" : 31,
  "queuedMillis" : 0,
  "executeMillis" : 330,
  "getResultMillis" : 0,
  "iterateMillis" : 86,
  "rows" : 15,
  "error" : null,
  "scannedBytes" : 9872,
  "query" : "select * from datalake.tiller.\"oplin_events_start$snapshots\"",
  "queryTables" : [ "datalake.tiller.oplin_events_start$snapshots" ],
  "queryIndex" : 227,
  "runStartToQueryComplete" : 1384
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 33741,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_174456_00251_vjepj): Query exceeded the maximum execution time limit of 10.00m",
  "scannedBytes" : 0,
  "query" : "SELECT date_format(DATE_TRUNC('WEEK', FROM_UNIXTIME(unixtime)),'%Y-%m-%d') as weekStart\n--, (case when feedid = 50461 then 'Hosted' else 'Indexed' end) as jobProduct\n--, count(DISTINCT(jobId)) as totalJobs\n, count(DISTINCT(case when has_employer_base_pay = 1 then jobId else null end)) as totalExplicitPayJobs\n, count(DISTINCT(case when jlpostal != '' OR jlenhanced = 1 then jobId else null end)) as totalBetterLocationJobs\n, count(DISTINCT(case when contains(applyvisibility, 'mobile') then jobId else null end)) as totalIndeedApplyableJobs\n, count(DISTINCT(case when has_employer_base_pay = 1 AND contains(applyvisibility, 'mobile') AND (jlpostal != '' OR jlenhanced = 1) then jobId else null end)) as totalBetterJobs\n-- logic for the above fields comes from https://link.indeed.tech/YD476T \nFROM datalake.imhotep.searchablejobs\nWHERE unixtime between imhotep_unixtime(CURRENT_DATE - INTERVAL '183' DAY) \nAND imhotep_unixtime(CURRENT_DATE - INTERVAL '1' DAY)\nAND jobcountry != 'JP'\nGROUP BY 1 --,2",
  "queryTables" : [ "datalakehive.imhotep.searchablejobs" ],
  "queryIndex" : 228,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 568,
  "totalScheduledMillis" : 264,
  "cpuMillis" : 89,
  "queuedMillis" : 0,
  "executeMillis" : 285,
  "getResultMillis" : 0,
  "iterateMillis" : 294,
  "rows" : 304,
  "error" : null,
  "scannedBytes" : 452550,
  "query" : "select * from datalake.tiller.\"oplin_events_start$partitions\"",
  "queryTables" : [ "datalake.tiller.oplin_events_start$partitions" ],
  "queryIndex" : 229,
  "runStartToQueryComplete" : 1396
}, {
  "elapsedMillis" : 436,
  "totalScheduledMillis" : 77,
  "cpuMillis" : 66,
  "queuedMillis" : 0,
  "executeMillis" : 345,
  "getResultMillis" : 0,
  "iterateMillis" : 100,
  "rows" : 304,
  "error" : null,
  "scannedBytes" : 452550,
  "query" : "select partition, record_count, file_count, ceil(cast(total_size as double) / 1024 / 1024 / 500) as file_estimate, cast(cast(total_size as double) / 1024 / 1024 as decimal(10,3)) as total_size_MB\nfrom datalake.tiller.\"oplin_events_start$partitions\"",
  "queryTables" : [ "datalake.tiller.oplin_events_start$partitions" ],
  "queryIndex" : 230,
  "runStartToQueryComplete" : 1413
}, {
  "elapsedMillis" : 4578,
  "totalScheduledMillis" : 2849160,
  "cpuMillis" : 414571,
  "queuedMillis" : 0,
  "executeMillis" : 1344,
  "getResultMillis" : 0,
  "iterateMillis" : 3455,
  "rows" : 100,
  "error" : null,
  "scannedBytes" : 2933335467,
  "query" : "with msa_jobs as (\n    select sj.jobid as agg_job_id\n    , jlmsa\n    , trim(jlmsa) as jlmsa_trimmed\n    , sum(case when jlmsa!='' then 1 else 0 end) AS urban_jobs\n    , sum(case when jlmsa='' then 1 else 0 end) AS rural_jobs\n    , max_by(jlmsa, hour) as latest_msa\n    from datalake.imhotep.searchablejobs sj\n    where hour between date_format(from_unixtime(to_unixtime(date('2024-10-01'))), '%Y-%m-%d %H:%i:%s') and date_format(from_unixtime(to_unixtime(date('2024-10-02'))), '%Y-%m-%d %H:%i:%s')\n    group by 1,2,3\n)\n\nselect * from msa_jobs\nlimit 100\n",
  "queryTables" : [ "datalakehive.imhotep.searchablejobs" ],
  "queryIndex" : 231,
  "runStartToQueryComplete" : 1438
}, {
  "elapsedMillis" : 214313,
  "totalScheduledMillis" : 116747423,
  "cpuMillis" : 6393846,
  "queuedMillis" : 0,
  "executeMillis" : 13529,
  "getResultMillis" : 0,
  "iterateMillis" : 200808,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 192195704550,
  "query" : "SELECT \n\tCOUNT(*) as total_profile_views, \n   \tSUM(r.sent) as outreaches,\n    SUM(r.resp_pos) as resp_pos,\n    COUNT(js.account_id) as profile_with_linkedIn,\n    ROUND(CAST(SUM(r.sent) AS DOUBLE) * 100 / COUNT(*), 1) as outreach_rate\nFROM \n\tdatalake.imhotep.rsresumeview v\n\nLEFT JOIN\n\tdatalake.imhotep.rscontacts r\nON\n\tv.recruiterAccountId = r.senderAccountId\n    AND v.resumeAccountId = r.recipientAccountId\n    AND r.unixtime BETWEEN IMHOTEP_UNIXTIME('29d') AND IMHOTEP_UNIXTIME('1d')\n\nLEFT JOIN \n\tdatalake.imhotep.js_fact_store_snapshot_prod js\nON\n\tv.resumeAccountId = js.account_id\n\tAND js.resume_links_size > 0\n\tAND CARDINALITY(FILTER(js.resume_links_array, x -> x LIKE '%linkedin%')) > 0\n    AND js.unixtime BETWEEN IMHOTEP_UNIXTIME('29d') AND IMHOTEP_UNIXTIME('1d')\n\nWHERE \n\tv.unixtime BETWEEN IMHOTEP_UNIXTIME('29d') AND IMHOTEP_UNIXTIME('1d')\n--    AND js.account_id IS NOT NULL -- with LinkedIn link\n    AND js.account_id IS NULL -- exclude linkedIn users\n--    AND r.batchSize = 1",
  "queryTables" : [ "datalakehive.imhotep.js_fact_store_snapshot_prod", "datalakehive.imhotep.rscontacts", "datalakehive.imhotep.rsresumeview" ],
  "queryIndex" : 232,
  "runStartToQueryComplete" : 1652
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 510,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_174550_00256_vjepj): Query exceeded the maximum execution time limit of 10.00m",
  "scannedBytes" : 0,
  "query" : "SELECT min(day) FROM jssdi.profile_snapshot WHERE day >= '2020-01-01'",
  "queryTables" : [ "skipperhive.jssdi.profile_snapshot" ],
  "queryIndex" : 233,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 9294,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_174551_00257_vjepj): Query exceeded the maximum execution time limit of 10.00m",
  "scannedBytes" : 0,
  "query" : "WITH date_range AS (\n    SELECT\n        IMHOTEP_UNIXTIME('3month') AS start_date,\n        IMHOTEP_UNIXTIME('today') AS end_date\n)\nSELECT\n    COUNT(DISTINCT signin.accountid)\nFROM\n    datalake.imhotep.passdailysnapshot snapshot\nJOIN\n    datalake.imhotep.passsigninattempt signin ON snapshot.accountid = signin.accountid\nJOIN\n    date_range dr ON snapshot.unixtime BETWEEN dr.start_date AND dr.end_date\n    AND signin.unixtime BETWEEN dr.start_date AND dr.end_date\nWHERE\n    snapshot.deleted = 0\n    AND signin.successful = 1",
  "queryTables" : [ "datalakehive.imhotep.passdailysnapshot", "datalakehive.imhotep.passsigninattempt" ],
  "queryIndex" : 234,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 143414,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_174553_00258_vjepj): Cannot cast '6382338668' to INT",
  "scannedBytes" : 0,
  "query" : "--ca_en with QB exclusion seasonaljobsearch\nwith base as( \nselect accountid,upper(country) as country,lang as language \nfrom imhotep.jobsearch \nwhere unixtime between imhotep_unixtime('7d') and imhotep_unixtime('0d') \nand contains(grp, 'privileged') = false \nand contains(grp, 'spider') = false\nand contains(rcv, 'jsv') = true \nand contains(rcv, 'interaction') = true\nand contains(useragent, 'catchpoint') = false\nand accountid > 0 \nand country='ca'\nand contains(slcity,'quebec')=false\nand ipcountry='ca'\nand lang='fr'\nand regexp_like(qnorm, '.*(christmas|part|time|parttime|seasonalweekend|evening|hiring|immediately|flexible|night|shift|temporary|temps).*')\nunion\nselect accountid,upper(country) as country,lang as language \nfrom imhotep.mobsearch \nwhere unixtime between imhotep_unixtime('7d') and imhotep_unixtime('0d') \nand contains(grp, 'privileged') = false \nand contains(grp, 'spider') = false\nand contains(rcv, 'jsv') = true \nand contains(rcv, 'interaction')=true\nand contains(useragent, 'catchpoint')=false \nand accountid > 0 \nand country='ca'\nand contains(slcity,'quebec')=false\nand ipcountry='ca'\nand lang='fr'\nand regexp_like(qnorm, '.*(christmas|part|time|parttime|seasonalweekend|evening|hiring|immediately|flexible|night|shift|temporary|temps).*')), \nexclusions as (\nselect cast(accountId AS INT) as account_id\nfrom imhotep.advertiserUsers\nwhere unixtime between imhotep_unixtime('7d') and imhotep_unixtime('0d')\nand cast(accountId AS INT) > 0\nunion\nSELECT reportedAccountId AS account_id\nFROM imhotep.fraudulentResumeStatusActivity\nWHERE isfraud='1'\nAND unixtime between imhotep_unixtime('2019-12-09') and imhotep_unixtime('0d'))\nselect base.accountId,base.country,base.language\nfrom base\nleft join exclusions on base.accountid=exclusions.account_id\nwhere exclusions.account_id is null",
  "queryTables" : [ "skipperhive.imhotep.advertiserusers", "skipperhive.imhotep.fraudulentresumestatusactivity", "skipperhive.imhotep.jobsearch", "skipperhive.imhotep.mobsearch" ],
  "queryIndex" : 235,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 325,
  "totalScheduledMillis" : 77,
  "cpuMillis" : 66,
  "queuedMillis" : 0,
  "executeMillis" : 248,
  "getResultMillis" : 0,
  "iterateMillis" : 96,
  "rows" : 304,
  "error" : null,
  "scannedBytes" : 452550,
  "query" : "select partition, record_count, file_count, ceil(cast(total_size as double) / 1024 / 1024 / 500) as file_estimate, cast(cast(total_size as double) / 1024 / 1024 as decimal(10,3)) as total_size_MB\nfrom datalake.tiller.\"oplin_events_start$partitions\"",
  "queryTables" : [ "datalake.tiller.oplin_events_start$partitions" ],
  "queryIndex" : 236,
  "runStartToQueryComplete" : 1444
}, {
  "elapsedMillis" : 550763,
  "totalScheduledMillis" : 195350603,
  "cpuMillis" : 73078493,
  "queuedMillis" : 0,
  "executeMillis" : 3446,
  "getResultMillis" : 0,
  "iterateMillis" : 547369,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 5164551527432,
  "query" : "SELECT\n \t\tappName,\n        moderationApi, \n        moderationType, \n        count(*) as request_count,\n        COUNT_IF(flagged=1) as flagged_count,\n        COUNT_IF(flagged=1)  * 100.0 / count(*) as block_rate_pct,\n        min(FROM_UNIXTIME(unixtime)) as start_date,\n\t\tmax(FROM_UNIXTIME(unixtime)) as end_date,\n        now() as query_current_date,\n        DATE_DIFF('hour', max(FROM_UNIXTIME(unixtime)), now()) as data_lag_hours\nFROM\n       logrepo.log.llm_proxy lp\n    WHERE\n        lp.metric = 'moderation-text'\n        and unixtime > imhotep_unixtime(DATE(CURRENT_DATE) - interval '4' day)\n        and ('ContentGenerationService' = '' or appName='ContentGenerationService')\n        and ('openAIModerations' = '' or moderationApi='openAIModerations')\n        and ('input' = '' or moderationType='input')\ngroup by 1, 2, 3",
  "queryTables" : [ "logrepo.log.llm_proxy" ],
  "queryIndex" : 237,
  "runStartToQueryComplete" : 2001
}, {
  "elapsedMillis" : 14077,
  "totalScheduledMillis" : 1161219,
  "cpuMillis" : 247637,
  "queuedMillis" : 0,
  "executeMillis" : 2703,
  "getResultMillis" : 0,
  "iterateMillis" : 11384,
  "rows" : 322,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    ('Business Technology & Trust'='' OR t1 = 'Business Technology & Trust')\nORDER BY date, teamId, project, t0, t1 ASC ",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 238,
  "runStartToQueryComplete" : 1467
}, {
  "elapsedMillis" : 573039,
  "totalScheduledMillis" : 98978140,
  "cpuMillis" : 13767192,
  "queuedMillis" : 0,
  "executeMillis" : 10185,
  "getResultMillis" : 0,
  "iterateMillis" : 562903,
  "rows" : 2,
  "error" : null,
  "scannedBytes" : 392914414870,
  "query" : "with cjs as (\nSELECT \n    dcr.job_hash,\n    sum(cast(dcr.numhiresMade as int)) as numhiresMade,\n    sum(cast(dcr.numHiresMadeIndeed as int)) as numHiresMadeIndeed,\n    sum(cast(dcr.numHiresMadeExternal as int)) as numHiresMadeExternal\nFROM datalake.imhotep.dradisClosedJobReason as dcr\nWHERE dcr.unixtime BETWEEN IMHOTEP_UNIXTIME('2024-04-01') AND IMHOTEP_UNIXTIME('2024-10-24')\n\tand dcr.numhiresMade> '0'\n    and closedJobReason = 'notIndeed'\ngroup by 1\n)\n,job_id_job_hash_mapping as (\nSELECT \n\tjobhash_underscore, max(agg_job_id) as agg_job_id\nFROM datalake.imhotep.job_id_job_hash_mapping\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-10-23') AND IMHOTEP_UNIXTIME('2024-10-24')\n\tand jobhash_underscore in (select distinct job_hash from cjs)\ngroup by 1 \n)\n,jam as (\nselect \n\tagg_job_id,\n    max(job_product) as job_product,\n    max(job_country_code) as job_country_code,\n    sum(clicks) as clicks,\n    sum(apply_starts) as apply_starts,\n    sum(applies) as applies\nfrom datalake.imhotep.jobactivitymetrics\nwhere day between '2022-04-01' and 'today'\t\n\tand agg_job_id in (select distinct agg_job_id from job_id_job_hash_mapping)\ngroup by 1 \n)\n\n,view as (\nselect \n\tjob_id_job_hash_mapping.agg_job_id,\n    coalesce(applies,0) as applies,\n    coalesce(apply_starts,0) as apply_starts,\n    coalesce(clicks,0) as clicks,\n    numhiresMade,\n    numHiresMadeIndeed,\n    numHiresMadeExternal,\n    job_product,\n    job_country_code\nfrom cjs \njoin job_id_job_hash_mapping on job_id_job_hash_mapping.jobhash_underscore = cjs.job_hash\nleft join jam\n\ton job_id_job_hash_mapping.agg_job_id = jam.agg_job_id\n)\n\nselect \n   case when hs.jobid is not null then 1 else 0 end as reported_internally, \n   sum(view.numhiresMade) as hires,\n   1.00*count(distinct case when view.applies>0 then view.agg_job_id end)/count(distinct view.agg_job_id) as pct_job_w_apply,\n   1.00*count(distinct case when view.applies<10 then view.agg_job_id end)/count(distinct view.agg_job_id) as pct_job_w_lessthan10applies,\n   avg(view.applies) as avg_applies,\n   avg(view.apply_starts) as avg_applystarts,\n   avg(view.clicks) as avg_clicks\nfrom view \nleft join datalake.imhotep.hiredsignal hs \n\ton hs.unixtime BETWEEN IMHOTEP_UNIXTIME('2022-04-01') AND IMHOTEP_UNIXTIME('2024-10-24') \n    and view.agg_job_id = hs.jobid \ngroup by 1",
  "queryTables" : [ "datalakehive.imhotep.dradisclosedjobreason", "datalakehive.imhotep.dradisclosedjobreason", "datalakehive.imhotep.dradisclosedjobreason", "datalakehive.imhotep.hiredsignal", "datalakehive.imhotep.job_id_job_hash_mapping", "datalakehive.imhotep.job_id_job_hash_mapping", "datalakehive.imhotep.jobactivitymetrics" ],
  "queryIndex" : 239,
  "runStartToQueryComplete" : 2028
}, {
  "elapsedMillis" : 197609,
  "totalScheduledMillis" : 88732726,
  "cpuMillis" : 7953141,
  "queuedMillis" : 1,
  "executeMillis" : 76180,
  "getResultMillis" : 0,
  "iterateMillis" : 121511,
  "rows" : 2,
  "error" : null,
  "scannedBytes" : 241433925924,
  "query" : "WITH experiment_data AS (\n\tSELECT \n    \tCASE WHEN ARRAYS_OVERLAP(ndxgrp, \n            ARRAY['#b15:idxmatchingcontrolplane_e275','#B15:idxmatchingcontrolplane_e275']) \n            THEN 'test' ELSE 'control' END AS _group, \n        q, jobid\n    FROM organic -- TABLESAMPLE BERNOULLI (10) -- sampling rate\n    WHERE \n    \tunixtime >= imhotep_unixtime('2024-10-15') AND unixtime < imhotep_unixtime('2024-11-12') -- test start date & end date\n        AND country = 'ca'\n        AND ARRAYS_OVERLAP(ndxgrp, \n        \tARRAY['#b15:idxmatchingcontrolplane_e274','#B15:idxmatchingcontrolplane_e274',\n            \t  '#b15:idxmatchingcontrolplane_e275','#B15:idxmatchingcontrolplane_e275'])\n)\n\nSELECT \n\t_group, \n    COUNT_IF(answer='No') as bad_matches, \n    COUNT() AS all_labels, \n    COUNT_IF(answer='No') / CAST(COUNT() AS DOUBLE) AS BMR\nFROM jobtoqueryrelevance\nINNER JOIN experiment_data ON\n\tjobtoqueryrelevance.query = experiment_data.q\n    AND jobtoqueryrelevance.jobid = experiment_data.jobid\nWHERE \n\tjobtoqueryrelevance.unixtime >= imhotep_unixtime('2024-01-01') AND jobtoqueryrelevance.unixtime < imhotep_unixtime('2024-11-12')\n\tAND jobtoqueryrelevance.country='CA'\nGROUP BY _group",
  "queryTables" : [ "skipperhive.imhotep.jobtoqueryrelevance", "skipperhive.imhotep.organic" ],
  "queryIndex" : 240,
  "runStartToQueryComplete" : 1653
}, {
  "elapsedMillis" : 4079,
  "totalScheduledMillis" : 210990,
  "cpuMillis" : 21879,
  "queuedMillis" : 1,
  "executeMillis" : 1603,
  "getResultMillis" : 0,
  "iterateMillis" : 2558,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 2379877281,
  "query" : "        SELECT \n            *\n        FROM imhotep.passdailysnapshot\n        WHERE \n            day = date_format(date_add('day', -1, CURRENT_DATE), '%Y-%m-%d')\n            AND verified != 1\n            and accountid = 1228375881",
  "queryTables" : [ "skipperhive.imhotep.passdailysnapshot" ],
  "queryIndex" : 241,
  "runStartToQueryComplete" : 1461
}, {
  "elapsedMillis" : 409441,
  "totalScheduledMillis" : 327800930,
  "cpuMillis" : 114445227,
  "queuedMillis" : 1,
  "executeMillis" : 6817,
  "getResultMillis" : 0,
  "iterateMillis" : 402682,
  "rows" : 500,
  "error" : null,
  "scannedBytes" : 7628596835434,
  "query" : "with examples as (\nSELECT\n\t\tmoderationtext,\n        flagged,\n        flaggedcategories,\n        flaggedwords,\n \t\tappName,\n        moderationApi, \n        moderationType, \n        FROM_UNIXTIME(unixtime) as request_date,\n        requestid,\n        reqbody,\n        respbody\nFROM\n       logrepo.log.llm_proxy lp\n    WHERE\n    \tflagged = 1\n        and lp.metric = 'moderation-text'\n        and unixtime > imhotep_unixtime(DATE(CURRENT_DATE) - interval '4' day)\n        and ('ContentGenerationService' = '' or appName='ContentGenerationService')\n        and ('openAIModerations' = '' or moderationApi='openAIModerations')\n        and ('input' = '' or moderationType='input')\nlimit 500\n)\n\nSELECT\n        m.*,\n        r.model,\n        r.moderationHeader,\n        r.locale        \nFROM logrepo.log.llm_proxy r\n        join examples m on m.requestid = r.requestid -- switching to imhotep for speed even though there is a 1D data lag\n    WHERE\n        r.unixtime > imhotep_unixtime(DATE(CURRENT_DATE) - interval '4' day)\n        and r.metric = 'llm-proxy'",
  "queryTables" : [ "logrepo.log.llm_proxy", "logrepo.log.llm_proxy" ],
  "queryIndex" : 242,
  "runStartToQueryComplete" : 1870
}, {
  "elapsedMillis" : 12004,
  "totalScheduledMillis" : 607748,
  "cpuMillis" : 62703,
  "queuedMillis" : 0,
  "executeMillis" : 3023,
  "getResultMillis" : 0,
  "iterateMillis" : 9058,
  "rows" : 8,
  "error" : null,
  "scannedBytes" : 3935085369,
  "query" : "SELECT\n    DATE_TRUNC('month', activity_time) AS activity_month,\n    is_ai_outreach,\n    SUM(contact_sent) AS contact_count,\n    SUM(positive_response) AS positive_responses_count,\n    (SUM(positive_response) * 1.00) / SUM(contact_sent) AS pos_resp_rate\nFROM\n    datalake.employer_analytics_platform.xpa_fct_sourcing_engagement\nWHERE \n\tactivity_time >= DATE('2024-08-01')\n    --AND subscription_tier IN ('Standard')\n    AND contact_sent > 0\n    AND advertiser_id = 16775855\nGROUP BY 1, 2\nORDER BY 1, 2",
  "queryTables" : [ "datalakehive.employer_analytics_platform.xpa_fct_sourcing_engagement" ],
  "queryIndex" : 243,
  "runStartToQueryComplete" : 1476
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 536,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_174614_00267_vjepj): Query exceeded the maximum execution time limit of 10.00m",
  "scannedBytes" : 0,
  "query" : "SELECT min(day) FROM jssdi.profile_snapshot WHERE day >= '2020-01-01'",
  "queryTables" : [ "skipperhive.jssdi.profile_snapshot" ],
  "queryIndex" : 244,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 2217,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_174614_00268_vjepj): Query exceeded the maximum execution time limit of 10.00m",
  "scannedBytes" : 0,
  "query" : "SELECT \n\tELEMENT_AT(data, 'rum_context_element') as element,\n    ELEMENT_AT(data, 'rum_context_module') as module\nFROM \n\tlogrepo.raw_log.one_host_rum_action\nWHERE \n\tunixtime > IMHOTEP_UNIXTIME('yesterday') AND\n    ELEMENT_AT(data, 'rum_view_url') LIKE '%?%' AND\n    ELEMENT_AT(data, 'rum_view_name') = '/jobs' AND\n    ELEMENT_AT(data, 'rum_context_scope') = 'jobman-feature-modules' AND\n    ELEMENT_AT(data, 'rum_context_customActionType') = 'click' AND\n    ELEMENT_AT(data, 'rum_context_additional_searchTkUuid') IS NOT NULL AND\n    ELEMENT_AT(data, 'rum_context_additional_clickDepthIndex') IS NOT NULL AND\n    ELEMENT_AT(data, 'rum_context_additional_clickDepthPage') IS NOT NULL\n--    CARDINALITY(SPLIT(ELEMENT_AT(data, 'rum_context_additional_clickDepthIndex'), ',')) > 1 AND\n--    CARDINALITY(SPLIT(ELEMENT_AT(data, 'rum_context_additional_clickDepthPage'), ',')) > 1\nGROUP BY\n\tELEMENT_AT(data, 'rum_context_element'),\n    ELEMENT_AT(data, 'rum_context_module')",
  "queryTables" : [ "logrepo.raw_log.one_host_rum_action" ],
  "queryIndex" : 245,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 16323,
  "totalScheduledMillis" : 2638554,
  "cpuMillis" : 689486,
  "queuedMillis" : 0,
  "executeMillis" : 2477,
  "getResultMillis" : 0,
  "iterateMillis" : 13873,
  "rows" : 2093,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    ('Marketplace'='' OR t1 = 'Marketplace')\nORDER BY date, teamId, project, t0, t1 ASC ",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 246,
  "runStartToQueryComplete" : 1500
}, {
  "elapsedMillis" : 149070,
  "totalScheduledMillis" : 52136194,
  "cpuMillis" : 8918846,
  "queuedMillis" : 0,
  "executeMillis" : 1407,
  "getResultMillis" : 0,
  "iterateMillis" : 147720,
  "rows" : 246,
  "error" : null,
  "scannedBytes" : 18079361122,
  "query" : "-- Secondary metric:  number of unique jobs identified as present in a repost cluster (including both copy and original in the cluster)\n\nwith\ntruth_copies as\n(   select concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n           date_trunc('day', from_unixtime(jobCopyCreateDate/1000)) as day,\n           jobCopyJobId,\n           count(*) as c\n    from datalake.imhotep.duplicationDetectionRadContents\n    where imhotep_unixtime('1d') <= unixtime and unixtime < imhotep_unixtime('1d') + 24*60*60\n    and   modelId='Legacy RepostDetector'\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n    group by 1,2,3 ),\ntruth_originals as\n(   select concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n           date_trunc('day', from_unixtime(jobCopyCreateDate/1000)) as day,\n           originalJobId,\n           count(*) as c\n    from datalake.imhotep.duplicationDetectionRadContents\n    where imhotep_unixtime('1d') <= unixtime and unixtime < imhotep_unixtime('1d') + 24*60*60\n    and   modelId='Legacy RepostDetector'\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n    group by 1,2,3 ),\ntruth_jobs as\n(   select model, day, jobCopyJobId as jobId from truth_copies\n    union\n    select model, day, originalJobId as jobId from truth_originals ),\nmodel_copies as\n(   select concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n           date_trunc('day', from_unixtime(jobCopyCreateDate/1000)) as day,\n           jobCopyJobId as jobId,\n           count(*) as c\n    from datalake.imhotep.duplicationDetectionRadContents\n    where imhotep_unixtime('1d') <= unixtime and unixtime < imhotep_unixtime('1d') + 24*60*60\n    and   modelId='legacyRepostModel-2.2'\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n    group by 1,2,3 ),\nmodel_originals as\n(   select concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n           date_trunc('day', from_unixtime(jobCopyCreateDate/1000)) as day,\n           originalJobId as jobId,\n           count(*) as c\n    from datalake.imhotep.duplicationDetectionRadContents\n    where imhotep_unixtime('1d') <= unixtime and unixtime < imhotep_unixtime('1d') + 24*60*60\n    and   modelId='legacyRepostModel-2.2'\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n    group by 1,2,3 ),\nmodel_jobs as\n(   select model, day, jobId from model_copies\n    union\n    select model, day, jobId from model_originals ),\nmatches as\n(   select coalesce(mj.day, tj.day) as day,\n           tj.jobId is not null as truth_match,\n           mj.jobId is not null as model_match\n\tfrom truth_jobs tj\n    full outer join model_jobs mj on (    mj.model != tj.model\n                                      and mj.day = tj.day\n                                      and mj.jobId = tj.jobId)\n),\nvenn as\n(   select day,\n           truth_match,\n           model_match,\n           count(*) as count\n    from matches\n    group by 1,2,3 ),\nintersection_count as\n(   select day,\n           count\n    from venn\n    where truth_match\n    and   model_match\n),\nunion_count as\n(   select day,\n           sum(count) as count\n    from venn -- ignoring truth_match and model_match fields\n    group by 1 )\nselect ic.day,\n       ic.count as intersection_count,\n       uc.count as union_count,\n       cast(ic.count as double) / cast(uc.count as double) as jaccard\nfrom intersection_count ic,\n     union_count uc\nwhere ic.day = uc.day",
  "queryTables" : [ "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents" ],
  "queryIndex" : 247,
  "runStartToQueryComplete" : 1634
}, {
  "elapsedMillis" : 52181,
  "totalScheduledMillis" : 14037480,
  "cpuMillis" : 3223240,
  "queuedMillis" : 0,
  "executeMillis" : 2199,
  "getResultMillis" : 0,
  "iterateMillis" : 50013,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 15141393278,
  "query" : "-- once a copy is assigned to an original, it is never reassigned to a different original\n\nwith\ntoday as\n(   select concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n           concat(radArtifactName, '-', modelId) as artifactModel,\n           jobCopyJobId,\n           originalJobId\n    from datalake.imhotep.duplicationDetectionRadContents\n    where imhotep_unixtime('1d') <= unixtime and unixtime < imhotep_unixtime('1d') + 24*60*60\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n),\nyesterday as\n(   select concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n           concat(radArtifactName, '-', modelId) as artifactModel,\n           jobCopyJobId,\n           originalJobId\n    from datalake.imhotep.duplicationDetectionRadContents\n    where imhotep_unixtime('1d') - 24*60*60 <= unixtime and unixtime < imhotep_unixtime('1d')\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n)\nselect y.model,\n       y.jobCopyJobId,\n       y.originalJobId as yesterdayOriginal,\n       t.originalJobId as todayOriginal\nfrom yesterday y\njoin today t on (    t.artifactModel = y.artifactModel\n                 and t.jobCopyJobId = y.jobCopyJobId\n                 and t.originalJobId != y.originalJobId)",
  "queryTables" : [ "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents" ],
  "queryIndex" : 248,
  "runStartToQueryComplete" : 1537
}, {
  "elapsedMillis" : 360948,
  "totalScheduledMillis" : 9412822,
  "cpuMillis" : 3607808,
  "queuedMillis" : 0,
  "executeMillis" : 5515,
  "getResultMillis" : 0,
  "iterateMillis" : 355480,
  "rows" : 8,
  "error" : null,
  "scannedBytes" : 4425440,
  "query" : "SELECT password\nFROM logrepo.log.rozNavTiming\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1000d') AND IMHOTEP_UNIXTIME('1d') \nGROUP BY password\nLIMIT 10",
  "queryTables" : [ "logrepo.log.roznavtiming" ],
  "queryIndex" : 249,
  "runStartToQueryComplete" : 1849
}, {
  "elapsedMillis" : 36042,
  "totalScheduledMillis" : 4167110,
  "cpuMillis" : 1006573,
  "queuedMillis" : 0,
  "executeMillis" : 1840,
  "getResultMillis" : 0,
  "iterateMillis" : 34225,
  "rows" : 8311,
  "error" : null,
  "scannedBytes" : 4485971464,
  "query" : "-- do create dates match between truth and compare?\n\nwith\ntruth as\n(   select concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n           jobCopyJobId,\n           jobCopyCreateDate,\n           originalJobId,\n           originalJobCreateDate\n    from datalake.imhotep.duplicationDetectionRadContents legacy\n    where imhotep_unixtime('1d') <= unixtime and unixtime < imhotep_unixtime('1d') + 24*60*60\n    and   modelId = 'Legacy RepostDetector'\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n),\ncompare as\n(   select concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n           jobCopyJobId,\n           jobCopyCreateDate,\n           originalJobId,\n           originalJobCreateDate\n    from datalake.imhotep.duplicationDetectionRadContents legacy\n    where imhotep_unixtime('1d') <= unixtime and unixtime < imhotep_unixtime('1d') + 24*60*60\n    and   modelId = 'legacyRepostModel-2.2'\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n)\nselect t.jobCopyJobId jobId,\n       t.model as truthModel,\n       t.jobCopyCreateDate as truthJobCreate,\n       c.model as compareModel,\n       c.jobCopyCreateDate as compareJobCreate,\n       date_diff('hour', from_unixtime(t.jobCopyCreateDate/1000), from_unixtime(c.jobCopyCreateDate/1000))/24.0 as diffDays\nfrom truth t,\n     compare c\nwhere t.jobCopyJobId = c.jobCopyJobId\nand   t.jobCopyCreateDate != c.jobCopyCreateDate",
  "queryTables" : [ "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents" ],
  "queryIndex" : 250,
  "runStartToQueryComplete" : 1528
}, {
  "elapsedMillis" : 20181,
  "totalScheduledMillis" : 1834547,
  "cpuMillis" : 444851,
  "queuedMillis" : 0,
  "executeMillis" : 839,
  "getResultMillis" : 0,
  "iterateMillis" : 19366,
  "rows" : 4,
  "error" : null,
  "scannedBytes" : 1643342428,
  "query" : "-- the artifact contains only copies which were. created <= 245 days from artifact creation\n\n-- WARNING: this will only produce correct results if clusters are defined only by root and leaves (no deeper structures)\n\nwith\ncopy_ages as\n(   select distinct concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n                    date_diff('day', from_unixtime(jobCopyCreateDate / 1000), from_unixtime(imhotep_unixtime('1d'))) as copyAge--,\n--                    date_diff('day', from_unixtime(originalJobCreateDate / 1000), from_unixtime(imhotep_unixtime('1d'))) as originalAge\n    from datalake.imhotep.duplicationDetectionRadContents\n    where imhotep_unixtime('1d') <= unixtime and unixtime < imhotep_unixtime('1d') + 24*60*60\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n)\nselect model,\n       approx_percentile(copyAge, array [0.001, 0.01, 0.1, 0.25, 0.5, 0.75, 0.9, 0.99, 0.999, 1]) clusterDaySpans\nfrom copy_ages\ngroup by 1",
  "queryTables" : [ "datalakehive.imhotep.duplicationdetectionradcontents" ],
  "queryIndex" : 251,
  "runStartToQueryComplete" : 1518
}, {
  "elapsedMillis" : 149964,
  "totalScheduledMillis" : 44513644,
  "cpuMillis" : 7903579,
  "queuedMillis" : 0,
  "executeMillis" : 1042,
  "getResultMillis" : 0,
  "iterateMillis" : 148968,
  "rows" : 4,
  "error" : null,
  "scannedBytes" : 20955761672,
  "query" : "-- if we know the structure of the clusters within the data are simple, only leaves and root (no intermediate nodes)\n-- then we can analyze clusters in SQL without having to traverse graphs (in code)\n\n-- lets exclude cycles (of length 2) here, they are listed in a separate invariant\n\nwith\nmappings as\n(   select distinct\n           concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n           jobCopyJobId,\n           jobCopyCreateDate,\n           originalJobId,\n           originalJobCreateDate\n    from datalake.imhotep.duplicationDetectionRadContents\n    where imhotep_unixtime('1d') <= unixtime and unixtime < imhotep_unixtime('1d') + 24*60*60\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n),\nincident_edges as\n(   select distinct\n           e1.model,\n           e1.jobCopyJobId as jobId,\n           e1.jobCopyCreateDate as createDate,\n           (e1.jobCopyCreateDate = e2.originalJobCreateDate) as datesMatch\n    from mappings e1,\n         mappings e2\n    where e1.model = e2.model\n    and   e1.jobCopyJobId = e2.originalJobId\n    and   e1.originalJobId != e2.jobCopyJobId -- exclude length 2 cycles\n)\nselect model, \n       count(*)\nfrom incident_edges\ngroup by 1",
  "queryTables" : [ "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents" ],
  "queryIndex" : 252,
  "runStartToQueryComplete" : 1649
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 10505,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_174649_00276_vjepj): Division by zero",
  "scannedBytes" : 0,
  "query" : "with \n-- Pull all conversations initiated by employers \ndremrToConvs as (\nselect  unixtime, advertiserId,  eventId, conversationId\n  \t\t, case when starts_with(subEventType, 'INBOUND_EMAIL') then 1 else 0 end as is_email\n        , case when starts_with(source, 'Dremr')  then 1 else 0 end as is_Dremr  \n  from conversationEvents \nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('56d') and IMHOTEP_UNIXTIME('28d')\n  and context = 'APPLICATION'\n  and ownerRole != 'JOBSEEKER'\n  and cast(isInitialMessage as int)=1 -- Look at initial messages only, as a proxy for when a conversation is created\ngroup by 1,2,3,4,5,6\n\n              )\n              \n-- Employers with any ATS Integration\n,atsEmployers as (\n\nselect advertiserId  \n  from partnerEmployerMap\n where unixtime BETWEEN IMHOTEP_UNIXTIME('56d') and IMHOTEP_UNIXTIME('28d')\n   and confidenceScore >0\ngroup by  1 \n\n                )\n\n-- advertisers that have had at least 1 candidate delivered to the ATS with a DREMR email\n, atsSync as (\n\nselect advertiser_id, connection_type as ats \n      , agg_job_id\n      ,concat('DRADIS/', cast(advertiser_id as varchar), '-', cast(dradis_candidate_id as varchar)) as conversationId\n\n  from acdcTransferLifecycle\n where unixtime BETWEEN IMHOTEP_UNIXTIME('56d') and IMHOTEP_UNIXTIME('28d')\n   and pipeline_internal_type='INTERNAL_LOCATION_TYPE_EMPLOYER_JOB'\n   and connection_type!= 'h2ia'\n   and driver_type not in ('pipeline-csul', 'pipeline-csul-historical')\ngroup by 1,2,3,4\n            \n            )\n -- Dradis bulk export           \n,dradisBulkExport as (    \t\n\n        SELECT advertiserId\n\t\t\t  ,concat('DRADIS/', cast(advertiserId as varchar), '-', cast(candidateId as varchar)) as conversationId\n        FROM datalake.imhotep.dradisCandidateExportRequest\n        CROSS JOIN UNNEST(split(candidateIds, ',')) as t (candidateId)\n        WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('56d') and IMHOTEP_UNIXTIME('28d')\n       group by 1,2\n  )     \n\n\n-- advertiser segment details\n,advertiserDetails as ( \n\nselect advertiser_id\n   , max_by(parent_company_size_segment, unixtime) as parent_company_size_segment\n   , max_by(type, unixtime) as type\n   , max_by(billing_country, unixtime) as billing_country\n  from  daily_employer2 \n  where unixtime BETWEEN IMHOTEP_UNIXTIME('29d') and IMHOTEP_UNIXTIME('28d')\ngroup by 1\n\n   )\n\n\n -- Aggregate convo counts per query\n, empDataAgg as (\n\n\n select \n\tdremrToConvs.advertiserId\n   ,case when atsEmployers.advertiserId is not null then 1 else 0 end as isAtsIntegrated   \n   ,count(*) as allConvos\n   ,count_if(is_Dremr=1) as dremrConvos\n   --,count_if(is_Dremr=1 and is_email=1) as dremrEmailConvos\n   ,count_if(is_Dremr=1 and atsSync.conversationId is not null) as dremrAtsSyncAll\n   ,count_if(is_Dremr=1 and dradisBulkExport.conversationId is not null) as dremrDradisBulkExport\n   ,count_if(is_Dremr=1 and (atsSync.conversationId is not null or dradisBulkExport.conversationId is not null)) as dremrAtsSyncOrBulkExport\n   \n   \n  from dremrToConvs \n  left join atsEmployers on dremrToConvs.advertiserId=atsEmployers.advertiserId\n  left join atsSync on dremrToConvs.advertiserId=atsSync.advertiser_id\n        and dremrToConvs.conversationId=atsSync.conversationId\n  left join dradisBulkExport on dremrToConvs.advertiserId=dradisBulkExport.advertiserId\n        and dremrToConvs.conversationId=dradisBulkExport.conversationId\n    \n  group by 1,2\n                )\n                \n \n,segConvos as (\nselect\n    ce.advertiserId\n   ,eventId\n   ,ce.encryptedConversationId\n   ,(isImported = '1') as isEmail\nFROM conversationEvents ce\njoin convsConversationCreation cc on  ce.encryptedConversationId = cc.encryptedConversationId \n\nWHERE ce.unixtime BETWEEN IMHOTEP_UNIXTIME('209d') AND IMHOTEP_UNIXTIME('28d')\nand   cc.unixtime BETWEEN IMHOTEP_UNIXTIME('223d') AND IMHOTEP_UNIXTIME('28d')\nand ((ce.unixtime - cc.unixtime) < (60*60*24*14))\nand ce.context='APPLICATION'\nand ce.ownerRole != 'JOBSEEKER'\nGROUP BY 1,2,3,4\n)\n\n\n, segConvosAgg as (\n\nselect advertiserId\n      ,count(*) as totalMessages\n      ,count_if(isEmail) as emailMessages\n      ,count_if(NOT isEmail) as onPlatformMessages \n  from segConvos\ngroup by 1 \n\n\t\t)\n\n,segConvosAgg2 as (\n\n select advertiserId, case when emailMessages> 0 and onPlatformMessages=0 then 'Email Only'\n\t\t\t when  emailMessages=0 and onPlatformMessages>0 then 'Chat Only'\n\t\t\t when  emailMessages>0 and onPlatformMessages>0 then 'Email & Chat'\n             end as usageType\n\n  from segConvosAgg\n                 )\n\n\nselect \n        segConvosAgg2.usageType\n       ,count() as empCount\n       , 100.0*count()/sum(count()) over () pctEmpCountOfAll\n    --  ,count_if(isAtsIntegrated=1) as empCountAtsIntegrated\n      ,100.00* count_if(isAtsIntegrated=1)/count(*) as pctEmpAtsIntegrated\n      ,sum(allConvos) as ttlConvosInitiated\n\t  ,sum(DremrConvos) as DremrConvosInitiated\n  --    ,sum(dremrConvos) as ttlDremrConvosInitiated\n      ,100.00* sum(dremrConvos)/sum(allConvos) as dremrConvosPctOfAllInitiated\n      \n      ,100.00* sum(dremrAtsSyncAll)/sum(dremrConvos) as pctOfDremrConvosAtsSyncAll\n      ,100.00* sum(dremrDradisBulkExport)/sum(dremrConvos) as pctOfDremrConvosDradisBulkExport\n      ,100.00* sum(dremrAtsSyncOrBulkExport)/sum(dremrConvos) as pctOfDremrConvosAtsSyncOrBulkExport\n     \n from empDataAgg\nleft join advertiserDetails on empDataAgg.advertiserId=advertiserDetails.advertiser_id\nleft join segConvosAgg2     on empDataAgg.advertiserId=segConvosAgg2.advertiserId\n    where  parent_company_size_segment in ('L', 'XL') and usageType is not null\ngroup by 1\n                \n\n                \n\n              \n              \n              ",
  "queryTables" : [ "datalakehive.imhotep.dradiscandidateexportrequest", "skipperhive.imhotep.acdctransferlifecycle", "skipperhive.imhotep.conversationevents", "skipperhive.imhotep.conversationevents", "skipperhive.imhotep.convsconversationcreation", "skipperhive.imhotep.daily_employer2", "skipperhive.imhotep.partneremployermap" ],
  "queryIndex" : 253,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 3742,
  "totalScheduledMillis" : 163672,
  "cpuMillis" : 10697,
  "queuedMillis" : 0,
  "executeMillis" : 1187,
  "getResultMillis" : 0,
  "iterateMillis" : 2580,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 251534380,
  "query" : "select count(1) from clickanalytics where unixtime between imhotep_unixtime('2019-03-01') and imhotep_unixtime('2019-03-02')",
  "queryTables" : [ "skipperhive.imhotep.clickanalytics" ],
  "queryIndex" : 254,
  "runStartToQueryComplete" : 1506
}, {
  "elapsedMillis" : 51489,
  "totalScheduledMillis" : 10041884,
  "cpuMillis" : 2167413,
  "queuedMillis" : 0,
  "executeMillis" : 855,
  "getResultMillis" : 0,
  "iterateMillis" : 50682,
  "rows" : 4,
  "error" : null,
  "scannedBytes" : 7455711710,
  "query" : "-- copies are assigned originals which were created between 0 and 90 days prior\n\n-- WARNING: this will only produce correct results if clusters are defined only by root and leaves (no deeper structures)\n\nwith\ncluster_day_spans as\n(   select distinct concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n                    originalJobId as clusterId,\n                    date_diff('day', from_unixtime(originalJobCreateDate / 1000), from_unixtime(jobCopyCreateDate / 1000)) as daySpan\n    from datalake.imhotep.duplicationDetectionRadContents\n    where imhotep_unixtime('1d') <= unixtime and unixtime < imhotep_unixtime('1d') + 24*60*60\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n)\nselect model,\n       approx_percentile(daySpan, array [0.001, 0.01, 0.1, 0.25, 0.5, 0.75, 0.9, 0.99, 0.999, 1]) clusterDaySpans\nfrom cluster_day_spans\ngroup by 1",
  "queryTables" : [ "datalakehive.imhotep.duplicationdetectionradcontents" ],
  "queryIndex" : 255,
  "runStartToQueryComplete" : 1556
}, {
  "elapsedMillis" : 73332,
  "totalScheduledMillis" : 26450060,
  "cpuMillis" : 3649000,
  "queuedMillis" : 0,
  "executeMillis" : 2088,
  "getResultMillis" : 0,
  "iterateMillis" : 71293,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 363869574220,
  "query" : "WITH\n\tunverified_accounts AS (\n        SELECT \n            accountid\n            , verified\n        FROM imhotep.passdailysnapshot\n        WHERE \n            day = date_format(date_add('day', -1, CURRENT_DATE), '%Y-%m-%d')\n            AND verified != 1\n    ), profiles AS (\n        SELECT \n            acctid AS accountid\n            , resumes\n            , fileinformation\n        FROM jssdi.profile_snapshot \n        WHERE \n            day = date_format(date_add('day', -1, CURRENT_DATE), '%Y-%m-%d')\n            AND cardinality(\n            \tFILTER(\n                \tfileinformation\n                    , f -> f.type = 'RESUME'\n                )\n            ) > 1\n            -- none resume or single resume in PARSED or IR type\n            AND (\n            \tresumes is null\n                OR ( CARDINALITY(resumes) = 1 and resumes[1].resumetype in ('PARSED', 'INDEED_RESUME')\n                )\n\t)\n   )\n    \n    SELECT\n    p.accountid\n    , '<batch_name>_xxx'\n--    , a.verified\n--    , CARDINALITY(resumes) as rez_count\n--    , if (resumes = null, null, resumes[1].resumetype) as rez_type\n--    , cardinality(\n--            \tFILTER(\n--                \tfileinformation\n--                    , f -> f.type = 'RESUME'\n--                )\n--            ) as rez_file_count\n    from profiles p\n    join unverified_accounts a\n    on p.accountid = a.accountid\n --   limit 100",
  "queryTables" : [ "skipperhive.imhotep.passdailysnapshot", "skipperhive.jssdi.profile_snapshot" ],
  "queryIndex" : 256,
  "runStartToQueryComplete" : 1579
}, {
  "elapsedMillis" : 268730,
  "totalScheduledMillis" : 238480,
  "cpuMillis" : 33931,
  "queuedMillis" : 0,
  "executeMillis" : 1223,
  "getResultMillis" : 0,
  "iterateMillis" : 267574,
  "rows" : 12171836,
  "error" : null,
  "scannedBytes" : 1155019023,
  "query" : "select *\nfrom datalake.tiller.oplin_events_start\nwhere ingest_time > date '2024-10-29'",
  "queryTables" : [ "datalake.tiller.oplin_events_start" ],
  "queryIndex" : 257,
  "runStartToQueryComplete" : 1775
}, {
  "elapsedMillis" : 67072,
  "totalScheduledMillis" : 20957550,
  "cpuMillis" : 3597447,
  "queuedMillis" : 0,
  "executeMillis" : 1177,
  "getResultMillis" : 0,
  "iterateMillis" : 65907,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 363911551055,
  "query" : "WITH\n\tunverified_accounts AS (\n        SELECT \n            accountid\n            , verified\n        FROM imhotep.passdailysnapshot\n        WHERE \n            day = date_format(date_add('day', -1, CURRENT_DATE), '%Y-%m-%d')\n            AND verified != 1\n    ), profiles AS (\n        SELECT \n            acctid AS accountid\n            , resumes\n            , fileinformation\n        FROM jssdi.profile_snapshot \n        WHERE \n            day = date_format(date_add('day', -1, CURRENT_DATE), '%Y-%m-%d')\n            AND cardinality(\n            \tFILTER(\n                \tfileinformation\n                    , f -> f.type = 'RESUME'\n                )\n            ) > 1\n            -- none resume or single resume in PARSED or IR type\n            AND (\n            \tresumes is null\n                OR ( CARDINALITY(resumes) = 1 and resumes[1].resumetype in ('PARSED', 'INDEED_RESUME')\n                )\n\t)\n   )\n    \n    SELECT\n    count(distinct p.accountid)\n    from profiles p\n    join unverified_accounts a\n    on p.accountid = a.accountid\n    limit 100",
  "queryTables" : [ "skipperhive.imhotep.passdailysnapshot", "skipperhive.jssdi.profile_snapshot" ],
  "queryIndex" : 258,
  "runStartToQueryComplete" : 1581
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 1221,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_174704_00282_vjepj): Query exceeded the maximum execution time limit of 10.00m",
  "scannedBytes" : 0,
  "query" : "-- Secondary metric:  jaccard similarity of clusters (when clusters can \"match\" even when repostIds are different -- a relaxation of the primary metric)\n\n-- WARNING: this will only produce correct results if clusters are defined only by root and leaves (no deeper structures)\n\nwith\n--lets try to collect the clusters into sets, a special case for adding the original into the set also\ncluster_job_array_prep as\n(   select modelId,\n           concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n           originalJobId as originalRepostId,\n           array_distinct(array_agg(jobCopyJobId)) as copyJobIds\n    from datalake.imhotep.duplicationDetectionRadContents -- datalake.imhotep.duplicationDetectionRadContents\n    where imhotep_unixtime('1d') <= unixtime and unixtime < imhotep_unixtime('1d') + 24*60*60\n    and modelId in ('Legacy RepostDetector', 'legacyRepostModel-2.2')\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n    group by 1,2,3\n)\n--select modelId, count(*) from cluster_job_array_prep group by 1 -- 39,329,833\n--select count(*) from cluster_job_array_prep where array_position(copyJobIds, originalRepostId) = 0 -- 39,329,833\n--select count(distinct originalRepostId) from cluster_job_array_prep -- 39,329,833\n--select * from cluster_job_array_prep limit 10\n,\n--/*\ntruth_cluster_job_arrays as\n(   select model,\n           originalRepostId,\n           array_min(array_union(copyJobIds, array [originalRepostId])) as newRepostId,\n           array_sort(array_distinct(array_union(copyJobIds, array [originalRepostId]))) as jobIds\n    from cluster_job_array_prep\n    where modelId='Legacy RepostDetector'\n)\n--select model, count(*) from truth_cluster_job_arrays group by 1 -- 39,329,833\n--select count(distinct originalRepostId) from truth_cluster_job_arrays -- 39,329,833\n--select count(distinct newRepostId) from truth_cluster_job_arrays -- 39,329,832 -- ??? why one less?\n--select originalRepostId = newRepostId, count(*) from truth_cluster_job_arrays group by 1 -- 39,328,980 + 853 = 39,329,833\n--select * from truth_cluster_job_arrays limit 10\n,\n--/*\ncompare_cluster_job_arrays as\n(   select model,\n           originalRepostId,\n           array_min(array_union(copyJobIds, array [originalRepostId])) as newRepostId,\n           array_sort(array_distinct(array_union(copyJobIds, array [originalRepostId]))) as jobIds\n    from cluster_job_array_prep\n    where modelId='legacyRepostModel-2.2'\n)\n--select model, count(*) from compare_cluster_job_arrays group by 1 -- 39,329,833\n--select count(distinct originalRepostId) from compare_cluster_job_arrays -- 39,329,833\n--select count(distinct newRepostId) from compare_cluster_job_arrays -- 39,329,832 -- ??? why one less?\n--select originalRepostId = newRepostId, count(*) from compare_cluster_job_arrays group by 1 -- 39,328,980 + 853 = 39,329,833\n--select * from compare_cluster_job_arrays limit 10\n,\n--/*\nmatches as\n(   select tcja.newRepostId is not null as truth_match,\n           ccja.newRepostId is not null as compare_match\n    from            truth_cluster_job_arrays tcja\n    full outer join compare_cluster_job_arrays ccja on (    tcja.newRepostId = ccja.newRepostId\n                                                        and tcja.jobIds = ccja.jobIds)\n)\n,\n--select count(*) from matches -- 49,442,531\n--select count(distinct newRepostId) from matches -- 39,329,832\n--select truth_match, compare_match, count(*) from matches group by 1,2\n--select * from matches limit 10\n--/*\nintersection_count as\n(   select count(*) as count\n    from matches\n    where truth_match\n    and   compare_match\n)\n--select * from intersection_count limit 10\n,\n--/*\nunion_count as\n(   select count(*) as count\n    from matches\n)\n--select * from union_count limit 10\n--/*\nselect ic.count as intersection_count,\n       uc.count as union_count,\n       cast(ic.count as double) / cast(uc.count as double) as jaccard\nfrom intersection_count ic,\n     union_count uc\n/*\n*/\n",
  "queryTables" : [ "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents" ],
  "queryIndex" : 259,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 44694,
  "totalScheduledMillis" : 14048590,
  "cpuMillis" : 2557490,
  "queuedMillis" : 0,
  "executeMillis" : 1855,
  "getResultMillis" : 0,
  "iterateMillis" : 42863,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 4667732275,
  "query" : "-- a copy can be assigned at most one original\n\nselect concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n       jobCopyJobId,\n       count(*)\nfrom datalake.imhotep.duplicationDetectionRadContents\nwhere imhotep_unixtime('1d') <= unixtime and unixtime < imhotep_unixtime('1d') + 24*60*60\nand   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\ngroup by 1,2\nhaving count(*) > 1",
  "queryTables" : [ "datalakehive.imhotep.duplicationdetectionradcontents" ],
  "queryIndex" : 260,
  "runStartToQueryComplete" : 1561
}, {
  "elapsedMillis" : 36416,
  "totalScheduledMillis" : 6302852,
  "cpuMillis" : 1237607,
  "queuedMillis" : 0,
  "executeMillis" : 893,
  "getResultMillis" : 0,
  "iterateMillis" : 35551,
  "rows" : 1000,
  "error" : null,
  "scannedBytes" : 7655444819,
  "query" : "-- do create dates match between truth and compare?\n\nwith\ntruth as\n(   select distinct\n           concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n           originalJobId,\n           originalJobCreateDate\n    from datalake.imhotep.duplicationDetectionRadContents legacy\n    where imhotep_unixtime('1d') <= unixtime and unixtime < imhotep_unixtime('1d') + 24*60*60\n    and   modelId = 'Legacy RepostDetector'\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n),\ncompare as\n(   select distinct\n           concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n           originalJobId,\n           originalJobCreateDate\n    from datalake.imhotep.duplicationDetectionRadContents legacy\n    where imhotep_unixtime('1d') <= unixtime and unixtime < imhotep_unixtime('1d') + 24*60*60\n    and   modelId = 'legacyRepostModel-2.2'\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n)\nselect t.originalJobId jobId,\n       t.model as truthModel,\n       t.originalJobCreateDate as truthJobCreate,\n       c.model as compareModel,\n       c.originalJobCreateDate as compareJobCreate,\n       date_diff('hour', from_unixtime(t.originalJobCreateDate/1000), from_unixtime(c.originalJobCreateDate/1000))/24.0 as diffDays\nfrom truth t,\n     compare c\nwhere t.originalJobId = c.originalJobId\nand   t.originalJobCreateDate != c.originalJobCreateDate\nand   date_diff('hour', from_unixtime(t.originalJobCreateDate/1000), from_unixtime(c.originalJobCreateDate/1000))/24.0 > 0\norder by diffDays asc\nlimit 1000",
  "queryTables" : [ "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents" ],
  "queryIndex" : 261,
  "runStartToQueryComplete" : 1558
}, {
  "elapsedMillis" : 20646,
  "totalScheduledMillis" : 1774644,
  "cpuMillis" : 435335,
  "queuedMillis" : 0,
  "executeMillis" : 846,
  "getResultMillis" : 0,
  "iterateMillis" : 19818,
  "rows" : 4,
  "error" : null,
  "scannedBytes" : 4618175209,
  "query" : "-- the artifact contains only copies which were. created <= 245 days from artifact creation\n\n-- WARNING: this will only produce correct results if clusters are defined only by root and leaves (no deeper structures)\n\nwith\ncopy_ages as\n(   select distinct concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n                    date_diff('day', from_unixtime(originalJobCreateDate / 1000), from_unixtime(imhotep_unixtime('1d'))) as originalAge\n    from datalake.imhotep.duplicationDetectionRadContents\n    where imhotep_unixtime('1d') <= unixtime and unixtime < imhotep_unixtime('1d') + 24*60*60\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n)\nselect model,\n       approx_percentile(originalAge, array [0.001, 0.01, 0.1, 0.25, 0.5, 0.75, 0.9, 0.99, 0.999, 1]) clusterDaySpans\nfrom copy_ages\ngroup by 1",
  "queryTables" : [ "datalakehive.imhotep.duplicationdetectionradcontents" ],
  "queryIndex" : 262,
  "runStartToQueryComplete" : 1546
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 860,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_174716_00286_vjepj): Query exceeded the maximum execution time limit of 10.00m",
  "scannedBytes" : 0,
  "query" : "-- Secondary metric:  jaccard similarity of clusters (when clusters can \"match\" even when repostIds are different -- a relaxation of the primary metric)\n\n-- WARNING: this will only produce correct results if clusters are defined only by root and leaves (no deeper structures)\n\nwith\n--lets try to collect the clusters into sets, a special case for adding the original into the set also\ncluster_job_array_prep as\n(   select modelId,\n           concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n           originalJobId as originalRepostId,\n           array_distinct(array_agg(jobCopyJobId)) as copyJobIds\n    from datalake.imhotep.duplicationDetectionRadContents -- datalake.imhotep.duplicationDetectionRadContents\n    where imhotep_unixtime('1d') <= unixtime and unixtime < imhotep_unixtime('1d') + 24*60*60\n    and modelId in ('Legacy RepostDetector', 'legacyRepostModel-2.2')\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n    group by 1,2,3\n),\n--/*\ntruth_cluster_job_arrays as\n(   select model,\n           originalRepostId,\n           array_min(array_union(copyJobIds, array [originalRepostId])) as newRepostId,\n           array_sort(array_distinct(array_union(copyJobIds, array [originalRepostId]))) as jobIds\n    from cluster_job_array_prep\n    where modelId='Legacy RepostDetector'\n),\n--/*\ncompare_cluster_job_arrays as\n(   select model,\n           originalRepostId,\n           array_min(array_union(copyJobIds, array [originalRepostId])) as newRepostId,\n           array_sort(array_distinct(array_union(copyJobIds, array [originalRepostId]))) as jobIds\n    from cluster_job_array_prep\n    where modelId='legacyRepostModel-2.2'\n),\n--/*\njaccards as\n(   select 1.000 * cardinality(array_intersect(coalesce(tcja.jobIds, array []), coalesce(ccja.jobIds, array []))) /\n                 cardinality(array_union(coalesce(tcja.jobIds, array []), coalesce(ccja.jobIds, array []))) as jaccard,\n           cardinality(array_intersect(coalesce(tcja.jobIds, array []), coalesce(ccja.jobIds, array []))) as intersectSize,\n           cardinality(array_union(coalesce(tcja.jobIds, array []), coalesce(ccja.jobIds, array []))) as unionSize,\n           tcja.originalRepostId as truthRepostId,\n           ccja.originalRepostId as compareRepostId,\n           array_union(array_except(coalesce(tcja.jobIds, array []), coalesce(ccja.jobIds, array [])),\n                       array_except(coalesce(ccja.jobIds, array []), coalesce(tcja.jobIds, array []))) as symDiff,\n           tcja.jobIds as truthJobIds,\n           ccja.jobIds as compareJobIds\n    from            truth_cluster_job_arrays tcja\n    full outer join compare_cluster_job_arrays ccja on (    tcja.newRepostId = ccja.newRepostId)\n)\nselect *\nfrom jaccards\nwhere jaccard < 1.0 -- eliminate exact matches\nand   truthRepostId is not null\nand   compareRepostId is not null\norder by unionSize asc,\n         cardinality(symDiff) asc,\n         jaccard desc\nlimit 1000",
  "queryTables" : [ "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents" ],
  "queryIndex" : 263,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 75802,
  "totalScheduledMillis" : 19685596,
  "cpuMillis" : 3450093,
  "queuedMillis" : 0,
  "executeMillis" : 2243,
  "getResultMillis" : 0,
  "iterateMillis" : 73586,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 363610210481,
  "query" : "WITH\n\tdeleted_accounts AS (\n        SELECT \n            accountid\n            , deleted\n        FROM imhotep.passdailysnapshot\n        WHERE \n            day = date_format(date_add('day', -1, CURRENT_DATE), '%Y-%m-%d')\n            -- deleted accounts\n            AND deleted = 1\n    ), profiles AS (\n        SELECT \n            acctid AS accountid\n            , resumes\n            , fileinformation\n        FROM jssdi.profile_snapshot \n        WHERE \n            day = date_format(date_add('day', -1, CURRENT_DATE), '%Y-%m-%d')\n            AND cardinality(\n            \tFILTER(\n                \tfileinformation\n                    , f -> f.type = 'RESUME'\n                )\n            ) > 1\n            -- none resume or single resume in PARSED or IR type\n            AND (\n            \tresumes is null\n                OR ( CARDINALITY(resumes) = 1 and resumes[1].resumetype in ('PARSED', 'INDEED_RESUME')\n                )\n\t)\n   )\n    \n    SELECT\n    p.accountid\n    , '<batch_name>_xxx'\n    --, a.deleted\n    --, CARDINALITY(resumes) as rez_count\n    --, if (resumes = null, null, resumes[1].resumetype) as rez_type\n--    , cardinality(\n--            \tFILTER(\n--                \tfileinformation\n--                    , f -> f.type = 'RESUME'\n--                )\n--            ) as rez_file_count\n    from profiles p\n    join deleted_accounts a\n    on p.accountid = a.accountid\n    --limit 100",
  "queryTables" : [ "skipperhive.imhotep.passdailysnapshot", "skipperhive.jssdi.profile_snapshot" ],
  "queryIndex" : 264,
  "runStartToQueryComplete" : 1609
}, {
  "elapsedMillis" : 41376,
  "totalScheduledMillis" : 6770473,
  "cpuMillis" : 1539770,
  "queuedMillis" : 0,
  "executeMillis" : 823,
  "getResultMillis" : 0,
  "iterateMillis" : 40576,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 12322390442,
  "query" : "-- lets find all pairs of jobs where A is marked a repost of B, and ALSO B is marked a repost of A\n-- these are length 2 cycles (as opposed to deeper trees)\n\nwith\nmappings as\n(   select concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n           jobCopyJobId,\n           jobCopyCreateDate,\n           originalJobId,\n           originalJobCreateDate\n    from datalake.imhotep.duplicationDetectionRadContents -- datalake.imhotep.duplicationDetectionRadContents\n    where imhotep_unixtime('1d') <= unixtime and unixtime < imhotep_unixtime('1d') + 24*60*60\n    and modelId in ('Legacy RepostDetector', 'legacyRepostModel-2.2')\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n),\ncycles_l2 as\n(   select fwd.model,\n           fwd.originalJobId as jobIdA,\n           fwd.jobCopyJobId as jobIdB,\n           abs(fwd.jobCopyCreateDate - fwd.originalJobCreateDate) as createSpan,\n           abs(fwd.jobCopyJobId - fwd.originalJobId) jobIdSpan\n    from mappings fwd,\n         mappings rev\n    where fwd.model = rev.model\n    and   fwd.originalJobId = rev.jobCopyJobId\n    and   fwd.jobCopyJobId = rev.originalJobId\n)\nselect model,\n       count(*) l2_cycles\nfrom cycles_l2 -- 92,796\ngroup by 1",
  "queryTables" : [ "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents" ],
  "queryIndex" : 265,
  "runStartToQueryComplete" : 1578
}, {
  "elapsedMillis" : 66511,
  "totalScheduledMillis" : 19160525,
  "cpuMillis" : 3429817,
  "queuedMillis" : 0,
  "executeMillis" : 1159,
  "getResultMillis" : 0,
  "iterateMillis" : 65377,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 363574507803,
  "query" : "WITH\n\tdeleted_accounts AS (\n        SELECT \n            accountid\n            , deleted\n        FROM imhotep.passdailysnapshot\n        WHERE \n            day = date_format(date_add('day', -1, CURRENT_DATE), '%Y-%m-%d')\n            -- deleted accounts\n            AND deleted = 1\n    ), profiles AS (\n        SELECT \n            acctid AS accountid\n            , resumes\n            , fileinformation\n        FROM jssdi.profile_snapshot \n        WHERE \n            day = date_format(date_add('day', -1, CURRENT_DATE), '%Y-%m-%d')\n            AND cardinality(\n            \tFILTER(\n                \tfileinformation\n                    , f -> f.type = 'RESUME'\n                )\n            ) > 1\n            -- none resume or single resume in PARSED or IR type\n            AND (\n            \tresumes is null\n                OR ( CARDINALITY(resumes) = 1 and resumes[1].resumetype in ('PARSED', 'INDEED_RESUME')\n                )\n\t)\n   )\n    \n    SELECT\n    count(distinct p.accountid)\n    from profiles p\n    join deleted_accounts a\n    on p.accountid = a.accountid\n    --limit 100",
  "queryTables" : [ "skipperhive.imhotep.passdailysnapshot", "skipperhive.jssdi.profile_snapshot" ],
  "queryIndex" : 266,
  "runStartToQueryComplete" : 1610
}, {
  "elapsedMillis" : 72139,
  "totalScheduledMillis" : 16977675,
  "cpuMillis" : 2111254,
  "queuedMillis" : 0,
  "executeMillis" : 5650,
  "getResultMillis" : 0,
  "iterateMillis" : 66541,
  "rows" : 500,
  "error" : null,
  "scannedBytes" : 12986919189,
  "query" : "with app_status as(SELECT ats,apply_id, disposition_status, max(unixtime) as unixtime\nFROM signal_back_disposition a\nWHERE \n  -- remove apply_id that existed 1y nefore april\n  NOT EXISTS (\n      SELECT apply_id\n      FROM signal_back_disposition b\n      WHERE unixtime between imhotep_unixtime('2023-04-01') and imhotep_unixtime('2024-07-01')\n        AND a.apply_id=b.apply_id\n  )\n  -- apply_id first appears in april\n  AND EXISTS (\n      SELECT apply_id\n      FROM signal_back_disposition c\n      WHERE unixtime between imhotep_unixtime('2024-07-01') and imhotep_unixtime('2024-08-01')\n        AND a.apply_id=c.apply_id\n  )\n  AND unixtime between imhotep_unixtime('2024-04-01') and imhotep_unixtime('today')\n  \n  GROUP BY 1,2,3\n)\n,max_times as (\nSELECT ats\n, apply_id\n, disposition_status\n, unixtime\n, ROW_NUMBER() OVER(PARTITION BY apply_id ORDER BY unixtime ASC) as status_number\n, COUNT(*) OVER(PARTITION BY apply_id) as total_signals_for_apply\nFROM app_status)\n\nSELECT apply_id, total_signals_for_apply, status_number, FROM_UNIXTIME(unixtime) as disposition_date, disposition_status\nFROM max_times\nWHERE ats='ukg-prodd'\nORDER BY 1,3\n\nlimit 500",
  "queryTables" : [ "skipperhive.imhotep.signal_back_disposition", "skipperhive.imhotep.signal_back_disposition", "skipperhive.imhotep.signal_back_disposition" ],
  "queryIndex" : 267,
  "runStartToQueryComplete" : 1622
}, {
  "elapsedMillis" : 74541,
  "totalScheduledMillis" : 17986820,
  "cpuMillis" : 4655580,
  "queuedMillis" : 0,
  "executeMillis" : 2192,
  "getResultMillis" : 0,
  "iterateMillis" : 72376,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 21191776055,
  "query" : "-- create dates assigned in the artifact never change\n\nwith\ntoday as\n(   select concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n           concat(radArtifactName, '-', modelId) as artifactModel,\n           jobCopyJobId,\n           jobCopyCreateDate,\n           originalJobId,\n           originalJobCreateDate\n    from datalake.imhotep.duplicationDetectionRadContents\n    where imhotep_unixtime('1d') <= unixtime and unixtime < imhotep_unixtime('1d') + 24*60*60\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n),\nyesterday as\n(   select concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n           concat(radArtifactName, '-', modelId) as artifactModel,\n           jobCopyJobId,\n           jobCopyCreateDate,\n           originalJobId,\n           originalJobCreateDate\n    from datalake.imhotep.duplicationDetectionRadContents\n    where imhotep_unixtime('1d') - 24*60*60 <= unixtime and unixtime < imhotep_unixtime('1d')\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n)\nselect y.model as yesterday,\n       t.model as today,\n       y.jobCopyJobId,\n       y.jobCopyCreateDate as yesterdayCopyCreate,\n       t.jobCopyCreateDate as todayCopyCreate,\n       y.originalJobId,\n       y.originalJobCreateDate as yesterdayOriginalCreate,\n       t.originalJobCreateDate as todayOriginalCreate\nfrom yesterday y\njoin today t on (    t.artifactModel = y.artifactModel\n                 and t.jobCopyJobId = y.jobCopyJobId\n                 and t.originalJobId = y.originalJobId\n                 and (   t.jobCopyCreateDate != y.jobCopyCreateDate\n                      or t.originalJobCreateDate != y.originalJobCreateDate\n                     )\n                )",
  "queryTables" : [ "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents" ],
  "queryIndex" : 268,
  "runStartToQueryComplete" : 1626
}, {
  "elapsedMillis" : 146018,
  "totalScheduledMillis" : 13729254,
  "cpuMillis" : 3086620,
  "queuedMillis" : 3,
  "executeMillis" : 989,
  "getResultMillis" : 0,
  "iterateMillis" : 145071,
  "rows" : 246,
  "error" : null,
  "scannedBytes" : 16548678242,
  "query" : "-- Primary metric:  jaccard similarity of MVP and legacy mappings (mappings of copy --> original)\n\nwith\ndistinct_non_truth_models as\n(   select concat(radArtifactName, '-', modelId, '-', runStartTime) as compare_model, -- distinct models we want to compare against truth\n           count(*)\n    from datalake.imhotep.duplicationDetectionRadContents\n    where imhotep_unixtime('1d') <= unixtime and unixtime < imhotep_unixtime('1d') + 24*60*60\n    and   modelId='legacyRepostModel-2.2'\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n    group by 1 ),\ntruth_mappings as\n(   select concat(ddrc.radArtifactName, '-', ddrc.modelId, '-', runStartTime) as truth_model,\n           dnlm.compare_model,\n           date_trunc('day', from_unixtime(ddrc.jobCopyCreateDate/1000)) as day,\n           ddrc.jobCopyJobId,\n           ddrc.originalJobId\n    from datalake.imhotep.duplicationDetectionRadContents ddrc,\n         distinct_non_truth_models dnlm -- cross join to make a separate copy of each legacy record dedicated to comparing with a model\n    where imhotep_unixtime('1d') <= ddrc.unixtime and ddrc.unixtime < imhotep_unixtime('1d') + 24*60*60\n    and   ddrc.modelId='Legacy RepostDetector'\n    and   imhotep_unixtime('1000d') <= ddrc.jobCopyCreateDate/1000 and ddrc.jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n),\nmodel_mappings as\n(   select concat(radArtifactName, '-', modelId, '-', runStartTime) as model,\n           date_trunc('day', from_unixtime(jobCopyCreateDate/1000)) as day,\n           jobCopyJobId,\n           originalJobId\n    from datalake.imhotep.duplicationDetectionRadContents\n    where imhotep_unixtime('1d') <= unixtime and unixtime < imhotep_unixtime('1d') + 24*60*60\n    and   modelId='legacyRepostModel-2.2'\n    and   imhotep_unixtime('1000d') <= jobCopyCreateDate/1000 and jobCopyCreateDate/1000 < imhotep_unixtime('0d')\n),\nmatches as\n(   select coalesce(lm.day, mm.day) as day,\n           -- could use any field, just detecting null from outer join, using jobCopyJobId\n           lm.jobCopyJobId is not null as truth_match,\n           mm.jobCopyJobId is not null as model_match\n    from truth_mappings lm\n    full outer join model_mappings mm\n        on (    lm.compare_model = mm.model\n            and lm.day = mm.day\n            and lm.jobCopyJobId = mm.jobCopyJobId\n            and lm.originalJobId = mm.originalJobId ) ),\nvenn as\n(   select day,\n           truth_match,\n           model_match,\n           count(*) as count\n    from matches\n    group by 1,2,3 ),\nintersection_count as\n(   select day,\n           count\n    from venn\n    where truth_match\n    and   model_match\n),\nunion_count as\n(   select day,\n           sum(count) as count\n    from venn -- ignoring truth_match and model_match fields\n    group by 1 )\nselect ic.day,\n       ic.count as intersection_count,\n       uc.count as union_count,\n       cast(ic.count as double) / cast(uc.count as double) as jaccard\nfrom intersection_count ic,\n     union_count uc\nwhere ic.day = uc.day\n",
  "queryTables" : [ "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents", "datalakehive.imhotep.duplicationdetectionradcontents" ],
  "queryIndex" : 269,
  "runStartToQueryComplete" : 1701
}, {
  "elapsedMillis" : 60651,
  "totalScheduledMillis" : 18020546,
  "cpuMillis" : 3364384,
  "queuedMillis" : 0,
  "executeMillis" : 641,
  "getResultMillis" : 0,
  "iterateMillis" : 60033,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 359890701811,
  "query" : "WITH profiles AS (\n        SELECT \n            acctid AS accountid\n            , resumes\n            , fileinformation\n        FROM jssdi.profile_snapshot \n        WHERE \n            day = date_format(date_add('day', -1, CURRENT_DATE), '%Y-%m-%d')\n            AND cardinality(\n            \tFILTER(\n                \tfileinformation\n                    , f -> f.type = 'RESUME'\n                )\n            ) > 1\n            -- none resume or single resume in PARSED or IR type\n            AND (\n            \tresumes is null\n                OR ( CARDINALITY(resumes) = 1 and resumes[1].resumetype in ('PARSED', 'INDEED_RESUME')\n                )\n\t)\n   )\n    \n    SELECT\n    count(distinct p.accountid)\n    from profiles p\n    --limit 100",
  "queryTables" : [ "skipperhive.jssdi.profile_snapshot" ],
  "queryIndex" : 270,
  "runStartToQueryComplete" : 1615
}, {
  "elapsedMillis" : 336,
  "totalScheduledMillis" : 62,
  "cpuMillis" : 51,
  "queuedMillis" : 0,
  "executeMillis" : 340,
  "getResultMillis" : 0,
  "iterateMillis" : 6,
  "rows" : 304,
  "error" : null,
  "scannedBytes" : 452550,
  "query" : "select partition, record_count, file_count, ceil(cast(total_size as double) / 1024 / 1024 / 500) as file_estimate, cast(cast(total_size as double) / 1024 / 1024 as decimal(10,3)) as total_size_MB\nfrom datalake.tiller.\"oplin_events_start$partitions\"",
  "queryTables" : [ "datalake.tiller.oplin_events_start$partitions" ],
  "queryIndex" : 271,
  "runStartToQueryComplete" : 1556
}, {
  "elapsedMillis" : 9053,
  "totalScheduledMillis" : 548306,
  "cpuMillis" : 68905,
  "queuedMillis" : 0,
  "executeMillis" : 2633,
  "getResultMillis" : 0,
  "iterateMillis" : 6453,
  "rows" : 478,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_3 != 'Unspecified'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    t3,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '')\nORDER BY date, t0, t1, t2, t3 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 272,
  "runStartToQueryComplete" : 1574
}, {
  "elapsedMillis" : 17922,
  "totalScheduledMillis" : 4261312,
  "cpuMillis" : 1058874,
  "queuedMillis" : 0,
  "executeMillis" : 2506,
  "getResultMillis" : 0,
  "iterateMillis" : 15458,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '')\nORDER BY date, teamId, project, t0, t1 ASC ",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 273,
  "runStartToQueryComplete" : 1583
}, {
  "elapsedMillis" : 8866,
  "totalScheduledMillis" : 552457,
  "cpuMillis" : 65267,
  "queuedMillis" : 1,
  "executeMillis" : 2437,
  "getResultMillis" : 0,
  "iterateMillis" : 6457,
  "rows" : 240,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing')\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '')\nORDER BY date, t0, t1, t2 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 274,
  "runStartToQueryComplete" : 1577
}, {
  "elapsedMillis" : 60905,
  "totalScheduledMillis" : 14175137,
  "cpuMillis" : 1574812,
  "queuedMillis" : 0,
  "executeMillis" : 1759,
  "getResultMillis" : 0,
  "iterateMillis" : 59195,
  "rows" : 500,
  "error" : null,
  "scannedBytes" : 11081605268,
  "query" : "with app_status as(SELECT ats,apply_id, disposition_status, max(unixtime) as unixtime\nFROM signal_back_disposition a\nWHERE \n  -- remove apply_id that existed 1y nefore april\n  NOT EXISTS (\n      SELECT apply_id\n      FROM signal_back_disposition b\n      WHERE unixtime between imhotep_unixtime('2023-04-01') and imhotep_unixtime('2024-07-01')\n        AND a.apply_id=b.apply_id\n  )\n  -- apply_id first appears in july\n  AND EXISTS (\n      SELECT apply_id\n      FROM signal_back_disposition c\n      WHERE unixtime between imhotep_unixtime('2024-07-01') and imhotep_unixtime('2024-08-01')\n        AND a.apply_id=c.apply_id\n  )\n  AND unixtime between imhotep_unixtime('2024-07-01') and imhotep_unixtime('today')\n  \n  GROUP BY 1,2,3\n)\n,max_times as (\nSELECT ats\n, apply_id\n, disposition_status\n, unixtime\n, ROW_NUMBER() OVER(PARTITION BY apply_id ORDER BY unixtime ASC) as status_number\n, COUNT(*) OVER(PARTITION BY apply_id) as total_signals_for_apply\nFROM app_status)\n\nSELECT apply_id, total_signals_for_apply, status_number, FROM_UNIXTIME(unixtime) as disposition_date, disposition_status\nFROM max_times\nWHERE ats='ukg-prodd'\nORDER BY 1,3\n\nlimit 500",
  "queryTables" : [ "skipperhive.imhotep.signal_back_disposition", "skipperhive.imhotep.signal_back_disposition", "skipperhive.imhotep.signal_back_disposition" ],
  "queryIndex" : 275,
  "runStartToQueryComplete" : 1629
}, {
  "elapsedMillis" : 16472,
  "totalScheduledMillis" : 3926332,
  "cpuMillis" : 1028920,
  "queuedMillis" : 0,
  "executeMillis" : 2473,
  "getResultMillis" : 0,
  "iterateMillis" : 14047,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        tw.tier_4 != 'Unspecified' AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0  \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '')\nORDER BY date, teamId, project, t0, t1, t2, t3, t4 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 276,
  "runStartToQueryComplete" : 1587
}, {
  "elapsedMillis" : 9135,
  "totalScheduledMillis" : 513772,
  "cpuMillis" : 65920,
  "queuedMillis" : 0,
  "executeMillis" : 2714,
  "getResultMillis" : 0,
  "iterateMillis" : 6644,
  "rows" : 2134,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 as t4,\n        tw.tier_5 AS t5,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_5 != 'Unspecified'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '')\nORDER BY date, t0, t1, t2, t3, t4, t5 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 277,
  "runStartToQueryComplete" : 1583
}, {
  "elapsedMillis" : 8152,
  "totalScheduledMillis" : 520160,
  "cpuMillis" : 62779,
  "queuedMillis" : 0,
  "executeMillis" : 2467,
  "getResultMillis" : 0,
  "iterateMillis" : 5715,
  "rows" : 90,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        Lower(tw.tier_1) NOT IN ('global revenue', 'marketing')\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n\t(''='' OR t1 = '')\nORDER BY date, t0, t1 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 278,
  "runStartToQueryComplete" : 1586
}, {
  "elapsedMillis" : 15072,
  "totalScheduledMillis" : 3576852,
  "cpuMillis" : 1102185,
  "queuedMillis" : 0,
  "executeMillis" : 2547,
  "getResultMillis" : 0,
  "iterateMillis" : 12550,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_6 != 'Unspecified' AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5, tw.tier_6\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '')\nORDER BY date, teamId, project, t0, t1, t2, t3, t4, t5, t6 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 279,
  "runStartToQueryComplete" : 1599
}, {
  "elapsedMillis" : 600,
  "totalScheduledMillis" : 235,
  "cpuMillis" : 73,
  "queuedMillis" : 0,
  "executeMillis" : 354,
  "getResultMillis" : 0,
  "iterateMillis" : 257,
  "rows" : 304,
  "error" : null,
  "scannedBytes" : 373126,
  "query" : "select * from datalake.tiller.\"oplin_events_error$partitions\"",
  "queryTables" : [ "datalake.tiller.oplin_events_error$partitions" ],
  "queryIndex" : 280,
  "runStartToQueryComplete" : 1586
}, {
  "elapsedMillis" : 16520,
  "totalScheduledMillis" : 3500045,
  "cpuMillis" : 1081927,
  "queuedMillis" : 0,
  "executeMillis" : 2390,
  "getResultMillis" : 0,
  "iterateMillis" : 14154,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '')\nORDER BY date, teamId, project, t0, t1, t2 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 281,
  "runStartToQueryComplete" : 1605
}, {
  "elapsedMillis" : 815,
  "totalScheduledMillis" : 183,
  "cpuMillis" : 7,
  "queuedMillis" : 0,
  "executeMillis" : 447,
  "getResultMillis" : 0,
  "iterateMillis" : 385,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 0,
  "query" : "SELECT *\nFROM datalake.sales_data_strategy_dsa.pipeline_skytree where adc_sales_rep_id = 19244 and quarter_dk = 20241001",
  "queryTables" : [ "datalakehive.sales_data_strategy_dsa.pipeline_skytree" ],
  "queryIndex" : 282,
  "runStartToQueryComplete" : 1591
}, {
  "elapsedMillis" : 357,
  "totalScheduledMillis" : 54,
  "cpuMillis" : 44,
  "queuedMillis" : 0,
  "executeMillis" : 308,
  "getResultMillis" : 0,
  "iterateMillis" : 62,
  "rows" : 304,
  "error" : null,
  "scannedBytes" : 373126,
  "query" : "select partition, record_count, file_count, ceil(cast(total_size as double) / 1024 / 1024 / 500) as file_estimate, cast(cast(total_size as double) / 1024 / 1024 as decimal(10,3)) as total_size_MB\nfrom datalake.tiller.\"oplin_events_error$partitions\"",
  "queryTables" : [ "datalake.tiller.oplin_events_error$partitions" ],
  "queryIndex" : 283,
  "runStartToQueryComplete" : 1592
}, {
  "elapsedMillis" : 14998,
  "totalScheduledMillis" : 3323183,
  "cpuMillis" : 1072192,
  "queuedMillis" : 0,
  "executeMillis" : 2467,
  "getResultMillis" : 0,
  "iterateMillis" : 12560,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    t3,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0\n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '')\nORDER BY date, teamId, project, t0, t1, t2, t3 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 284,
  "runStartToQueryComplete" : 1607
}, {
  "elapsedMillis" : 7225,
  "totalScheduledMillis" : 368960,
  "cpuMillis" : 64949,
  "queuedMillis" : 1,
  "executeMillis" : 2474,
  "getResultMillis" : 0,
  "iterateMillis" : 4781,
  "rows" : 1237,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 as t4,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_4 != 'Unspecified'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '')\nORDER BY date, t0, t1, t2, t3, t4 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 285,
  "runStartToQueryComplete" : 1602
}, {
  "elapsedMillis" : 1026,
  "totalScheduledMillis" : 78,
  "cpuMillis" : 2,
  "queuedMillis" : 3,
  "executeMillis" : 408,
  "getResultMillis" : 0,
  "iterateMillis" : 626,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 0,
  "query" : "SELECT *\nFROM datalake.sales_data_strategy_dsa.pipeline_skytree where adc_sales_rep_id = 18922 and quarter_dk = 20241001",
  "queryTables" : [ "datalakehive.sales_data_strategy_dsa.pipeline_skytree" ],
  "queryIndex" : 286,
  "runStartToQueryComplete" : 1597
}, {
  "elapsedMillis" : 6902,
  "totalScheduledMillis" : 304130,
  "cpuMillis" : 55494,
  "queuedMillis" : 0,
  "executeMillis" : 2611,
  "getResultMillis" : 0,
  "iterateMillis" : 4323,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 as t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        tw.tier_7 AS t7,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_7 != 'Unspecified'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5, tw.tier_6, tw.tier_7\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    t7,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '') AND\n    ('Permissions'='' OR t7 = 'Permissions') \nORDER BY date, t0, t1, t2, t3, t4, t5, t6, t7 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 287,
  "runStartToQueryComplete" : 1608
}, {
  "elapsedMillis" : 13216,
  "totalScheduledMillis" : 3189914,
  "cpuMillis" : 1110625,
  "queuedMillis" : 0,
  "executeMillis" : 2454,
  "getResultMillis" : 0,
  "iterateMillis" : 10786,
  "rows" : 2503,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        tw.tier_5 AS t5,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        tw.tier_5 != 'Unspecified' AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '')\nORDER BY date, teamId, project, t0, t1, t2, t3, t4, t5 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 288,
  "runStartToQueryComplete" : 1615
}, {
  "elapsedMillis" : 7075,
  "totalScheduledMillis" : 120861,
  "cpuMillis" : 17297,
  "queuedMillis" : 0,
  "executeMillis" : 3350,
  "getResultMillis" : 0,
  "iterateMillis" : 3768,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 276112327,
  "query" : "WITH populated_day AS (\n    SELECT MIN(day) AS most_recent_day\n    FROM (\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"jiracloudissues$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n\n        UNION ALL\n\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"ownershipSnapshot$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n\n        UNION ALL\n\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"teamwrksSnapshot$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n    )\n)\n\n-- Count of a11y violations remediated within SLO in the last 30 days / (All a11y violations remediated within last 30 days + Open issues outside SLO)\nSELECT\n    teamId,\n\tproject,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Closed_Within_SLO,\n    ALL_REM_30 AS All_Remediated_Last_30,\n    UNREM AS Open_Outside_SLO,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    t7\nFROM (\n\tSELECT\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        tw.tier_7 AS t7,\n        \n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- last 30 days\n                  ((ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 1000) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  ((TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 1000) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- last 30 days\n                  (ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT) / 1000) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n                -- last 30 days\n                (ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.day = (SELECT most_recent_day from populated_day) AND\n        ow.day = (SELECT most_recent_day from populated_day) AND\n        tw.day = (SELECT most_recent_day from populated_day) AND\n        ji.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        ow.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        tw.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        tw.tier_1 NOT IN ('Global Revenue', 'Marketing')\n    GROUP BY ow.accountablePartyId, ji.projectkey, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5, tw.tier_6, tw.tier_7\n        HAVING COUNT(\n        CASE WHEN\n            ji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            -- last 30 days\n            (ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 86400 <= 30\n            THEN 1 END\n    ) IS NOT NULL AND (\n        COUNT(\n            CASE WHEN\n                ji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n                -- last 30 days\n                (ji.unixtime - TRY_CAST(ji.resolutiontimestamp AS BIGINT)) / 86400 <= 30\n                THEN 1 END\n        ) + COUNT(\n            CASE WHEN\n                (\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n                ) AND (\n                    (\n                        ji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                        (ji.unixtime - TRY_CAST(ji.createtimestamp AS BIGINT) / 1000) / 86400 > 30\n                    ) OR (\n                        -- SLO days to complete\n                        ji.priority NOT IN ('Blocker') AND\n                        (ji.unixtime - TRY_CAST(ji.createtimestamp AS BIGINT) / 1000) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) > 0\n    )\n)\nWHERE\n\t(''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '') AND\n    ('Permissions'='' OR t7 = 'Permissions')\nORDER BY teamId, project, t1, t2, t3, t4, t5, t6, t7 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.jiracloudissues$partitions", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.ownershipsnapshot$partitions", "datalakehive.imhotep.teamwrkssnapshot", "datalakehive.imhotep.teamwrkssnapshot$partitions" ],
  "queryIndex" : 289,
  "runStartToQueryComplete" : 1612
}, {
  "elapsedMillis" : 8296,
  "totalScheduledMillis" : 340161,
  "cpuMillis" : 64820,
  "queuedMillis" : 0,
  "executeMillis" : 3489,
  "getResultMillis" : 0,
  "iterateMillis" : 4837,
  "rows" : 2806,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 as t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_6 != 'Unspecified'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5, tw.tier_6\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '')\nORDER BY date, t0, t1, t2, t3, t4, t5, t6 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 290,
  "runStartToQueryComplete" : 1613
}, {
  "elapsedMillis" : 7115,
  "totalScheduledMillis" : 130102,
  "cpuMillis" : 18658,
  "queuedMillis" : 1,
  "executeMillis" : 3229,
  "getResultMillis" : 0,
  "iterateMillis" : 3922,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 634752442,
  "query" : "WITH\n\npopulated_day AS (\n    SELECT MIN(day) AS most_recent_day\n    FROM (\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"jiracloudissues$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n\n        UNION ALL\n\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"ownershipSnapshot$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n\n        UNION ALL\n\n        SELECT MAX(day) AS day\n        FROM datalake.imhotep.\"teamwrksSnapshot$partitions\"\n        WHERE day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR)\n    )\n)\n\n-- Count of a11y violations remediated within SLO in the last 30 days / (All a11y violations remediated within last 30 days + Open issues)\nSELECT\n    inslo,\n    duedate,\n    teamId,\n\t-- project,\n    issuekey,\n    -- issuetype,\n    priority,\n    status,\n    summary,\n    lastupdated,\n    createdate,\n    labels,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    t7\nFROM (\n\tSELECT\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        ji.issuekey AS issuekey,\n        ji.issuetype AS issuetype,\n        ji.priority AS priority,\n        ji.summary AS summary,\n        ji.status AS status,\n        DATE_FORMAT(FROM_UNIXTIME(CAST(ji.lastupdated AS BIGINT) / 1000), '%Y-%m-%d') AS lastupdated,\n        DATE_FORMAT(DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d'), '%Y-%m-%d') AS createdate,\n        DATE_FORMAT(DATE_ADD('day',\n        \tCASE \n            \tWHEN ji.priority = 'Blocker' THEN 30 \n                ELSE 90 \n            END, DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')), '%Y-%m-%d') AS duedate,\n        CAST(duedate >= DATE_FORMAT(CURRENT_DATE, '%Y-%m-%d') AS BOOLEAN) AS inslo,\n        ji.labels AS labels,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        tw.tier_7 AS t7\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.day = (SELECT most_recent_day from populated_day) AND\n        ow.day = (SELECT most_recent_day from populated_day) AND\n        tw.day = (SELECT most_recent_day from populated_day) AND\n        ji.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        ow.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        tw.day >= CAST(DATE_FORMAT(CURRENT_DATE - INTERVAL '7' DAY, '%Y-%m-%d') AS VARCHAR) AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            -- The line below will include \"Pending Closure\" tickets in the resulting table\n            -- OR ji.resolutiontimestamp = 0\n        )\n    GROUP BY\n    \tow.accountablePartyId,\n    \tji.projectkey,\n        ji.issuekey,\n\t\tji.issuetype,\n        ji.priority,\n        ji.summary,\n        ji.status,\n        DATE_FORMAT(FROM_UNIXTIME(CAST(ji.lastupdated AS BIGINT) / 1000), '%Y-%m-%d'),\n        DATE_FORMAT(DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d'), '%Y-%m-%d'),\n        DATE_FORMAT(DATE_ADD('day',\n        \tCASE \n            \tWHEN ji.priority = 'Blocker' THEN 30\n                ELSE 90 \n           \tEND, DATE_PARSE(CAST(ji.createdate AS VARCHAR), '%Y%m%d')), '%Y-%m-%d'),\n        CAST(duedate >= DATE_FORMAT(CURRENT_DATE, '%Y-%m-%d') AS BOOLEAN),\n        ji.labels,\n        tw.tier_0,\n        tw.tier_1,\n        tw.tier_2,\n        tw.tier_3,\n        tw.tier_4,\n        tw.tier_5,\n        tw.tier_6,\n        tw.tier_7\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '') AND\n    ('Permissions'='' OR t7 = 'Permissions')\nORDER BY \n\tinslo ASC,\n\tduedate ASC ",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.jiracloudissues$partitions", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.ownershipsnapshot$partitions", "datalakehive.imhotep.teamwrkssnapshot", "datalakehive.imhotep.teamwrkssnapshot$partitions" ],
  "queryIndex" : 291,
  "runStartToQueryComplete" : 1615
}, {
  "elapsedMillis" : 7067,
  "totalScheduledMillis" : 442778,
  "cpuMillis" : 82942,
  "queuedMillis" : 0,
  "executeMillis" : 2478,
  "getResultMillis" : 0,
  "iterateMillis" : 4618,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 1306109226,
  "query" : "SELECT\n\tdate,\n    teamId,\n\tproject,\n    t0,\n    t1,\n    t2,\n    t3,\n    t4,\n    t5,\n    t6,\n    t7,\n    open_outside_slo\nFROM (\n\tSELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n    \tji.projectkey AS project,\n    \tow.accountablePartyId AS teamId,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        tw.tier_4 AS t4,\n        tw.tier_5 AS t5,\n        tw.tier_6 AS t6,\n        tw.tier_7 AS t7,\n        COUNT(DISTINCT(ji.issuekey)) AS open_outside_slo\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n        tw.tier_7 != 'Unspecified' AND\n        (\n        \tji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') \n            OR TRY_CAST(ji.resolutiontimestamp AS BIGINT) = 0 \n            AND (\n                (\n                    ji.priority = 'Blocker' AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 30\n                ) OR (\n                    ji.priority NOT IN ('Blocker') AND\n                \t(TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 > 90\n                )\n            )\n        )\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), ow.accountablePartyId, ji.projectkey, tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3, tw.tier_4, tw.tier_5, tw.tier_6, tw.tier_7\n)\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    (''='' OR t3 = '') AND\n    (''='' OR t4 = '') AND\n    (''='' OR t5 = '') AND\n    (''='' OR t6 = '') AND\n    ('Permissions'='' OR t7 = 'Permissions')\nORDER BY date, teamId, project, t0, t1, t2, t3, t4, t5, t6, t7 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 292,
  "runStartToQueryComplete" : 1616
}, {
  "elapsedMillis" : 533,
  "totalScheduledMillis" : 239,
  "cpuMillis" : 67,
  "queuedMillis" : 0,
  "executeMillis" : 295,
  "getResultMillis" : 0,
  "iterateMillis" : 247,
  "rows" : 304,
  "error" : null,
  "scannedBytes" : 516355,
  "query" : "select partition, record_count, file_count, ceil(cast(total_size as double) / 1024 / 1024 / 500) as file_estimate, cast(cast(total_size as double) / 1024 / 1024 as decimal(10,3)) as total_size_MB\nfrom datalake.tiller.\"oplin_events_end$partitions\"",
  "queryTables" : [ "datalake.tiller.oplin_events_end$partitions" ],
  "queryIndex" : 293,
  "runStartToQueryComplete" : 1611
}, {
  "elapsedMillis" : 401842,
  "totalScheduledMillis" : 408775811,
  "cpuMillis" : 79061668,
  "queuedMillis" : 0,
  "executeMillis" : 73067,
  "getResultMillis" : 0,
  "iterateMillis" : 328807,
  "rows" : 2,
  "error" : null,
  "scannedBytes" : 1010486039525,
  "query" : "WITH experiment_data AS (\n\tSELECT \n    \tCASE WHEN ARRAYS_OVERLAP(ndxgrp, \n            ARRAY['#b15:idxmatchingcontrolplane_e275','#B15:idxmatchingcontrolplane_e275']) \n            THEN 'test' ELSE 'control' END AS _group, \n        q, jobid\n    FROM mobileorganic -- TABLESAMPLE BERNOULLI (10) -- sampling rate\n    WHERE \n    \tunixtime >= imhotep_unixtime('2024-10-15') AND unixtime < imhotep_unixtime('2024-11-12') -- test start date & end date\n        AND country = 'ca'\n        AND ARRAYS_OVERLAP(ndxgrp, \n        \tARRAY['#b15:idxmatchingcontrolplane_e274','#B15:idxmatchingcontrolplane_e274',\n            \t  '#b15:idxmatchingcontrolplane_e275','#B15:idxmatchingcontrolplane_e275'])\n        AND EXISTS(SELECT * FROM synset WHERE CONTAINS(synset.cp_configs, 'SQMATCHING-6593-destination') AND synset.status='IN_PRODUCTION' AND synset.unixtime >= imhotep_unixtime('3d') AND synset.unixtime < imhotep_unixtime('2d') AND CONTAINS(synset.query_variants, mobileorganic.q))\n)\n\nSELECT \n\t_group, \n    COUNT_IF(answer='No') as bad_matches, \n    COUNT() AS all_labels, \n    COUNT_IF(answer='No') / CAST(COUNT() AS DOUBLE) AS BMR\nFROM jobtoqueryrelevance\nINNER JOIN experiment_data ON\n\tjobtoqueryrelevance.query = experiment_data.q\n    AND jobtoqueryrelevance.jobid = experiment_data.jobid\nWHERE \n\tjobtoqueryrelevance.unixtime >= imhotep_unixtime('2024-01-01') AND jobtoqueryrelevance.unixtime < imhotep_unixtime('2024-11-12')\n\tAND jobtoqueryrelevance.country='CA'\nGROUP BY _group",
  "queryTables" : [ "skipperhive.imhotep.jobtoqueryrelevance", "skipperhive.imhotep.mobileorganic", "skipperhive.imhotep.synset" ],
  "queryIndex" : 294,
  "runStartToQueryComplete" : 2018
}, {
  "elapsedMillis" : 352,
  "totalScheduledMillis" : 54,
  "cpuMillis" : 44,
  "queuedMillis" : 0,
  "executeMillis" : 269,
  "getResultMillis" : 0,
  "iterateMillis" : 93,
  "rows" : 304,
  "error" : null,
  "scannedBytes" : 452550,
  "query" : "select partition, record_count, file_count, ceil(cast(total_size as double) / 1024 / 1024 / 500) as file_estimate, cast(cast(total_size as double) / 1024 / 1024 as decimal(10,3)) as total_size_MB\nfrom datalake.tiller.\"oplin_events_start$partitions\"",
  "queryTables" : [ "datalake.tiller.oplin_events_start$partitions" ],
  "queryIndex" : 295,
  "runStartToQueryComplete" : 1621
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 132707,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_174851_00319_vjepj): Cannot cast '6382338668' to INT",
  "scannedBytes" : 0,
  "query" : "--ca_en with QB exclusion seasonaljobsearch\nwith base as( \nselect accountid,upper(country) as country,lang as language \nfrom imhotep.jobsearch \nwhere unixtime between imhotep_unixtime('7d') and imhotep_unixtime('0d') \nand contains(grp, 'privileged') = false \nand contains(grp, 'spider') = false\nand contains(rcv, 'jsv') = true \nand contains(rcv, 'interaction') = true\nand contains(useragent, 'catchpoint') = false\nand accountid > 0 \nand country='ca'\nand contains(slcity,'quebec')=false\nand ipcountry='ca'\nand lang='fr'\nand regexp_like(qnorm, '.*(christmas|part|time|parttime|seasonalweekend|evening|hiring|immediately|flexible|night|shift|temporary|temps).*')\nunion\nselect accountid,upper(country) as country,lang as language \nfrom imhotep.mobsearch \nwhere unixtime between imhotep_unixtime('7d') and imhotep_unixtime('0d') \nand contains(grp, 'privileged') = false \nand contains(grp, 'spider') = false\nand contains(rcv, 'jsv') = true \nand contains(rcv, 'interaction')=true\nand contains(useragent, 'catchpoint')=false \nand accountid > 0 \nand country='ca'\nand contains(slcity,'quebec')=false\nand ipcountry='ca'\nand lang='fr'\nand regexp_like(qnorm, '.*(christmas|part|time|parttime|seasonalweekend|evening|hiring|immediately|flexible|night|shift|temporary|temps).*')), \nexclusions as (\nselect cast(accountId AS BIGINT) as account_id\nfrom imhotep.advertiserUsers\nwhere unixtime between imhotep_unixtime('7d') and imhotep_unixtime('0d')\nand cast(accountId AS INT) > 0\nunion\nSELECT cast(reportedAccountId AS BIGINT) AS account_id\nFROM imhotep.fraudulentResumeStatusActivity\nWHERE isfraud='1'\nAND unixtime between imhotep_unixtime('2019-12-09') and imhotep_unixtime('0d'))\nselect base.accountId,base.country,base.language\nfrom base\nleft join exclusions on base.accountid=exclusions.account_id\nwhere exclusions.account_id is null",
  "queryTables" : [ "skipperhive.imhotep.advertiserusers", "skipperhive.imhotep.fraudulentresumestatusactivity", "skipperhive.imhotep.jobsearch", "skipperhive.imhotep.mobsearch" ],
  "queryIndex" : 296,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 18627,
  "totalScheduledMillis" : 10763565,
  "cpuMillis" : 1559964,
  "queuedMillis" : 0,
  "executeMillis" : 1248,
  "getResultMillis" : 0,
  "iterateMillis" : 17428,
  "rows" : 500,
  "error" : null,
  "scannedBytes" : 11081605268,
  "query" : "with app_status as(SELECT ats,apply_id, disposition_status, max(unixtime) as unixtime\nFROM signal_back_disposition a\nWHERE \n  -- remove apply_id that existed 1y nefore april\n  NOT EXISTS (\n      SELECT apply_id\n      FROM signal_back_disposition b\n      WHERE unixtime between imhotep_unixtime('2023-04-01') and imhotep_unixtime('2024-07-01')\n        AND a.apply_id=b.apply_id\n  )\n  -- apply_id first appears in july\n  AND EXISTS (\n      SELECT apply_id\n      FROM signal_back_disposition c\n      WHERE unixtime between imhotep_unixtime('2024-07-01') and imhotep_unixtime('2024-08-01')\n        AND a.apply_id=c.apply_id\n  )\n  AND unixtime between imhotep_unixtime('2024-07-01') and imhotep_unixtime('today')\n  \n  GROUP BY 1,2,3\n)\n,max_times as (\nSELECT ats\n, apply_id\n, disposition_status\n, unixtime\n, ROW_NUMBER() OVER(PARTITION BY apply_id ORDER BY unixtime ASC) as status_number\n, COUNT(*) OVER(PARTITION BY apply_id) as total_signals_for_apply\nFROM app_status)\n\nSELECT apply_id, total_signals_for_apply, status_number, FROM_UNIXTIME(unixtime) as disposition_date, disposition_status\nFROM max_times\nWHERE ats='ukg-prodd'\nand total_signals_for_apply>1\nORDER BY 1,3\n\nlimit 500",
  "queryTables" : [ "skipperhive.imhotep.signal_back_disposition", "skipperhive.imhotep.signal_back_disposition", "skipperhive.imhotep.signal_back_disposition" ],
  "queryIndex" : 297,
  "runStartToQueryComplete" : 1641
}, {
  "elapsedMillis" : 415024,
  "totalScheduledMillis" : 552600936,
  "cpuMillis" : 56657561,
  "queuedMillis" : 0,
  "executeMillis" : 36531,
  "getResultMillis" : 0,
  "iterateMillis" : 378523,
  "rows" : 54,
  "error" : null,
  "scannedBytes" : 3589126411937,
  "query" : "SELECT \n--date_format(weekStart, '%Y-%m-%d %H:%i:%s') as weekStart\ndate_format(weekStart, '%Y-%m-%d') as weekStart\n, jobProduct\n, sum(totalJobs) as totalJobs\n, sum(totalDistinctEstimateJobs) as totalDistinctJobsEstimate\n, sum(jsDiscoverableJobs) as jsDiscoverableJobs\nFROM\n\n\t(\n    SELECT weekStart\n    , jobProduct\n    , sum(jobs) as totalJobs\n    , sum(case when feedRank = 1 then jobs else 0 end) as totalDistinctEstimateJobs\n    , 0 as jsDiscoverableJobs\n    FROM\n\n        (\n        SELECT weekStart \n        , jobProduct\n        , sourceid\n        , feedid\n        , jobs\n        , ROW_NUMBER() over (PARTITION BY weekStart, jobProduct, sourceid ORDER BY jobs DESC) as feedRank\n        FROM \n\n            (\n            SELECT DATE_TRUNC('WEEK', FROM_UNIXTIME(unixtime)) as weekStart\n            , (case when feedid = 50461 then 'Hosted' else 'Indexed' end) as jobProduct\n            , sourceId\n            , feedId\n            , count(distinct(jobid)) as jobs\n            FROM datalake.imhotep.searchablejobs\n            WHERE unixtime between imhotep_unixtime(CURRENT_DATE - INTERVAL '183' DAY) \n                AND imhotep_unixtime(CURRENT_DATE - INTERVAL '1' DAY)\n            AND jobcountry != 'JP'\n            --AND sourceid = 1191667\n            GROUP BY 1,2,3,4\n            ) s1\n        ) s2\n    GROUP BY 1,2\n\n    UNION ALL \n\n    SELECT DATE_TRUNC('WEEK', FROM_UNIXTIME(unixtime)) as weekStart\n    , (case when feedid = 50461 then 'Hosted' else 'Indexed' end) as jobProduct\n    , 0 as totalJobs\n    , 0 as totalDistinctEstimateJobs\n    , count(distinct(jobid)) as jsDiscoverableJobs\n    FROM datalake.imhotep.searchablejobs\n    WHERE unixtime between imhotep_unixtime(CURRENT_DATE - INTERVAL '183' DAY) \n        AND imhotep_unixtime(CURRENT_DATE - INTERVAL '1' DAY)\n    AND jobcountry != 'JP'\n    AND (waldovisibilitylevel in ('organic','jobalert')\n        OR (waldovisibilitylevel = 'sponsored' AND sponvisibility = 'spon_active'))\n    GROUP BY 1,2\n    ) s3\nGROUP BY 1,2\nORDER BY 1 ASC",
  "queryTables" : [ "datalakehive.imhotep.searchablejobs", "datalakehive.imhotep.searchablejobs" ],
  "queryIndex" : 298,
  "runStartToQueryComplete" : 2038
}, {
  "elapsedMillis" : 3672,
  "totalScheduledMillis" : 209297,
  "cpuMillis" : 24122,
  "queuedMillis" : 0,
  "executeMillis" : 693,
  "getResultMillis" : 0,
  "iterateMillis" : 3022,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 467787554,
  "query" : "SELECT\t\n\tSUM(contact_count) AS contacts_sent\nFROM \n\tdatalake.employer_analytics_platform.xpa_sourcing_engagement_daily\nWHERE \n\trecruitment_advertiser_id = 8981804\n\tAND activity_date >= DATE('2023-10-01')\n    AND activity_date <= DATE('2024-10-01')",
  "queryTables" : [ "datalakehive.employer_analytics_platform.xpa_sourcing_engagement_daily" ],
  "queryIndex" : 299,
  "runStartToQueryComplete" : 1629
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 31680,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_174858_00324_vjepj): Error processing metadata for table tiller.adsystemdb_tbladvertiserjobsource",
  "scannedBytes" : 0,
  "query" : "SELECT weekStart\n, isUtilized as isDiscoverableByJS\n, indexedJobsWithAdvId\n, indexedJobs\n, format('%.2f%%', (cast(indexedJobsWithAdvId as double)/cast(indexedJobs as double)*100)) as linkedAdvertiserRate\nFROM\n\n      (SELECT date_format(DATE_TRUNC('WEEK', FROM_UNIXTIME(unixtime)),'%Y-%m-%d') as weekStart\n      , (case when (waldovisibilitylevel in ('organic','jobalert')\n          OR (waldovisibilitylevel = 'sponsored' AND sponvisibility = 'spon_active')) \n          then 1 else 0 end) as isUtilized\n      , count(DISTINCT((case when asl.source_id is not null then jobId else null end))) as indexedJobsWithAdvId\n      , count(DISTINCT(jobId)) as indexedJobs\n      FROM datalake.imhotep.searchablejobs sj\n          LEFT JOIN (SELECT source_id\n                      FROM datalake.tiller.adsystemdb_tbladvertiserjobsource\n                      WHERE status = 'VERIFIED'\n                      GROUP BY 1) asl\n          ON sj.sourceid = asl.source_id\n      WHERE unixtime between imhotep_unixtime(CURRENT_DATE - INTERVAL '183' DAY) \n      AND imhotep_unixtime(CURRENT_DATE - INTERVAL '1' DAY)\n      AND feedid != 50461\n      AND jobcountry != 'JP'\n      GROUP BY 1,2)",
  "queryTables" : [ "datalake.tiller.adsystemdb_tbladvertiserjobsource", "datalakehive.imhotep.searchablejobs" ],
  "queryIndex" : 300,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 4431,
  "totalScheduledMillis" : 755622,
  "cpuMillis" : 97724,
  "queuedMillis" : 0,
  "executeMillis" : 552,
  "getResultMillis" : 0,
  "iterateMillis" : 3914,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 3704898214,
  "query" : "SELECT \n\tDATE_TRUNC('month', all_grc.activity_date) as yr_mo\n    , all_grc.advertiser_id\n\t, all_grc.salesrep_id as historically_accurate_salesrep_id\n    , current_reps.salesrep_id as current_salesrep_id\n    , SUM(all_grc.revenue_local_value) as rev\nFROM datalake.bi.vw_rev_global_revenue_and_credit as all_grc\nLEFT JOIN datalake.bi.vw_rev_global_revenue_and_credit as current_reps on all_grc.advertiser_id = current_reps.advertiser_id\nWHERE all_grc.activity_date >= DATE('2024-06-01') \nand current_reps.activity_date >= DATE_ADD('day', -1, CURRENT_DATE)\nGROUP BY \n\tDATE_TRUNC('month', all_grc.activity_date)\n    , all_grc.advertiser_id\n    , all_grc.salesrep_id\n    , current_reps.salesrep_id\nORDER BY \t\n\tDATE_TRUNC('month', all_grc.activity_date)\n    , all_grc.advertiser_id\n    , all_grc.salesrep_id\n    , current_reps.salesrep_id",
  "queryTables" : [ "datalakehive.bi.vw_rev_global_revenue_and_credit", "datalakehive.bi.vw_rev_global_revenue_and_credit" ],
  "queryIndex" : 301,
  "runStartToQueryComplete" : 1633
}, {
  "elapsedMillis" : 4439,
  "totalScheduledMillis" : 614806,
  "cpuMillis" : 69712,
  "queuedMillis" : 0,
  "executeMillis" : 583,
  "getResultMillis" : 0,
  "iterateMillis" : 3885,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 3369346285,
  "query" : "SELECT \n\tDATE_TRUNC('month', all_grc.activity_date) as yr_mo\n    , all_grc.advertiser_id\n\t, all_grc.salesrep_id as historically_accurate_salesrep_id\n    , current_reps.salesrep_id as current_salesrep_id\n    , SUM(all_grc.revenue_local_value) as rev\nFROM datalake.bi.vw_rev_global_revenue_and_credit as all_grc\nLEFT JOIN datalake.bi.vw_rev_global_revenue_and_credit as current_reps on all_grc.advertiser_id = current_reps.advertiser_id\nWHERE all_grc.activity_date >= DATE('2024-10-01') \nand current_reps.activity_date >= DATE_ADD('day', -1, CURRENT_DATE)\nGROUP BY \n\tDATE_TRUNC('month', all_grc.activity_date)\n    , all_grc.advertiser_id\n    , all_grc.salesrep_id\n    , current_reps.salesrep_id\nORDER BY \t\n\tDATE_TRUNC('month', all_grc.activity_date)\n    , all_grc.advertiser_id\n    , all_grc.salesrep_id\n    , current_reps.salesrep_id",
  "queryTables" : [ "datalakehive.bi.vw_rev_global_revenue_and_credit", "datalakehive.bi.vw_rev_global_revenue_and_credit" ],
  "queryIndex" : 302,
  "runStartToQueryComplete" : 1633
}, {
  "elapsedMillis" : 263,
  "totalScheduledMillis" : 1,
  "cpuMillis" : 1,
  "queuedMillis" : 0,
  "executeMillis" : 267,
  "getResultMillis" : 0,
  "iterateMillis" : 3,
  "rows" : 14,
  "error" : null,
  "scannedBytes" : 9136,
  "query" : "select * from datalake.tiller.\"oplin_events_error$snapshots\"",
  "queryTables" : [ "datalake.tiller.oplin_events_error$snapshots" ],
  "queryIndex" : 303,
  "runStartToQueryComplete" : 1632
}, {
  "elapsedMillis" : 50777,
  "totalScheduledMillis" : 18938437,
  "cpuMillis" : 1289409,
  "queuedMillis" : 1,
  "executeMillis" : 9451,
  "getResultMillis" : 0,
  "iterateMillis" : 41366,
  "rows" : 35,
  "error" : null,
  "scannedBytes" : 32661739386,
  "query" : "WITH \n\nw_cl as (\n\tSELECT job_hash_underscore as jobhash\n\tFROM datalake.imhotep.dradis_job2\n\tWHERE unixtime between imhotep_unixtime(CURRENT_DATE - INTERVAL '31' DAY) \n\t\tAND imhotep_unixtime(CURRENT_DATE - INTERVAL '1' DAY)\n\tAND claim_version = '2'\n\tAND status = 'ACTIVE'\n    AND country != 'JP'\n    GROUP BY 1)    \n\nSELECT date_format(DATE_TRUNC('WEEK', FROM_UNIXTIME(unixtime)),'%Y-%m-%d') as weekStart\n, (CASE WHEN w_cl.jobhash IS NOT NULL THEN 'CLAIMED' ELSE 'CREATED' END) as action \n, count(DISTINCT(advid)) as advIdsWithJobActions\n, count(DISTINCT(employerjobid)) as jobsActioned\nFROM datalake.imhotep.dradisjobcreateorupdate dcu\nLEFT JOIN w_cl ON dcu.jobhash = w_cl.jobhash\nWHERE unixtime between imhotep_unixtime(CURRENT_DATE - INTERVAL '31' DAY) \n\tAND imhotep_unixtime(CURRENT_DATE - INTERVAL '1' DAY)\nAND action = 'CREATE'\nAND country != 'JP'\nGROUP BY 1,2\n\nUNION ALL\nSELECT date_format(DATE_TRUNC('WEEK', FROM_UNIXTIME(unixtime)),'%Y-%m-%d') as weekStart\n, action \n, count(DISTINCT(advid)) as advIdsWithJobActions\n, count(DISTINCT(employerjobid)) as jobsActioned\nFROM datalake.imhotep.dradisjobcreateorupdate dcu\nWHERE unixtime between imhotep_unixtime(CURRENT_DATE - INTERVAL '31' DAY) \n\tAND imhotep_unixtime(CURRENT_DATE - INTERVAL '1' DAY)\nAND action = 'UPDATE'\nAND country != 'JP'\nGROUP BY 1,2\n\nUNION ALL\nSELECT date_format(DATE_TRUNC('WEEK', FROM_UNIXTIME(unixtime)),'%Y-%m-%d') as weekStart\n, enrollment as action\n, count(DISTINCT(advertiserid)) as advIdsWithJobActions\n, count(DISTINCT(employerjobid)) as jobsActioned\nFROM datalake.imhotep.employerjobenrollments\nWHERE unixtime between imhotep_unixtime(CURRENT_DATE - INTERVAL '31' DAY) \n\tAND imhotep_unixtime(CURRENT_DATE - INTERVAL '1' DAY)\nGROUP BY 1,2\n\nUNION ALL\nSELECT date_format(DATE_TRUNC('WEEK', FROM_UNIXTIME(unixtime)),'%Y-%m-%d') as weekStart\n, product as action\n, count(DISTINCT(auditadvertiserid)) as advIdsWithJobActions\n, count(DISTINCT(employerjobid)) as jobsActioned\nFROM datalake.imhotep.ejgapigroupmembershipchange\nWHERE unixtime between imhotep_unixtime(CURRENT_DATE - INTERVAL '31' DAY) \n\tAND imhotep_unixtime(CURRENT_DATE - INTERVAL '1' DAY)\nAND product != 'TEST_SINGLETON'\nGROUP BY 1,2",
  "queryTables" : [ "datalakehive.imhotep.dradis_job2", "datalakehive.imhotep.dradisjobcreateorupdate", "datalakehive.imhotep.dradisjobcreateorupdate", "datalakehive.imhotep.ejgapigroupmembershipchange", "datalakehive.imhotep.employerjobenrollments" ],
  "queryIndex" : 304,
  "runStartToQueryComplete" : 1684
}, {
  "elapsedMillis" : 124564,
  "totalScheduledMillis" : 109031480,
  "cpuMillis" : 22262318,
  "queuedMillis" : 0,
  "executeMillis" : 572,
  "getResultMillis" : 0,
  "iterateMillis" : 124019,
  "rows" : 20,
  "error" : null,
  "scannedBytes" : 964657045336,
  "query" : "SELECT desired_job_title_raw_unnest \n       ,COUNT(DISTINCT(acctid)) AS cnt_users \n       ,100 * (CAST(COUNT(DISTINCT(acctid)) AS DOUBLE) / CAST(SUM(COUNT(DISTINCT(acctid))) OVER () AS DOUBLE)) AS pct_users\nFROM (\nSELECT  acctId\n        ,COALESCE(\n            TRY(\n                FLATTEN(FILTER(TRANSFORM(MAP_VALUES(normalizeddata['User'].preferences) , p -> COALESCE(TRY(FILTER(TRANSFORM(FILTER(MAP_VALUES(p.titles) \n                , x -> x.sentiment = 'POSITIVE') \n                , x -> COALESCE(REGEXP_REPLACE(LOWER(TRIM(x.title)), '\\s+', ' '), '')) , x -> x != '')) , ARRAY[])) , x -> x IS NOT NULL))) \n            , ARRAY[] ) AS desired_job_title_raw\n         ,COALESCE(\n            TRY(\n                FLATTEN(FILTER(TRANSFORM(MAP_VALUES(normalizeddata['User'].preferences) , p -> COALESCE(TRY(FILTER(TRANSFORM(FILTER(MAP_VALUES(p.titles) \n                , x -> x.sentiment = 'POSITIVE') \n                , x -> COALESCE(REGEXP_REPLACE(LOWER(TRIM(x.normalizedvalue)), '\\s+', ' '), '')) , x -> x != '')) , ARRAY[])) , x -> x IS NOT NULL))) \n            , ARRAY[] ) AS desired_job_title_normalized\n         ,CASE WHEN CARDINALITY(resumes) > 0 THEN resumes[1].location.country END AS country \n\nFROM jssdi.profile_snapshot\nWHERE day = '2024-10-14' \n) \nCROSS JOIN UNNEST(desired_job_title_raw) AS t(desired_job_title_raw_unnest)\nWHERE country = 'US'\nAND CARDINALITY(desired_job_title_raw) > 0 \nGROUP BY 1 \nORDER BY 2 DESC \nLIMIT 20",
  "queryTables" : [ "skipperhive.jssdi.profile_snapshot" ],
  "queryIndex" : 305,
  "runStartToQueryComplete" : 1765
}, {
  "elapsedMillis" : 119403,
  "totalScheduledMillis" : 98906220,
  "cpuMillis" : 22300390,
  "queuedMillis" : 0,
  "executeMillis" : 556,
  "getResultMillis" : 0,
  "iterateMillis" : 118866,
  "rows" : 20,
  "error" : null,
  "scannedBytes" : 964657045336,
  "query" : "SELECT desired_job_title_raw_unnest \n       ,COUNT(DISTINCT(acctid)) AS cnt_users \n       ,100 * (CAST(COUNT(DISTINCT(acctid)) AS DOUBLE) / CAST(SUM(COUNT(DISTINCT(acctid))) OVER () AS DOUBLE)) AS pct_users\nFROM (\nSELECT  acctId\n        ,COALESCE(\n            TRY(\n                FLATTEN(FILTER(TRANSFORM(MAP_VALUES(normalizeddata['User'].preferences) , p -> COALESCE(TRY(FILTER(TRANSFORM(FILTER(MAP_VALUES(p.titles) \n                , x -> x.sentiment = 'POSITIVE') \n                , x -> COALESCE(REGEXP_REPLACE(LOWER(TRIM(x.title)), '\\s+', ' '), '')) , x -> x != '')) , ARRAY[])) , x -> x IS NOT NULL))) \n            , ARRAY[] ) AS desired_job_title_raw\n         ,COALESCE(\n            TRY(\n                FLATTEN(FILTER(TRANSFORM(MAP_VALUES(normalizeddata['User'].preferences) , p -> COALESCE(TRY(FILTER(TRANSFORM(FILTER(MAP_VALUES(p.titles) \n                , x -> x.sentiment = 'POSITIVE') \n                , x -> COALESCE(REGEXP_REPLACE(LOWER(TRIM(x.normalizedvalue)), '\\s+', ' '), '')) , x -> x != '')) , ARRAY[])) , x -> x IS NOT NULL))) \n            , ARRAY[] ) AS desired_job_title_normalized\n         ,CASE WHEN CARDINALITY(resumes) > 0 THEN resumes[1].location.country END AS country \n\nFROM jssdi.profile_snapshot\nWHERE day = '2024-10-14' \n) \nCROSS JOIN UNNEST(desired_job_title_raw) AS t(desired_job_title_raw_unnest)\nWHERE country = 'US'\nAND CARDINALITY(desired_job_title_raw) > 0 \nGROUP BY 1 \nORDER BY 2 DESC \nLIMIT 20",
  "queryTables" : [ "skipperhive.jssdi.profile_snapshot" ],
  "queryIndex" : 306,
  "runStartToQueryComplete" : 1766
}, {
  "elapsedMillis" : 358284,
  "totalScheduledMillis" : 363563762,
  "cpuMillis" : 17131737,
  "queuedMillis" : 0,
  "executeMillis" : 80970,
  "getResultMillis" : 0,
  "iterateMillis" : 277364,
  "rows" : 2888,
  "error" : null,
  "scannedBytes" : 1168989322117,
  "query" : "with jobs as (SELECT coalesce(parent_company_id, job_source_id+1000000) as parent_company_id \n, coalesce(max(parent_company_name), max(job_source_name)) as parent_company_name   \n, min(job_source_id) as job_source_id\n, count(distinct agg_job_id) as jobs_l30days \n, sum(organic_apply_starts) as orgAS_l30days \n\nFROM datalake.imhotep.jobactivitymetrics j\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today')\nand job_country_code = 'US' and is_job_searchable > 0 \n--and parent_company_id is not null \nand advertiser_type not in ('Test', 'Indeed')\ngroup by 1)\n\n, rev as (select parent_company_id \n, sum(net_revenue_cents)/100 as spend_lyear \nFROM datalake.imhotep.grdm j \nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1y') AND IMHOTEP_UNIXTIME('today') \ngroup by 1) \n\n, together as (select jobs.* \n, coalesce(spend_lyear, 0) as spend_lyear \n, coalesce(last_any_products, cast('2000-01-01' as date)) as last_revenue_date  -- if no last revenue date, then say they last spend in 2000 \n, date_diff('day', coalesce(last_any_products, cast('2000-01-01' as date)), CURRENT_DATE) as days_since_last_spend \nfrom jobs \nleft join rev on rev.parent_company_id = jobs.parent_company_id \nleft join datalake.core.product_analytics_fct_first_last_activity_dates_parent f \n\ton f.parent_company_id = jobs.parent_company_id\n--where jobs_l30days > 100    \n)\n, together_ordered as (select *, \nntile(10) over (order by jobs_l30days desc) as jobs_ntile -- 1 is most jobs \n, ntile(10) over (order by spend_lyear asc) as spend_ntile -- 1 is lowest spend \n, ntile(10) over (order by days_since_last_spend desc) as days_since_last_spend_ntile -- 1 is never spender\nfrom together )\n\n, together_ordered_fixed as (select parent_company_id  \n, job_source_id\n, parent_company_name \n, orgAS_l30days \n, jobs_l30days\n, days_since_last_spend\n, spend_lyear\n, jobs_ntile \n, case when spend_lyear <= 0 then 1 else spend_ntile end as spend_ntile \n, case when days_since_last_spend > 9000 then 1 else days_since_last_spend_ntile end as days_since_last_spend_ntile\n\nfrom together_ordered )\n\n, rfm as (select * \n, jobs_ntile + spend_ntile + days_since_last_spend_ntile as rfm_unweighted \n, 1*jobs_ntile + 100*spend_ntile + 10*days_since_last_spend_ntile as rfm_weighted -- the higher this number the bigger the penalty\nfrom together_ordered_fixed\norder by 1*jobs_ntile + 100*spend_ntile + 10*days_since_last_spend_ntile desc\n)\n\n, jobs_first_hour as (SELECT sourceid\n, jobid  \n, max(normtitle) as normtitle \n, coalesce(max(jlmsa), 'rural') as msa \n, sum(coalesce(applystarts,0)) as applystarts\n\nFROM datalake.imhotep.mobileorganic j\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today')\nand country in ('us', 'US') and jobageminutes <= 60\ngroup by 1, 2)\n\n, jobs_first_hour_ordered as (SELECT * \n, ntile(10) over (order by applystarts asc) as job_ntile\nFROM jobs_first_hour)\n\n\n, subset as (select case when rfm_weighted > 1000 then 'A_1000+ Biggest Penalty'\nwhen rfm_weighted > 900 then 'B_900'\nwhen rfm_weighted > 800 then 'C_800'\nwhen rfm_weighted > 700 then 'D_700'\nwhen rfm_weighted > 600 then 'E_600'\nwhen rfm_weighted > 500 then 'F_500'\nwhen rfm_weighted > 400 then 'G_400'\nwhen rfm_weighted > 300 then 'H_300'\nwhen rfm_weighted > 200 then 'I_200' else 'J_100 Lowest Penalty' end as rfm_segment \n, rfm.* \n, j.* \n, row_number() over (partition by job_source_id order by applystarts desc) as rn \n\nfrom rfm  \nleft join jobs_first_hour_ordered j on j.sourceid = rfm.job_source_id \nwhere rfm_weighted > 1000 or rfm_weighted < 200\nand j.job_ntile = 10 )\n\nselect * from subset \nwhere rn <= 5 and orgAS_l30days > 10000\n\n\n\n",
  "queryTables" : [ "datalakehive.core.product_analytics_fct_first_last_activity_dates_parent", "datalakehive.imhotep.grdm", "datalakehive.imhotep.jobactivitymetrics", "datalakehive.imhotep.mobileorganic" ],
  "queryIndex" : 307,
  "runStartToQueryComplete" : 2010
}, {
  "elapsedMillis" : 270296,
  "totalScheduledMillis" : 6884928,
  "cpuMillis" : 3408772,
  "queuedMillis" : 0,
  "executeMillis" : 3659,
  "getResultMillis" : 0,
  "iterateMillis" : 266661,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 3463254347,
  "query" : "SELECT yyyymmdd, COUNT()\nFROM logrepo.log.jsapirelevantjobsapplystart\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-10-10') AND IMHOTEP_UNIXTIME('2024-10-21')\ngroup by yyyymmdd\nLIMIT 10",
  "queryTables" : [ "logrepo.log.jsapirelevantjobsapplystart" ],
  "queryIndex" : 308,
  "runStartToQueryComplete" : 1925
}, {
  "elapsedMillis" : 683,
  "totalScheduledMillis" : 276,
  "cpuMillis" : 51,
  "queuedMillis" : 0,
  "executeMillis" : 408,
  "getResultMillis" : 0,
  "iterateMillis" : 283,
  "rows" : 304,
  "error" : null,
  "scannedBytes" : 453674,
  "query" : "select partition, record_count, file_count, ceil(cast(total_size as double) / 1024 / 1024 / 500) as file_estimate, cast(cast(total_size as double) / 1024 / 1024 as decimal(10,3)) as total_size_MB\nfrom datalake.tiller.\"oplin_events_notification$partitions\"",
  "queryTables" : [ "datalake.tiller.oplin_events_notification$partitions" ],
  "queryIndex" : 309,
  "runStartToQueryComplete" : 1671
}, {
  "elapsedMillis" : 344,
  "totalScheduledMillis" : 39,
  "cpuMillis" : 29,
  "queuedMillis" : 0,
  "executeMillis" : 306,
  "getResultMillis" : 0,
  "iterateMillis" : 47,
  "rows" : 152,
  "error" : null,
  "scannedBytes" : 236565,
  "query" : "select partition, record_count, file_count, ceil(cast(total_size as double) / 1024 / 1024 / 500) as file_estimate, cast(cast(total_size as double) / 1024 / 1024 as decimal(10,3)) as total_size_MB\nfrom datalake.tiller.\"oplin_events_usage$partitions\"",
  "queryTables" : [ "datalake.tiller.oplin_events_usage$partitions" ],
  "queryIndex" : 310,
  "runStartToQueryComplete" : 1698
}, {
  "elapsedMillis" : 972,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 721,
  "getResultMillis" : 0,
  "iterateMillis" : 277,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 0,
  "query" : "with dat as (\nSELECT \n  jobid,\n  accountid,\n  old_backfiller_mom_qualification_overlap_score_v2,\n  mom_qualification_overlap_score_v2,\n  taxo_attribute_suids as old_backfiller_attributes,\n  job_feature_jsbe_corejobdata_features_attributesuids as new_backfiller_attributes,\n  job_reqs_required, \n  job_reqs_preferred,\n  taxo_attribute_suids_req_level_required,\n  taxo_attribute_suids_req_level_optional,\n  occupations_most_likely,\n  \n  jobseeker_feature_jsdp_user_submitted_qualification_certification,\n  jobseeker_feature_jsdp_user_submitted_qualification_education,\n  jobseeker_feature_jsdp_user_submitted_qualification_language,\n  jobseeker_feature_jsdp_user_submitted_qualification_license,\n  jobseeker_feature_jsdp_user_submitted_qualification_preemploymentcondition,\n  jobseeker_feature_jsdp_user_submitted_qualification_securityclearance,\n  jobseeker_feature_jsdp_user_submitted_qualification_skill,\n  jobseeker_feature_jsdp_resume_extraction_accountid_attributes,\n  jobseeker_feature_jsdp_resume_extraction_accountid_occupations\nFROM \n\tdatalake.imhotep_qa.rjpimpressionsv1_1\nWHERE \n\tunixtime BETWEEN IMHOTEP_UNIXTIME('2024-08-15 09:00:00') AND IMHOTEP_UNIXTIME('2024-08-15 10:00:00') AND\n    old_backfiller_mom_qualification_overlap_score_v2 != mom_qualification_overlap_score_v2 \n\nLIMIT 100)\n\nSELECT * from dat\n\n\n  ",
  "queryTables" : [ "datalakehive.imhotep_qa.rjpimpressionsv1_1" ],
  "queryIndex" : 311,
  "runStartToQueryComplete" : 1703
}, {
  "elapsedMillis" : 326,
  "totalScheduledMillis" : 62,
  "cpuMillis" : 52,
  "queuedMillis" : 0,
  "executeMillis" : 330,
  "getResultMillis" : 0,
  "iterateMillis" : 5,
  "rows" : 304,
  "error" : null,
  "scannedBytes" : 516355,
  "query" : "select partition, record_count, file_count, ceil(cast(total_size as double) / 1024 / 1024 / 500) as file_estimate, cast(cast(total_size as double) / 1024 / 1024 as decimal(10,3)) as total_size_MB\nfrom datalake.tiller.\"oplin_events_end$partitions\"",
  "queryTables" : [ "datalake.tiller.oplin_events_end$partitions" ],
  "queryIndex" : 312,
  "runStartToQueryComplete" : 1711
}, {
  "elapsedMillis" : 370,
  "totalScheduledMillis" : 54,
  "cpuMillis" : 44,
  "queuedMillis" : 0,
  "executeMillis" : 316,
  "getResultMillis" : 0,
  "iterateMillis" : 62,
  "rows" : 304,
  "error" : null,
  "scannedBytes" : 452550,
  "query" : "select partition, record_count, file_count, ceil(cast(total_size as double) / 1024 / 1024 / 500) as file_estimate, cast(cast(total_size as double) / 1024 / 1024 as decimal(10,3)) as total_size_MB\nfrom datalake.tiller.\"oplin_events_start$partitions\"",
  "queryTables" : [ "datalake.tiller.oplin_events_start$partitions" ],
  "queryIndex" : 313,
  "runStartToQueryComplete" : 1718
}, {
  "elapsedMillis" : 309,
  "totalScheduledMillis" : 57,
  "cpuMillis" : 47,
  "queuedMillis" : 0,
  "executeMillis" : 259,
  "getResultMillis" : 0,
  "iterateMillis" : 60,
  "rows" : 304,
  "error" : null,
  "scannedBytes" : 453674,
  "query" : "select partition, record_count, file_count, ceil(cast(total_size as double) / 1024 / 1024 / 500) as file_estimate, cast(cast(total_size as double) / 1024 / 1024 as decimal(10,3)) as total_size_MB\nfrom datalake.tiller.\"oplin_events_notification$partitions\"",
  "queryTables" : [ "datalake.tiller.oplin_events_notification$partitions" ],
  "queryIndex" : 314,
  "runStartToQueryComplete" : 1725
}, {
  "elapsedMillis" : 776,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 771,
  "getResultMillis" : 0,
  "iterateMillis" : 18,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 0,
  "query" : "SELECT *\nFROM datalake.imhotep.marketplace_supply_demand_job_seeker\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nAND CARDINALITY(filter(locations, (x) -> x.latitude < -90 OR x.latitude > 90 OR x.longitude < -180 OR x.longitude > 180)) > 0\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.marketplace_supply_demand_job_seeker" ],
  "queryIndex" : 315,
  "runStartToQueryComplete" : 1758
}, {
  "elapsedMillis" : 2818,
  "totalScheduledMillis" : 72094,
  "cpuMillis" : 25377,
  "queuedMillis" : 0,
  "executeMillis" : 1531,
  "getResultMillis" : 0,
  "iterateMillis" : 1296,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 1155058630,
  "query" : "explain analyze select *\nfrom datalake.tiller.oplin_events_start\nwhere ingest_time > date '2024-10-29'",
  "queryTables" : [ "datalake.tiller.oplin_events_start" ],
  "queryIndex" : 316,
  "runStartToQueryComplete" : 1764
}, {
  "elapsedMillis" : 3774,
  "totalScheduledMillis" : 3204,
  "cpuMillis" : 345,
  "queuedMillis" : 0,
  "executeMillis" : 503,
  "getResultMillis" : 0,
  "iterateMillis" : 3287,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 72307304,
  "query" : "SELECT *\nFROM datalake.skytree_iceberg.salesforce_account_rep_assignment\nlimit 10",
  "queryTables" : [ "datalake.skytree_iceberg.salesforce_account_rep_assignment" ],
  "queryIndex" : 317,
  "runStartToQueryComplete" : 1810
}, {
  "elapsedMillis" : 14002,
  "totalScheduledMillis" : 6011553,
  "cpuMillis" : 1325801,
  "queuedMillis" : 0,
  "executeMillis" : 1410,
  "getResultMillis" : 0,
  "iterateMillis" : 12639,
  "rows" : 500,
  "error" : null,
  "scannedBytes" : 11081605268,
  "query" : "with app_status as(SELECT ats,apply_id, disposition_status, max(unixtime) as unixtime\nFROM signal_back_disposition a\nWHERE \n  -- remove apply_id that existed 1y before july\n  NOT EXISTS (\n      SELECT apply_id\n      FROM signal_back_disposition b\n      WHERE unixtime between imhotep_unixtime('2023-04-01') and imhotep_unixtime('2024-07-01')\n        AND a.apply_id=b.apply_id\n  )\n  -- apply_id first appears in july\n  AND EXISTS (\n      SELECT apply_id\n      FROM signal_back_disposition c\n      WHERE unixtime between imhotep_unixtime('2024-07-01') and imhotep_unixtime('2024-08-01')\n        AND a.apply_id=c.apply_id\n  )\n  AND unixtime between imhotep_unixtime('2024-07-01') and imhotep_unixtime('today')\n  \n  GROUP BY 1,2,3\n)\n,max_times as (\nSELECT ats\n, apply_id\n, disposition_status\n, unixtime\n, ROW_NUMBER() OVER(PARTITION BY apply_id ORDER BY unixtime ASC) as status_number\n, COUNT(*) OVER(PARTITION BY apply_id) as total_signals_for_apply\nFROM app_status)\n\nSELECT apply_id, total_signals_for_apply, status_number, FROM_UNIXTIME(unixtime) as disposition_date, disposition_status\nFROM max_times\nWHERE ats='ukg-prodd'\nAND total_signals_for_apply=1 AND disposition_status='NEW'\nORDER BY 1,3\n\nlimit 500",
  "queryTables" : [ "skipperhive.imhotep.signal_back_disposition", "skipperhive.imhotep.signal_back_disposition", "skipperhive.imhotep.signal_back_disposition" ],
  "queryIndex" : 318,
  "runStartToQueryComplete" : 1852
}, {
  "elapsedMillis" : 0,
  "totalScheduledMillis" : 0,
  "cpuMillis" : 0,
  "queuedMillis" : 0,
  "executeMillis" : 46881,
  "getResultMillis" : 0,
  "iterateMillis" : 0,
  "rows" : 0,
  "error" : "Query failed (#20250114_175244_00342_vjepj): Error processing metadata for table tiller.adsystemdb_tbladvertiserjobsource",
  "scannedBytes" : 0,
  "query" : "WITH\n\nw_va as (\n\tSELECT source_id, advertiser_id\n    FROM datalake.tiller.adsystemdb_tbladvertiserjobsource\n    WHERE status = 'VERIFIED'\n    GROUP BY 1,2),\n\nw_sj as (\n\tSELECT date_format(DATE_TRUNC('WEEK', FROM_UNIXTIME(sj.unixtime)),'%Y-%m-%d') as weekStart\n\t, w_va.advertiser_id\n    FROM datalake.imhotep.searchablejobs sj\n\tINNER JOIN w_va ON sj.sourceid = w_va.source_id\n    WHERE unixtime between imhotep_unixtime(CURRENT_DATE - INTERVAL '183' DAY) \n\tAND imhotep_unixtime(CURRENT_DATE - INTERVAL '1' DAY)\n\tAND jobcountry != 'JP'\n\tGROUP BY 1,2),\n\nw_oi as (\n\tSELECT date_format(DATE_TRUNC('WEEK', FROM_UNIXTIME(unixtime)),'%Y-%m-%d') as weekStart\n    , advertiser_id \n    from datalake.imhotep.employer_user_actions_spark\n    WHERE unixtime between imhotep_unixtime(CURRENT_DATE - INTERVAL '183' DAY) \n\t\tAND imhotep_unixtime(CURRENT_DATE - INTERVAL '1' DAY)\n    AND country != 'JP'\n    AND is_privileged != 1\n    GROUP BY 1,2),\n    \nw_s as (\n\tSELECT date_format(DATE_TRUNC('WEEK', FROM_UNIXTIME(unixtime)),'%Y-%m-%d') as weekStart\n\t, CAST(advertiserid as BIGINT) as advertiser_id\n\tFROM datalake.imhotep.employerjobsearch\n    WHERE unixtime between imhotep_unixtime(CURRENT_DATE - INTERVAL '183' DAY) \n\t\tAND imhotep_unixtime(CURRENT_DATE - INTERVAL '1' DAY)\n\tAND lower(gqlOperationName) not like '%facet%' \n    AND lower(gqlOperationName) not like '%count%' \n\tAND country != 'JP'\n    AND coalesce(is_privileged,0) != 1\n    GROUP BY 1,2)\n       \nSELECT w_sj.weekStart\n, count(DISTINCT(w_sj.advertiser_id)) as advIdsWithJob\n, count(DISTINCT(w_oi.advertiser_id)) as advIdsOnIndeed\n, count(DISTINCT(w_s.advertiser_id)) as advIdsWithSearch\nFROM w_sj\nLEFT JOIN w_oi \n\tON w_sj.advertiser_id = w_oi.advertiser_id\n\tAND w_sj.weekstart = w_oi.weekstart\nLEFT JOIN w_s\n\tON w_sj.advertiser_id = w_s.advertiser_id\n\tAND w_sj.weekstart = w_s.weekstart\nGROUP BY 1",
  "queryTables" : [ "datalake.tiller.adsystemdb_tbladvertiserjobsource", "datalakehive.imhotep.employer_user_actions_spark", "datalakehive.imhotep.employerjobsearch", "datalakehive.imhotep.searchablejobs" ],
  "queryIndex" : 319,
  "runStartToQueryComplete" : 0
}, {
  "elapsedMillis" : 1594,
  "totalScheduledMillis" : 590,
  "cpuMillis" : 126,
  "queuedMillis" : 0,
  "executeMillis" : 833,
  "getResultMillis" : 0,
  "iterateMillis" : 802,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 15157758,
  "query" : "SELECT *\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 320,
  "runStartToQueryComplete" : 1858
}, {
  "elapsedMillis" : 2164,
  "totalScheduledMillis" : 451,
  "cpuMillis" : 102,
  "queuedMillis" : 0,
  "executeMillis" : 1657,
  "getResultMillis" : 0,
  "iterateMillis" : 572,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 15157758,
  "query" : "SELECT *\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 321,
  "runStartToQueryComplete" : 1890
}, {
  "elapsedMillis" : 1321,
  "totalScheduledMillis" : 290,
  "cpuMillis" : 149,
  "queuedMillis" : 0,
  "executeMillis" : 854,
  "getResultMillis" : 0,
  "iterateMillis" : 476,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 15157758,
  "query" : "SELECT *\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 322,
  "runStartToQueryComplete" : 1895
}, {
  "elapsedMillis" : 1311,
  "totalScheduledMillis" : 274,
  "cpuMillis" : 86,
  "queuedMillis" : 0,
  "executeMillis" : 912,
  "getResultMillis" : 0,
  "iterateMillis" : 412,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 15157758,
  "query" : "SELECT *\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 323,
  "runStartToQueryComplete" : 1913
}, {
  "elapsedMillis" : 502083,
  "totalScheduledMillis" : 3691188600,
  "cpuMillis" : 109452000,
  "queuedMillis" : 0,
  "executeMillis" : 571,
  "getResultMillis" : 0,
  "iterateMillis" : 501528,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 3472275054622,
  "query" : "SELECT min(day) FROM jssdi.profile_snapshot WHERE day >= '2020-01-01'",
  "queryTables" : [ "skipperhive.jssdi.profile_snapshot" ],
  "queryIndex" : 324,
  "runStartToQueryComplete" : 2422
}, {
  "elapsedMillis" : 1195,
  "totalScheduledMillis" : 251,
  "cpuMillis" : 99,
  "queuedMillis" : 0,
  "executeMillis" : 811,
  "getResultMillis" : 0,
  "iterateMillis" : 410,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 15157758,
  "query" : "SELECT *\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 325,
  "runStartToQueryComplete" : 1934
}, {
  "elapsedMillis" : 1259,
  "totalScheduledMillis" : 277,
  "cpuMillis" : 109,
  "queuedMillis" : 0,
  "executeMillis" : 853,
  "getResultMillis" : 0,
  "iterateMillis" : 418,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 15157758,
  "query" : "SELECT *\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 326,
  "runStartToQueryComplete" : 1981
}, {
  "elapsedMillis" : 1345,
  "totalScheduledMillis" : 368,
  "cpuMillis" : 133,
  "queuedMillis" : 0,
  "executeMillis" : 844,
  "getResultMillis" : 0,
  "iterateMillis" : 513,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 15157758,
  "query" : "SELECT *\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 327,
  "runStartToQueryComplete" : 1981
}, {
  "elapsedMillis" : 1098,
  "totalScheduledMillis" : 251,
  "cpuMillis" : 96,
  "queuedMillis" : 0,
  "executeMillis" : 698,
  "getResultMillis" : 0,
  "iterateMillis" : 410,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 15157758,
  "query" : "SELECT *\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 328,
  "runStartToQueryComplete" : 1993
}, {
  "elapsedMillis" : 265373,
  "totalScheduledMillis" : 85858802,
  "cpuMillis" : 71246402,
  "queuedMillis" : 0,
  "executeMillis" : 3751,
  "getResultMillis" : 0,
  "iterateMillis" : 261633,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 5173769587134,
  "query" : "SELECT\n\t\t\n\t\tmoderationtext,\n        flagged,\n        flaggedcategories,\n        flaggedwords,\n \t\tappName,\n        moderationApi, \n        moderationType, \n   \t\tmodel,\n        moderationHeader,\n        locale,               \n        metric,\n        FROM_UNIXTIME(unixtime) as request_date,\n        requestid,\n        reqbody,\n        respbody\nFROM\n       logrepo.log.llm_proxy lp\n    WHERE\n    \trequestid = '0f7ae361-eeda-45db-90bb-26540b984598'\n        and unixtime > imhotep_unixtime(DATE(CURRENT_DATE) - interval '4' day)\nlimit 50\n",
  "queryTables" : [ "logrepo.log.llm_proxy" ],
  "queryIndex" : 329,
  "runStartToQueryComplete" : 2283
}, {
  "elapsedMillis" : 1294,
  "totalScheduledMillis" : 360,
  "cpuMillis" : 144,
  "queuedMillis" : 0,
  "executeMillis" : 777,
  "getResultMillis" : 0,
  "iterateMillis" : 525,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 15157758,
  "query" : "SELECT *\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 330,
  "runStartToQueryComplete" : 2071
}, {
  "elapsedMillis" : 1210,
  "totalScheduledMillis" : 281,
  "cpuMillis" : 112,
  "queuedMillis" : 0,
  "executeMillis" : 804,
  "getResultMillis" : 0,
  "iterateMillis" : 416,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 15157758,
  "query" : "SELECT *\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 331,
  "runStartToQueryComplete" : 2088
}, {
  "elapsedMillis" : 1301,
  "totalScheduledMillis" : 282,
  "cpuMillis" : 91,
  "queuedMillis" : 0,
  "executeMillis" : 859,
  "getResultMillis" : 0,
  "iterateMillis" : 450,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 15157758,
  "query" : "SELECT *\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 332,
  "runStartToQueryComplete" : 2149
}, {
  "elapsedMillis" : 122444,
  "totalScheduledMillis" : 158949068,
  "cpuMillis" : 56356070,
  "queuedMillis" : 0,
  "executeMillis" : 10820,
  "getResultMillis" : 0,
  "iterateMillis" : 111679,
  "rows" : 73,
  "error" : null,
  "scannedBytes" : 1397272640009,
  "query" : "with status_change as (\nselect \n\tcast(adv_id as int) as advertiser_id, cast(cand_id as int) as candidate_id, cand_new_status, unixtime\nFROM datalake.imhotep.candStatusChange2\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2017-01-01') AND IMHOTEP_UNIXTIME('today')\nunion distinct \nselect \n\tadvid as advertiser_id, candid as candidate_id, candnewstatus as cand_new_status, unixtime\nfrom datalake.imhotep.dradiscandstatuschange\nwhere unixtime BETWEEN IMHOTEP_UNIXTIME('2017-01-01') AND IMHOTEP_UNIXTIME('today')\n)\n,hires as (\nselect from_unixtime(unixtime) as hire_timestamp, advertiser_id, candidate_id, cand_new_status \nfrom status_change \nwhere cand_new_status = 'Hired'\n\tand unixtime BETWEEN IMHOTEP_UNIXTIME('2019-01-01') AND IMHOTEP_UNIXTIME('today')\n)\n\n,job_id_mapping AS (\nSELECT a.advertiser_id\n          ,a.candidate_id\n          ,MAX(a.candidate_account_id) AS accountid\n          ,MAX(a.agg_job_id) AS agg_job_id\n          ,MAX(a.ats_job_id) AS ats_job_id\n          ,MAX(a.indeed_apply_ctk) AS indeed_apply_ctk\n          ,MAX(a.apply_id) AS apply_id\n          ,MAX(a.date_created) AS indeed_apply_timestamp\n    FROM datalake.imhotep.candidate_apply AS a\n    INNER JOIN hires AS b\n    ON a.advertiser_id = b.advertiser_id\n    AND a.candidate_id = b.candidate_id\n    where unixtime BETWEEN IMHOTEP_UNIXTIME('2017-01-01') AND IMHOTEP_UNIXTIME('today')\n    GROUP BY 1, 2\n)\n\n,view as (\nselect \n  csc.advertiser_id, \n  csc.candidate_id, \n  min(hire_timestamp) as hire_timestamp,\n  min(job_id_mapping.indeed_apply_timestamp) as indeed_apply_timestamp, \n  min(case when csc.cand_new_status = 'Interviewed' then FROM_UNIXTIME(csc.unixtime) end) as interview_timestamp,\n  min(case when csc.cand_new_status = 'Reviewed' then FROM_UNIXTIME(csc.unixtime) end) as reviewed_timestamp,\n  min(case when csc.cand_new_status = 'Phone Screened' then FROM_UNIXTIME(csc.unixtime) end) as phone_screen_timestamp,\n  MAX(accountid) AS accountid,\n  MAX(agg_job_id) AS agg_job_id,\n  MAX(ats_job_id) AS ats_job_id,\n  MAX(indeed_apply_ctk) AS indeed_apply_ctk,\n  MAX(apply_id) AS apply_id\nfrom status_change as csc\njoin hires on hires.advertiser_id = cast(csc.advertiser_id as int) and hires.candidate_id = cast(csc.candidate_id as int) and csc.cand_new_status != 'Hired'\njoin job_id_mapping on job_id_mapping.advertiser_id = cast(csc.advertiser_id as int) and job_id_mapping.candidate_id = cast(csc.candidate_id as int)\ngroup by 1,2\n)\nselect \n\tdate_trunc('month', hire_timestamp)\tas month,\n    COUNT(*) AS hires,\n    avg(date_diff('day', indeed_apply_timestamp, phone_screen_timestamp)) as time_to_contacting,\n    sum(Case when phone_screen_timestamp is not null then 1 else 0 end) as hires_w_contacting,\n    avg(date_diff('day', indeed_apply_timestamp, hire_timestamp)) as time_to_hire,\n    avg(date_diff('day', indeed_apply_timestamp, reviewed_timestamp)) as time_to_review,\n    avg(date_diff('day', reviewed_timestamp, hire_timestamp)) as time_review_to_hire\nfrom view\ngroup by 1\norder by 1 ",
  "queryTables" : [ "datalakehive.imhotep.candidate_apply", "datalakehive.imhotep.candstatuschange2", "datalakehive.imhotep.candstatuschange2", "datalakehive.imhotep.candstatuschange2", "datalakehive.imhotep.dradiscandstatuschange", "datalakehive.imhotep.dradiscandstatuschange", "datalakehive.imhotep.dradiscandstatuschange" ],
  "queryIndex" : 333,
  "runStartToQueryComplete" : 2283
}, {
  "elapsedMillis" : 11097,
  "totalScheduledMillis" : 5823511,
  "cpuMillis" : 1002213,
  "queuedMillis" : 0,
  "executeMillis" : 7039,
  "getResultMillis" : 0,
  "iterateMillis" : 6235,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 30500763420,
  "query" : "WITH scalablesegmenthomepageimpression_ AS (\n  SELECT accountid\n         ,agg_job_id \n         ,qual_attributes_job_js_overlap_positive_count\n         ,qual_job_attributes_count\n         ,'scalablesegmenthomepageimpression' AS source\n  FROM datalake.imhotep.scalablesegmenthomepageimpression\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-10-02') AND IMHOTEP_UNIXTIME('2024-10-03')\n  AND qual_attributes_job_js_overlap_positive_count > 0\n  AND  qual_job_attributes_count > 0 \n  GROUP BY 1, 2, 3, 4\n)\n\nSELECT a.account_id\n       ,a.job_id\n       ,a.overlappingjobandjsqualifications AS cnt_overlapping_quals_mce\n       ,b.qual_attributes_job_js_overlap_positive_count AS cnt_overlapping_quals_scalableseg\n       ,a.numjobqualifications AS cnt_job_quals_mce\n       ,b.qual_job_attributes_count AS cnt_job_quals_scalableseg\nFROM datalake.imhotep.mce_evaluation AS a \nINNER JOIN scalablesegmenthomepageimpression_ AS b\nON a.account_id = b.accountid \nAND a.job_id = b.agg_job_id\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-10-02') AND IMHOTEP_UNIXTIME('2024-10-03')\nAND a.overlappingjobandjsqualifications != b.qual_attributes_job_js_overlap_positive_count \nAND a.numjobqualifications != b.qual_job_attributes_count\nLIMIT 10 ",
  "queryTables" : [ "datalakehive.imhotep.mce_evaluation", "datalakehive.imhotep.scalablesegmenthomepageimpression" ],
  "queryIndex" : 334,
  "runStartToQueryComplete" : 2196
}, {
  "elapsedMillis" : 1392,
  "totalScheduledMillis" : 314908,
  "cpuMillis" : 9318,
  "queuedMillis" : 0,
  "executeMillis" : 637,
  "getResultMillis" : 0,
  "iterateMillis" : 1241,
  "rows" : 100000,
  "error" : null,
  "scannedBytes" : 36431952,
  "query" : "SELECT\n    acctid,\n    'JsdpMultiResumeBootstrap' AS backfillPrefix\nFROM datalake.jssdi.profile_snapshot\nWHERE\n    \"day\" = '2024-10-11'\nLIMIT 100000",
  "queryTables" : [ "datalakehive.jssdi.profile_snapshot" ],
  "queryIndex" : 335,
  "runStartToQueryComplete" : 2187
}, {
  "elapsedMillis" : 51383,
  "totalScheduledMillis" : 131907990,
  "cpuMillis" : 38497629,
  "queuedMillis" : 0,
  "executeMillis" : 5160,
  "getResultMillis" : 0,
  "iterateMillis" : 46278,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 953165391908,
  "query" : "WITH\n\tverified_accounts AS (\n    \tSELECT \n        \taccountid\n        FROM imhotep.passdailysnapshot \n        WHERE \n        \tday = '2024-09-01' -- date_format(date_add('day', -1, CURRENT_DATE), '%Y-%m-%d')\n            AND verified = 1\n            AND deleted != 1\n    ),\n    profiles AS (\n    \tSELECT \n        \tacctid AS accountid\n            , coalesce(try(resumes[1].locale), '') AS resume_locale\n            , CAST(\n            \tROW(\n                \tcoalesce(try(regexp_replace(trim(resumes[1].location.city), '\\s+', ' ')), '')\n            \t\t, coalesce(try(resumes[1].location.admin1), '')\n            \t\t, coalesce(try(resumes[1].location.admin2), '')\n                    , coalesce(try(resumes[1].location.country), ''))\n                AS ROW(\n                \tcity varchar\n                    , admin1 varchar\n                    , admin2 varchar\n                    , country varchar)) AS resume_location\n            , coalesce(try(regexp_replace(lower(trim(resumes[1].workexperience[1].title)), '\\s+', ' ')), '') AS resume_most_recent_title\n            , coalesce(try(regexp_replace(lower(trim(resumes[1].workexperience[1].normalizedtitle)), '\\s+', ' ')), '') AS resume_most_recent_normalized_title\n \n            , CAST(\n            \tROW(\n                \tcoalesce(try(regexp_replace(trim(defaultinfo.contactinformation.location.city), '\\s+', ' ')), '')\n            \t\t, coalesce(try(defaultinfo.contactinformation.location.admin1), '')\n            \t\t, coalesce(try(defaultinfo.contactinformation.location.admin2), '')\n                    , coalesce(try(defaultinfo.contactinformation.location.country), ''))\n                AS ROW(\n                \tcity varchar\n                    , admin1 varchar\n                    , admin2 varchar\n                    , country varchar)) AS profile_location\n \t\t\t, coalesce(try(\n            \tflatten(filter(\n                    transform(\n                        map_values(normalizeddata['User'].preferences)\n                        , p -> coalesce(try(\n                        \tfilter(\n                            \ttransform(\n                                \tfilter(\n                                \t\tmap_values(p.titles) \n                                \t\t, x -> x.sentiment = 'POSITIVE')\n                                    , x -> coalesce(regexp_replace(lower(trim(x.title)), '\\s+', ' '), ''))\n                                , x -> x != ''))\n                            , ARRAY[]))\n                    , x -> x IS NOT NULL))[1])\n                , '') AS profile_desired_title\n            /*\n            , coalesce(try(\n            \tflatten(filter(\n                    transform(\n                        map_values(normalizeddata['User'].preferences)\n                        , p -> coalesce(try(\n                        \tfilter(\n                            \ttransform(\n                                \tfilter(\n                                \t\tmap_values(p.locations) \n                                \t\t, x -> x.sentiment = 'POSITIVE')\n                                    , x -> ARRAY[\n                                    \tcoalesce(try(regexp_replace(trim(x.location.city), '\\s+', ' ')), '')\n                                        , coalesce(try(x.location.admin1), '')\n                                        , coalesce(try(x.location.country), '')])\n                                , loc -> any_match(loc, x -> x != '')))\n                            , ARRAY[]))\n                    , x -> x IS NOT NULL)))\n                , ARRAY[]) AS profile_reloc_locations\n            */\n        FROM jssdi.profile_snapshot\n        WHERE \n        \tday = '2024-09-01' --date_format(date_add('day', -1, CURRENT_DATE), '%Y-%m-%d')\n            AND (\n            \t-- cardinality(resumes) = 0\n            \t-- OR (\n                \tcardinality(resumes) = 1\n                    AND resumes[1].resumetype IN ('INDEED_RESUME', 'PARSED')\n                    AND resumes[1].state IN ('PUBLIC', 'HIDDEN')\n                    AND resumes[1].datecreated > 0\n                    AND resumes[1].datemodified > 0\n                    AND resumes[1].location.country = 'US'\n                    AND resumes[1].locale = 'en_US'\n                -- )\n             )\n    ),\n    profile_summary AS (\n        SELECT\n            p.accountid AS profile_accountid \n            , v.accountid AS verified_accountid\n            , IF(profile_desired_title != ''\n                , profile_desired_title\n                , resume_most_recent_normalized_title) AS best_title\n            , CASE\n            \tWHEN (resume_location.city != '' OR resume_location.admin2 != '')\n            \t\t\tAND resume_location.admin1 != '' \n                \t\tAND resume_location.country = 'US' THEN\n                \tresume_location\n                WHEN (profile_location.city != '' OR profile_location.admin2 != '')\n            \t\t\tAND profile_location.admin1 != '' \n                \t\tAND profile_location.country = 'US' THEN\n                \tprofile_location\n                ELSE\n                    NULL\n            END AS best_location\n        FROM \n        \tprofiles p\n            JOIN verified_accounts v ON (p.accountid = v.accountid)\n    ),\n    clicks AS (\n      SELECT acctid as accountid, jobid, sponsored as is_sponsored_click\n      FROM datalake.imhotep.clickanalytics\n      WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2023-09-01') AND IMHOTEP_UNIXTIME('2024-09-01') AND acctid is not null\n      LIMIT 1000\n\t)\n    SELECT\n    profile_accountid\n\t, best_title\n    , best_location.city\n    , best_location.admin1\n    , best_location.admin2\n    , jobid\n    , is_sponsored_click\nFROM \n\tprofile_summary p JOIN clicks c on p.profile_accountid = c.accountid\nWHERE \n    \n    best_location IS NOT NULL\nGROUP BY 1, 2, 3, 4, 5, 6, 7\nORDER BY 1 DESC limit 10\n",
  "queryTables" : [ "datalakehive.imhotep.clickanalytics", "skipperhive.imhotep.passdailysnapshot", "skipperhive.jssdi.profile_snapshot" ],
  "queryIndex" : 336,
  "runStartToQueryComplete" : 2282
}, {
  "elapsedMillis" : 1834,
  "totalScheduledMillis" : 765,
  "cpuMillis" : 150,
  "queuedMillis" : 0,
  "executeMillis" : 865,
  "getResultMillis" : 0,
  "iterateMillis" : 995,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 15157758,
  "query" : "SELECT *\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 337,
  "runStartToQueryComplete" : 2251
}, {
  "elapsedMillis" : 1565,
  "totalScheduledMillis" : 67961,
  "cpuMillis" : 10549,
  "queuedMillis" : 0,
  "executeMillis" : 769,
  "getResultMillis" : 0,
  "iterateMillis" : 1325,
  "rows" : 1000,
  "error" : null,
  "scannedBytes" : 287162359,
  "query" : "SELECT \n\tline_item_resource_id,\n\telement_at(resource_tags, 'aws_eks_deployment') AS ws_eks_deployment,\n\telement_at(resource_tags, 'aws_eks_namespace') AS aws_eks_namespace,\n\telement_at(resource_tags, 'aws_eks_node') AS aws_eks_node,\n\telement_at(resource_tags, 'aws_eks_workload_name') AS aws_eks_workload_name,\n\telement_at(resource_tags, 'aws_eks_workload_type') AS aws_eks_workload_type\nFROM datalake.cloudcost_qa.aws_container_cost\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-09-01') AND IMHOTEP_UNIXTIME('2024-09-14')\nand element_at(resource_tags, 'aws_eks_deployment') != ''\nand element_at(resource_tags, 'aws_eks_namespace') != ''\nand element_at(resource_tags, 'aws_eks_node') != ''\nand element_at(resource_tags, 'aws_eks_workload_name') != ''\nand element_at(resource_tags, 'aws_eks_workload_type') != ''\nLIMIT 1000\n",
  "queryTables" : [ "datalakehive.cloudcost_qa.aws_container_cost" ],
  "queryIndex" : 338,
  "runStartToQueryComplete" : 2258
}, {
  "elapsedMillis" : 1526,
  "totalScheduledMillis" : 570,
  "cpuMillis" : 150,
  "queuedMillis" : 0,
  "executeMillis" : 717,
  "getResultMillis" : 0,
  "iterateMillis" : 824,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 15157758,
  "query" : "SELECT *\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 339,
  "runStartToQueryComplete" : 2262
}, {
  "elapsedMillis" : 4868,
  "totalScheduledMillis" : 4161458,
  "cpuMillis" : 399838,
  "queuedMillis" : 0,
  "executeMillis" : 1345,
  "getResultMillis" : 0,
  "iterateMillis" : 3547,
  "rows" : 500,
  "error" : null,
  "scannedBytes" : 19513925571,
  "query" : "with examples as (\nSELECT\n\t\tmoderationtext,\n        flagged,\n        flaggedcategories,\n        flaggedwords,\n \t\tappName,\n        moderationApi, \n        moderationType,\n        FROM_UNIXTIME(unixtime) as request_date,\n        requestid       \nFROM\n      \tdatalake.imhotep.llmproxy lp -- switching to imhotep for speed even though there is a 1D data lag\n        --logrepo.log.llm_proxy lp\n    WHERE\n    \tflagged = '1'\n        and lp.metric = 'moderation-text'\n        and unixtime > imhotep_unixtime(DATE(CURRENT_DATE) - interval '4' day)\n        and ('ContentGenerationService' = '' or appName='ContentGenerationService')\n        and ('openAIModerations' = '' or moderationApi='openAIModerations')\n        and ('input' = '' or moderationType='input')\nlimit 500\n)\n\nSELECT\n        m.*,\n        r.model,\n        r.moderationHeader,\n        r.locale        \nFROM datalake.imhotep.llmproxy r\n        join examples m on m.requestid = r.requestid -- switching to imhotep for speed even though there is a 1D data lag\n    WHERE\n        r.unixtime > imhotep_unixtime(DATE(CURRENT_DATE) - interval '4' day)\n        and r.metric = 'llm-proxy'",
  "queryTables" : [ "datalakehive.imhotep.llmproxy", "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 340,
  "runStartToQueryComplete" : 2272
}, {
  "elapsedMillis" : 739,
  "totalScheduledMillis" : 37,
  "cpuMillis" : 4,
  "queuedMillis" : 0,
  "executeMillis" : 694,
  "getResultMillis" : 0,
  "iterateMillis" : 83,
  "rows" : 3892,
  "error" : null,
  "scannedBytes" : 33704,
  "query" : "SELECT *\nFROM llmExplainerEvaluationLog\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME(now())\n",
  "queryTables" : [ "skipperhive.imhotep.llmexplainerevaluationlog" ],
  "queryIndex" : 341,
  "runStartToQueryComplete" : 2269
}, {
  "elapsedMillis" : 771,
  "totalScheduledMillis" : 50,
  "cpuMillis" : 2,
  "queuedMillis" : 0,
  "executeMillis" : 719,
  "getResultMillis" : 0,
  "iterateMillis" : 62,
  "rows" : 2,
  "error" : null,
  "scannedBytes" : 6493,
  "query" : "SELECT *\nFROM llmExplainerEvaluationRunLog\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME(now())\n",
  "queryTables" : [ "skipperhive.imhotep.llmexplainerevaluationrunlog" ],
  "queryIndex" : 342,
  "runStartToQueryComplete" : 2272
}, {
  "elapsedMillis" : 8025,
  "totalScheduledMillis" : 144431,
  "cpuMillis" : 47749,
  "queuedMillis" : 0,
  "executeMillis" : 4857,
  "getResultMillis" : 0,
  "iterateMillis" : 3197,
  "rows" : 240,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing')\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '')\nORDER BY date, t0, t1, t2 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 343,
  "runStartToQueryComplete" : 2280
}, {
  "elapsedMillis" : 7033,
  "totalScheduledMillis" : 90421,
  "cpuMillis" : 35709,
  "queuedMillis" : 0,
  "executeMillis" : 4412,
  "getResultMillis" : 0,
  "iterateMillis" : 2652,
  "rows" : 30,
  "error" : null,
  "scannedBytes" : 1033508724,
  "query" : "WITH sub1 as (\n    SELECT\n    \tDATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d') as date,\n        tw.tier_0 AS t0,\n        tw.tier_1 AS t1,\n        tw.tier_2 AS t2,\n        tw.tier_3 AS t3,\n        COUNT(CASE WHEN\n        \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND \n            (\n              (\n                  ji.priority = 'Blocker' AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 30\n              ) OR (\n              \t  -- Fallback to capture Critical and all other issues until bot updates to prevent data gaps \n                  ji.priority NOT IN ('Blocker') AND\n                  -- ji.resolutiontimestamp > 0 AND\n                  -- last 30 days\n                  (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 AND\n                  -- SLO days to complete\n                  (TRY_CAST(ji.resolutiontimestamp AS BIGINT) - TRY_CAST(ji.createtimestamp AS BIGINT)) / 86400000 <= 90\n              )\n            ) THEN 1 END\n        ) AS REM_30,\n        COUNT(\n        \tCASE WHEN\n            \tji.status IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release') AND\n            \t-- ji.resolutiontimestamp > 0 AND\n                (ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30\n                THEN 1 END\n        ) AS ALL_REM_30,\n        COUNT(\n        \tCASE WHEN\n            \t(\n                    ji.status NOT IN ('Closed', 'Done', 'Pending Code Cleanup', 'Pending Closure', 'Pending Analysis', 'Test Paused', 'Test in Progress', 'Pending Prod Release')\n            \t    -- OR ji.resolutiontimestamp = 0\n                ) AND (\n                \t(\n                    \tji.priority = 'Blocker' AND\n                        -- SLO days to complete\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 30\n                    ) OR (\n                    \t-- SLO days to complete\n                    \tji.priority NOT IN ('Blocker') AND\n                \t\t(ji.unixtime - (TRY_CAST(ji.createtimestamp AS BIGINT) / 1000)) / 86400 > 90\n                    )\n                )\n                THEN 1 END\n        ) AS UNREM\n    FROM datalake.imhotep.jiracloudissues AS ji\n    JOIN datalake.imhotep.ownershipSnapshot AS ow ON ji.projectkey = ow.key AND ji.day = ow.day\n    JOIN datalake.imhotep.teamwrksSnapshot AS tw ON ow.accountablePartyId = tw.teamId AND tw.day = ow.day\n    WHERE\n        ji.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        ow.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        tw.unixtime BETWEEN IMHOTEP_UNIXTIME('30d') AND IMHOTEP_UNIXTIME('today') AND\n        CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y') AND\n        NOT CONTAINS(TRANSFORM(ji.labelstok, s -> LOWER(s)), 'a11y-exemption') AND\n        -- ((ji.unixtime - (TRY_CAST(ji.resolutiontimestamp AS BIGINT) / 1000)) / 86400 <= 30 OR ji.resolutiontimestamp = 0) AND\n        ji.projectkey NOT IN  ('QL', 'A11Y', 'PIED', 'HIGHLANDER', 'JSA11Y', 'EMPA11Y', 'FIM', 'DSYNC', 'CHUBSERV', 'CHUBUI', 'COMMSHUB', 'CHUBSEND') AND\n        ji.issuetype = 'Bug' AND\n        LOWER(tw.tier_1) NOT IN ('global revenue', 'marketing') AND\n\t\ttw.tier_3 != 'Unspecified'\n    GROUP BY DATE_FORMAT(FROM_UNIXTIME(ji.unixtime), '%Y-%m-%d'), tw.tier_0, tw.tier_1, tw.tier_2, tw.tier_3\n)\n\nSELECT\n\tdate,\n    t0,\n    t1,\n    t2,\n    t3,\n    CASE\n    \tWHEN ALL_REM_30 IS NULL OR (ALL_REM_30 + UNREM = 0) THEN 100\n        ELSE ROUND((CAST(REM_30 AS DECIMAL(10, 2)) / (CAST(ALL_REM_30 AS DECIMAL(10, 2)) + CAST(UNREM AS DECIMAL(10, 2)))) * 100, 2)\n    END AS SLO_Score,\n    REM_30 AS Within_SLO,\n    ALL_REM_30 AS Remediated_Last_30,\n    UNREM AS Open_Outside_SLO\nFROM sub1\nWHERE\n\t(t0 = 'Indeed') AND\n    (''='' OR t1 = '') AND\n    (''='' OR t2 = '') AND\n    ('Design Systems'='' OR t3 = 'Design Systems')\nORDER BY date, t0, t1, t2, t3 ASC",
  "queryTables" : [ "datalakehive.imhotep.jiracloudissues", "datalakehive.imhotep.ownershipsnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 344,
  "runStartToQueryComplete" : 2280
}, {
  "elapsedMillis" : 3015,
  "totalScheduledMillis" : 441259,
  "cpuMillis" : 154913,
  "queuedMillis" : 0,
  "executeMillis" : 1922,
  "getResultMillis" : 0,
  "iterateMillis" : 1126,
  "rows" : 5167,
  "error" : null,
  "scannedBytes" : 640072471,
  "query" : "/*Username: kmcneany@indeed.com*/ \nwith tier_info as\n\n(\nSELECT\n    \tcast(from_unixtime(unixtime,'Etc/GMT+6') as date) as date\n    \t, applicationid\n\t\t, criticalitytier\n        , teamid\n        , ROW_NUMBER() OVER (PARTITION BY applicationid\n\t\t\tORDER BY cast(from_unixtime(unixtime,'Etc/GMT+6') AS date) desc, applicationid) AS row_num\n\tFROM datalake.imhotep_iceberg.serviceregistrysnapshots srs\n\tWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('3mo') AND IMHOTEP_UNIXTIME('1d')\n\tGROUP BY 1,2,3,4\n),\n\nlatest_tier_info AS\n\n(\n\tSELECT\n    \tapplicationid\n\t\t, criticalitytier \n        , teamid\n    FROM tier_info\n    WHERE row_num = 1\n),\n\nteam_info AS (\n\nSELECT\n    \tcast(from_unixtime(unixtime,'Etc/GMT+6') as date) as date\n    \t, teamid\n\t\t, tier_1_team_id\n\t\t, tier_2_team_id\n        , ROW_NUMBER() OVER (PARTITION BY teamid\n\t\t\tORDER BY cast(from_unixtime(unixtime,'Etc/GMT+6') AS date) desc, tier_1_team_id, tier_2_team_id) AS row_num\n\tFROM datalake.imhotep_iceberg.teamwrkssnapshot\n\tWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('3mo') AND IMHOTEP_UNIXTIME('1d')\n\tGROUP BY 1,2,3,4\n),\n\nlatest_team_info AS (\n\tSELECT\n    \tteamid\n\t\t, tier_1_team_id\n\t\t, tier_2_team_id\n    FROM team_info\n    WHERE row_num = 1\n),\n\nkube_costs AS \n\n(\n\tSELECT \n        service,\n        max(application_id) as application_id\n\tFROM datalake.cloudcost_iceberg.kubecost_costandusage\n\tWHERE \n    \tunixtime BETWEEN IMHOTEP_UNIXTIME('3mo') AND IMHOTEP_UNIXTIME('1d')\n\t\tAND usage_type = 'cpu core' \n        and service <> ''\n\tGROUP BY 1\n)\n\nSELECT\n\tkc.service,\n    kc.application_id,\n    ltier.teamid,\n\tlteam.tier_1_team_id,\n    lteam.tier_2_team_id,\n\tltier.criticalitytier as current_ct\n\nFROM kube_costs AS kc\nLEFT JOIN latest_tier_info as ltier\n\ton kc.application_id = ltier.applicationid\nLEFT JOIN latest_team_info AS lteam\n\tON ltier.teamid = lteam.teamid\n    \n",
  "queryTables" : [ "datalake.cloudcost_iceberg.kubecost_costandusage", "datalake.imhotep_iceberg.serviceregistrysnapshots", "datalake.imhotep_iceberg.teamwrkssnapshot" ],
  "queryIndex" : 345,
  "runStartToQueryComplete" : 2283
}, {
  "elapsedMillis" : 5994,
  "totalScheduledMillis" : 2110,
  "cpuMillis" : 1130,
  "queuedMillis" : 0,
  "executeMillis" : 3880,
  "getResultMillis" : 0,
  "iterateMillis" : 2126,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 826077,
  "query" : "SELECT\n    cast(json_extract(element_at(cast(json_parse(chatmessages) as array<JSON>),\n    cardinality(cast(json_parse(chatmessages) as array<JSON>)) - 1), '$.content') as varchar) as job_description,\n    cast(json_extract(element_at(cast(json_parse(chatmessages) as array<JSON>),\n    cardinality(cast(json_parse(chatmessages) as array<JSON>))), '$.content') as varchar) as jobseeker_resume,\n    rawContent as generated_introduction\nFROM logrepo.log.GeneratedContentLog\nWHERE uid='1i53178bs37nf001'",
  "queryTables" : [ "logrepo.log.generatedcontentlog" ],
  "queryIndex" : 346,
  "runStartToQueryComplete" : 2290
}, {
  "elapsedMillis" : 1300,
  "totalScheduledMillis" : 320,
  "cpuMillis" : 95,
  "queuedMillis" : 0,
  "executeMillis" : 840,
  "getResultMillis" : 0,
  "iterateMillis" : 471,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 15157758,
  "query" : "SELECT *\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 347,
  "runStartToQueryComplete" : 2306
}, {
  "elapsedMillis" : 2946,
  "totalScheduledMillis" : 1626322,
  "cpuMillis" : 334292,
  "queuedMillis" : 0,
  "executeMillis" : 796,
  "getResultMillis" : 0,
  "iterateMillis" : 2168,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 28958604369,
  "query" : "SELECT\n\t\t\n\t\tmoderationtext,\n        flagged,\n        flaggedcategories,\n        flaggedwords,\n \t\tappName,\n        moderationApi, \n        moderationType, \n   \t\tmodel,\n        moderationHeader,\n        locale,               \n        metric,\n        FROM_UNIXTIME(unixtime) as request_date,\n        requestid\nFROM\n      \tdatalake.imhotep.llmproxy lp\n    WHERE\n    \trequestid = '0f7ae361-eeda-45db-90bb-26540b984598'\n        and unixtime > imhotep_unixtime(DATE(CURRENT_DATE) - interval '4' day)\nlimit 50\n",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 348,
  "runStartToQueryComplete" : 2308
}, {
  "elapsedMillis" : 4379,
  "totalScheduledMillis" : 9607981,
  "cpuMillis" : 2564234,
  "queuedMillis" : 0,
  "executeMillis" : 898,
  "getResultMillis" : 0,
  "iterateMillis" : 3497,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 101470609755,
  "query" : "SELECT COUNT_IF(ctk IS NULL OR ctk = '') * 1.00 / COUNT() AS empty_ctk_ratio\nFROM datalake.cloudflare_logs.http\nWHERE timestamp BETWEEN timestamp '2024-10-25 10:00' AND timestamp '2024-10-25 11:00'\nAND securityruleid='1e8af07db9614e64ae9403220f6fa2d8'\nAND securityaction!='managedChallenge'\n",
  "queryTables" : [ "datalake.cloudflare_logs.http" ],
  "queryIndex" : 349,
  "runStartToQueryComplete" : 2318
}, {
  "elapsedMillis" : 6334,
  "totalScheduledMillis" : 6575950,
  "cpuMillis" : 2009384,
  "queuedMillis" : 0,
  "executeMillis" : 303,
  "getResultMillis" : 0,
  "iterateMillis" : 6044,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 101470609755,
  "query" : "SELECT COUNT_IF(clientrequestreferer IS NULL OR clientrequestreferer = '') * 1.00 / COUNT() AS empty_referer_ratio\nFROM datalake.cloudflare_logs.http\nWHERE timestamp BETWEEN timestamp '2024-10-25 10:00' AND timestamp '2024-10-25 11:00'\nAND securityruleid='1e8af07db9614e64ae9403220f6fa2d8'\nAND securityaction!='managedChallenge'\n",
  "queryTables" : [ "datalake.cloudflare_logs.http" ],
  "queryIndex" : 350,
  "runStartToQueryComplete" : 2322
}, {
  "elapsedMillis" : 14624,
  "totalScheduledMillis" : 3923114,
  "cpuMillis" : 1438909,
  "queuedMillis" : 0,
  "executeMillis" : 5631,
  "getResultMillis" : 0,
  "iterateMillis" : 9039,
  "rows" : 669185,
  "error" : null,
  "scannedBytes" : 8411008013,
  "query" : "with app_status as(SELECT ats,apply_id, disposition_status, max(unixtime) as unixtime\nFROM signal_back_disposition a\nWHERE \n  -- remove apply_id that existed before july\n  NOT EXISTS (\n      SELECT apply_id\n      FROM signal_back_disposition b\n      WHERE unixtime between imhotep_unixtime('2024-01-01') and imhotep_unixtime('2024-07-01')\n        AND a.apply_id=b.apply_id\n  )\n  -- limit to new apply_id from july\n  AND EXISTS (\n      SELECT apply_id\n      FROM signal_back_disposition c\n      WHERE unixtime between imhotep_unixtime('2024-07-01') and imhotep_unixtime('2024-08-01')\n        AND a.apply_id=c.apply_id\nlimit 5000\n  )\n  AND unixtime between imhotep_unixtime('2024-07-01') and imhotep_unixtime('today')\n  \n  GROUP BY 1,2,3\n)\n,max_times as (\nSELECT ats\n, apply_id\n, disposition_status\n, unixtime\n, ROW_NUMBER() OVER(PARTITION BY apply_id ORDER BY unixtime ASC) as status_number\n, COUNT(*) OVER(PARTITION BY apply_id) as total_signals_for_apply\nFROM app_status)\n\nSELECT apply_id, total_signals_for_apply, status_number, FROM_UNIXTIME(unixtime) as disposition_date, disposition_status\nFROM max_times\nWHERE ats='ukg-prodd'\nAND total_signals_for_apply=1 AND disposition_status='NEW'\nORDER BY 1,3\n",
  "queryTables" : [ "skipperhive.imhotep.signal_back_disposition", "skipperhive.imhotep.signal_back_disposition", "skipperhive.imhotep.signal_back_disposition" ],
  "queryIndex" : 351,
  "runStartToQueryComplete" : 2362
}, {
  "elapsedMillis" : 2126,
  "totalScheduledMillis" : 603,
  "cpuMillis" : 356,
  "queuedMillis" : 0,
  "executeMillis" : 1824,
  "getResultMillis" : 0,
  "iterateMillis" : 327,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 7497088,
  "query" : "--MW 20240721\n\nSELECT proctor.test_name, \n  proctor.experiment_owner_id as owner,\n  proctor.metadata_test_purpose as test_purpose,\n  MAX( CASE WHEN proctor.days_since_silent > 0 OR proctor.definition_allocation_live_bucket_count = 0\n     THEN 0 ELSE 1 END )  as incurs_logging_cost,\n  MAX(days_since_test_update) as days_since_test_update\nFROM datalake.imhotep.proctor_daily_snapshot as proctor\nWHERE proctor.environment = 'production'\n  AND proctor.unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n  AND days_since_test_update >= 0\n  AND proctor.experiment_owner_id in (\n      SELECT teamId \n      FROM datalake.imhotep.teamwrksSnapshot       \n      WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today') \n      AND tier_5 = 'Automation Platform & Exp'\n      AND ('interop-jc-automation' = '' OR teamId = 'interop-jc-automation')\n    )\nGROUP BY 1,2,3\nORDER BY incurs_logging_cost DESC, days_since_test_update DESC, owner",
  "queryTables" : [ "datalakehive.imhotep.proctor_daily_snapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 352,
  "runStartToQueryComplete" : 2361
}, {
  "elapsedMillis" : 1486,
  "totalScheduledMillis" : 508,
  "cpuMillis" : 143,
  "queuedMillis" : 0,
  "executeMillis" : 1183,
  "getResultMillis" : 0,
  "iterateMillis" : 317,
  "rows" : 19,
  "error" : null,
  "scannedBytes" : 708524,
  "query" : "--MW 20240721\n-- Helper query to find your team ids of interest e.g. 'Hiring Events','Wayfinder' ('Hiring Events','Wayfinder' may be left as empty list of \"\") \nSELECT teamId, tier_6 AS team_name, tier_5 AS parent\nFROM datalake.imhotep.teamwrksSnapshot \nWHERE 1=1\n\tAND unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today') \n    AND tier_5 = 'Automation Platform & Exp'\nUNION ALL \nSELECT teamId, tier_4 AS team_name, tier_2 AS parent\nFROM datalake.imhotep.teamwrksSnapshot \nWHERE 1=1\n\tAND unixtime BETWEEN IMHOTEP_UNIXTIME('2024-03-01') AND IMHOTEP_UNIXTIME('2024-03-02') \n    AND tier_2 IN ('Hiring Events','Wayfinder')\n\tAND tier = 'T4'\nORDER BY parent",
  "queryTables" : [ "datalakehive.imhotep.teamwrkssnapshot", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 353,
  "runStartToQueryComplete" : 2360
}, {
  "elapsedMillis" : 1592,
  "totalScheduledMillis" : 5173,
  "cpuMillis" : 1047,
  "queuedMillis" : 0,
  "executeMillis" : 1478,
  "getResultMillis" : 0,
  "iterateMillis" : 135,
  "rows" : 3451,
  "error" : null,
  "scannedBytes" : 28264070,
  "query" : "SELECT\n\tcase when exception like '%No Partition%' then 'No Partition Found' else exception end exceptions,\n    count(1)\nFROM datalake.imhotep.datalakeintakeevent\nWHERE \n\tunixtime BETWEEN IMHOTEP_UNIXTIME('7d') AND IMHOTEP_UNIXTIME('today')\n    and isproviderdataerror = '1'\ngroup by 1",
  "queryTables" : [ "datalakehive.imhotep.datalakeintakeevent" ],
  "queryIndex" : 354,
  "runStartToQueryComplete" : 2403
}, {
  "elapsedMillis" : 920,
  "totalScheduledMillis" : 1517,
  "cpuMillis" : 305,
  "queuedMillis" : 0,
  "executeMillis" : 459,
  "getResultMillis" : 0,
  "iterateMillis" : 473,
  "rows" : 177,
  "error" : null,
  "scannedBytes" : 16033,
  "query" : "describe datalake.imhotep.jobactivitymetrics",
  "queryTables" : [ "datalakehive.information_schema.columns" ],
  "queryIndex" : 355,
  "runStartToQueryComplete" : 2433
}, {
  "elapsedMillis" : 2655,
  "totalScheduledMillis" : 2932684,
  "cpuMillis" : 435934,
  "queuedMillis" : 0,
  "executeMillis" : 881,
  "getResultMillis" : 0,
  "iterateMillis" : 1791,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 30861950197,
  "query" : "SELECT\n\t\tpath,\n        method,\n        status,\n\t\tmoderationtext,\n        flagged,\n        flaggedcategories,\n        flaggedwords,\n \t\tappName,\n        moderationApi, \n        moderationType, \n   \t\tmodel,\n        moderationHeader,\n        locale,               \n        metric,\n        FROM_UNIXTIME(unixtime) as request_date,\n        requestid,\n        requesttrackingid\nFROM\n      \tdatalake.imhotep.llmproxy lp\n    WHERE\n    \trequestid = '0f7ae361-eeda-45db-90bb-26540b984598'\n        and unixtime > imhotep_unixtime(DATE(CURRENT_DATE) - interval '4' day)\nlimit 50\n",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 356,
  "runStartToQueryComplete" : 2448
}, {
  "elapsedMillis" : 3371,
  "totalScheduledMillis" : 647161,
  "cpuMillis" : 35333,
  "queuedMillis" : 0,
  "executeMillis" : 2800,
  "getResultMillis" : 0,
  "iterateMillis" : 587,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 3688878986,
  "query" : "select fcc_id, COUNT(*) as unique_visitors\nfrom datalake.glassdoor.unique_visitors\nwhere day between '2023-11-01' and '2024-10-01' and fcc_id in (119783177,119783888)\nGROUP BY fcc_id",
  "queryTables" : [ "datalakehive.glassdoor.unique_visitors" ],
  "queryIndex" : 357,
  "runStartToQueryComplete" : 2469
}, {
  "elapsedMillis" : 118656,
  "totalScheduledMillis" : 2152403,
  "cpuMillis" : 1085158,
  "queuedMillis" : 0,
  "executeMillis" : 3203,
  "getResultMillis" : 0,
  "iterateMillis" : 115463,
  "rows" : 1520,
  "error" : null,
  "scannedBytes" : 17787180566,
  "query" : "WITH \n\ncalendar AS (\n\n    SELECT\n    \tDATE_ADD('day', days, DATE('2023-10-01')) AS snapshot_date, 1 AS tmpJoin\n    FROM\n        (SELECT SEQUENCE(0, 1500) AS d)\n    CROSS JOIN \n    \tUNNEST (d) as t(days)\n    WHERE\n    \tDATE_ADD('day', days, DATE('2023-10-01')) <= CURRENT_DATE\n\n),\n\nengagement_daily AS (\n\n    SELECT\t\n        DATE(activity_time) AS activity_date,\n        advertiser_id,\n        subscription_tier,\n        usage_category,\n        subscription_id,\n        SUM(contact_sent) AS contacts_sent,\n        SUM(positive_response) AS positive_responses\n    FROM \n        datalake.employer_analytics_platform.xpa_fct_sourcing_engagement xpa\n    WHERE \n        activity_time >= DATE('2023-11-01')\n        AND subscription_tier IN ('Standard','Professional')\n        AND is_free_contact = 0\n    GROUP BY 1, 2, 3, 4, 5\n\n)\n\nSELECT \n\tCAST(snapshot_date AS varchar) AS snapshot_date,\n    subscription_tier,\n    usage_category,\n    SUM(contacts_sent) AS contacts_sent,\n    SUM(positive_responses) AS pos_resp,\n    COUNT(DISTINCT advertiser_id) AS num_adv,\n    TRY((SUM(contacts_sent) * 1.0000) / COUNT(DISTINCT advertiser_id)) AS contacts_per_adv,\n    TRY((SUM(contacts_sent) * 1.0000) / COUNT(DISTINCT subscription_id)) AS contacts_per_sub,\n    TRY((SUM(positive_responses) * 1.0000) / SUM(contacts_sent)) AS pos_resp_rate\nFROM \n\tcalendar\nINNER JOIN\n\tengagement_daily\n        \tON engagement_daily.activity_date > DATE_ADD('day', -14, calendar.snapshot_date)\n            AND engagement_daily.activity_date <= calendar.snapshot_date\nWHERE \n\tsnapshot_date >= DATE('2024-01-01')\nGROUP BY 1, 2, 3\nORDER BY 1, 2, 3",
  "queryTables" : [ "datalakehive.employer_analytics_platform.xpa_fct_sourcing_engagement" ],
  "queryIndex" : 358,
  "runStartToQueryComplete" : 2616
}, {
  "elapsedMillis" : 8541,
  "totalScheduledMillis" : 476402,
  "cpuMillis" : 272413,
  "queuedMillis" : 0,
  "executeMillis" : 4959,
  "getResultMillis" : 0,
  "iterateMillis" : 3612,
  "rows" : 725,
  "error" : null,
  "scannedBytes" : 536303500,
  "query" : "WITH \n  q1 AS(\n      SELECT DISTINCT DATE(trial_start_date) AS date\n      FROM datalake.analysis.dim_resume_trial_attribution\n      WHERE trial_start_date BETWEEN DATE('2023-01-01') AND FROM_UNIXTIME(IMHOTEP_UNIXTIME('today'))\n  ),\n  q2 AS(\n      SELECT DISTINCT\n          DATE(trial_start_date) AS date,\n          trial_subscription_id,\n          attributed_subscription_id,\n          attribution_date,\n          DATE_DIFF('day', trial_start_date, attribution_date) AS days_to_convert\n      FROM datalake.analysis.dim_resume_trial_attribution\n      WHERE trial_start_date BETWEEN DATE('2023-01-01') AND FROM_UNIXTIME(IMHOTEP_UNIXTIME('today'))\n  )\nSELECT \n\tq1.date,\n    COUNT(DISTINCT IF(q2.days_to_convert <= 180, q2.attributed_subscription_id, NULL)) / CAST(COUNT(DISTINCT q2.trial_subscription_id) AS double) AS trial_conversion_rate_180d,\n    COUNT(DISTINCT IF(q2.days_to_convert <= 30, q2.attributed_subscription_id, NULL)) / CAST(COUNT(DISTINCT q2.trial_subscription_id) AS double) AS trial_conversion_rate_30d\nFROM\n\tq1, \n    q2\nWHERE \n\tq2.date BETWEEN q1.date - INTERVAL '42' DAY AND q1.date - INTERVAL '14' DAY\nGROUP BY 1\nORDER BY 1",
  "queryTables" : [ "datalakehive.analysis.dim_resume_trial_attribution", "datalakehive.analysis.dim_resume_trial_attribution" ],
  "queryIndex" : 359,
  "runStartToQueryComplete" : 2509
}, {
  "elapsedMillis" : 1054,
  "totalScheduledMillis" : 570,
  "cpuMillis" : 25,
  "queuedMillis" : 1,
  "executeMillis" : 347,
  "getResultMillis" : 0,
  "iterateMillis" : 716,
  "rows" : 100,
  "error" : null,
  "scannedBytes" : 4699038,
  "query" : "select rsvp_accountid,\n       rsvp_status,\n       rsvp_uuid,\n       unixtime,\n       disposition,\n       jobseeker_show_time_delta,\n       employer_show_time_delta,\n       event_client_id\nFROM imhotep.interviewrecord\nWHERE day >= '2022-12-01' AND day < '2022-12-02'\n  and event_client_id IN ('api_events')\nLIMIT 100",
  "queryTables" : [ "skipperhive.imhotep.interviewrecord" ],
  "queryIndex" : 360,
  "runStartToQueryComplete" : 2518
}, {
  "elapsedMillis" : 42153,
  "totalScheduledMillis" : 64549461,
  "cpuMillis" : 13521542,
  "queuedMillis" : 0,
  "executeMillis" : 10591,
  "getResultMillis" : 0,
  "iterateMillis" : 31613,
  "rows" : 2,
  "error" : null,
  "scannedBytes" : 440706149215,
  "query" : "with cjs as (\nSELECT \n    dcr.job_hash,\n    sum(cast(dcr.numhiresMade as int)) as numhiresMade,\n    sum(cast(dcr.numHiresMadeIndeed as int)) as numHiresMadeIndeed,\n    sum(cast(dcr.numHiresMadeExternal as int)) as numHiresMadeExternal\nFROM datalake.imhotep.dradisClosedJobReason as dcr\nWHERE dcr.unixtime BETWEEN IMHOTEP_UNIXTIME('2024-04-01') AND IMHOTEP_UNIXTIME('2024-10-24')\n\tand dcr.numhiresMade> '0'\n    and closedJobReason = 'notIndeed'\ngroup by 1\n)\n,job_id_job_hash_mapping as (\nSELECT \n\tjobhash_underscore, max(agg_job_id) as agg_job_id\nFROM datalake.imhotep.job_id_job_hash_mapping\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-10-23') AND IMHOTEP_UNIXTIME('2024-10-24')\n\tand jobhash_underscore in (select distinct job_hash from cjs)\ngroup by 1 \n)\n,jam as (\nselect \n\tagg_job_id,\n    max(job_product) as job_product,\n    max(job_country_code) as job_country_code,\n    sum(clicks) as clicks,\n    sum(apply_starts) as apply_starts,\n    sum(applies) as applies,\n    max(job_age_since_created) as max_job_age_days\nfrom datalake.imhotep.jobactivitymetrics\nwhere day between '2022-04-01' and 'today'\t\n\tand agg_job_id in (select distinct agg_job_id from job_id_job_hash_mapping)\ngroup by 1 \n)\n\n,view as (\nselect \n\tjob_id_job_hash_mapping.agg_job_id,\n    coalesce(applies,0) as applies,\n    coalesce(apply_starts,0) as apply_starts,\n    coalesce(clicks,0) as clicks,\n    numhiresMade,\n    numHiresMadeIndeed,\n    numHiresMadeExternal,\n    job_product,\n    job_country_code,\n    max_job_age_days\nfrom cjs \njoin job_id_job_hash_mapping on job_id_job_hash_mapping.jobhash_underscore = cjs.job_hash\nleft join jam\n\ton job_id_job_hash_mapping.agg_job_id = jam.agg_job_id\n)\n\nselect \n   case when hs.jobid is not null then 1 else 0 end as reported_internally, \n   sum(view.numhiresMade) as hires,\n   1.00*count(distinct case when view.applies>0 then view.agg_job_id end)/count(distinct view.agg_job_id) as pct_job_w_apply,\n   1.00*count(distinct case when view.applies<10 then view.agg_job_id end)/count(distinct view.agg_job_id) as pct_job_w_lessthan10applies,\n   avg(view.applies) as avg_applies,\n   avg(view.apply_starts) as avg_applystarts,\n   avg(view.clicks) as avg_clicks,\n   avg(max_job_age_days) as avg_job_age\nfrom view \nleft join datalake.imhotep.hiredsignal hs \n\ton hs.unixtime BETWEEN IMHOTEP_UNIXTIME('2022-04-01') AND IMHOTEP_UNIXTIME('2024-10-24') \n    and view.agg_job_id = hs.jobid \ngroup by 1",
  "queryTables" : [ "datalakehive.imhotep.dradisclosedjobreason", "datalakehive.imhotep.dradisclosedjobreason", "datalakehive.imhotep.dradisclosedjobreason", "datalakehive.imhotep.hiredsignal", "datalakehive.imhotep.job_id_job_hash_mapping", "datalakehive.imhotep.job_id_job_hash_mapping", "datalakehive.imhotep.jobactivitymetrics" ],
  "queryIndex" : 361,
  "runStartToQueryComplete" : 2572
}, {
  "elapsedMillis" : 20641,
  "totalScheduledMillis" : 63829931,
  "cpuMillis" : 16464907,
  "queuedMillis" : 0,
  "executeMillis" : 5785,
  "getResultMillis" : 0,
  "iterateMillis" : 15071,
  "rows" : 18,
  "error" : null,
  "scannedBytes" : 295237123885,
  "query" : "with js as (\nselect \n    account_id\n    , sourcing_eligible \n    , has_first_and_last_name_flag\n    , location_geocoded_flag \n    , has_occ_category_suid\n    , has_skills_suid\n    , has_credential_suid\n    , has_min_pay\n    , wordcount_over_50\nfrom (\n    select \n          this_month.account_id \n          , minimally_complete\n          , if(sourcing_eligible, 1, 0) sourcing_eligible\n          \n          --First and last name are filled out\n          , case when (has_resume_first_name and has_resume_last_name) then 1 else 0 end as has_first_and_last_name_flag\n          \n          -- Location is geocoded to city, postal, or address precision\n          --   , case when resume_location_geocode_precision like 'POSTAL' or resume_location_geocode_precision like 'ADDRESS' then 1 else 0 end as location_geocoded_flag\n          , case when if(resume_location_geocode_precision in ('POSTAL', 'ADDRESS'), 1, 0)\n                    + if(profile_location_geocode_precision in ('POSTAL', 'ADDRESS'), 1, 0) \n                    > 0 then 1 else 0 end as location_geocoded_flag\n          \n          --User-submitted OR resume-extracted occupation category SUID\n          , case when coalesce(CARDINALITY(normalizeddata_resumeextracted_occupations_suids_array),0) \n                    + coalesce(CARDINALITY(normalizeddata_user_pos_occupations_suids_array),0)\n                    + coalesce(CARDINALITY(normalizeddata_user_preferences_occupations_suids_array),0) \n                    > 0 then 1 else 0 end as has_occ_category_suid\n          \n          --User-submitted OR resume-extracted skills SUID\n          , case when coalesce(CARDINALITY(normalizeddata_resumeextracted_skills_suids_array),0) \n                    + coalesce(CARDINALITY(normalizeddata_user_pos_skills_suids_array),0) \n                    + coalesce(CARDINALITY(filter(resume_skills_array_taxonomy_concept_title_suid, q -> q!='')),0) \n                    > 0 then 1 else 0 end as has_skills_suid\n          \n          --User-submitted OR resume-extracted credential SUID (education OR certification OR license)\n          , case when coalesce(CARDINALITY(filter(normalizeddata_resumeextracted_certifications_suids_array, q -> q!='')),0)\n                    + coalesce(CARDINALITY(normalizeddata_user_pos_certifications_suids_array),0)\n                    + coalesce(CARDINALITY(normalizeddata_resumeextracted_licenses_suids_array),0) \n                    + coalesce(CARDINALITY(normalizeddata_user_pos_licenses_suids_array),0)\n                    + coalesce(CARDINALITY(filter(resume_education_0_degrees_taxonomy_concept_degree_suid, q -> q!='')),0)\n                    + coalesce(CARDINALITY(filter(normalizeddata_user_pos_educations_degree_suids_array, q -> q!='')),0)\n                    + coalesce(CARDINALITY(resume_military_array_branch),0)\n                    > 0 then 1 else 0 end as has_credential_suid\n          \n          --User-submmited desired minimum pay\n          , case when coalesce(CARDINALITY(normalizeddata_user_desiredminpay_array),0) > 0 then 1 else 0 end as has_min_pay\n          \n          --Resume wordcount over 50\n          , case when resume_total_wordcount > 50 then 1 else 0 end as wordcount_over_50\n          \n    from datalake.imhotep.js_fact_store_snapshot_prod this_month\n    where \n        hour between '2024-06-30' and '2024-07-01'\n        --and not minimally_complete\n          -- and upper(resume_geo_country) = 'US'\n    )\ngroup by 1,2,3,4,5,6,7,8,9\n),\n\nuswr as (\n    select \n        distinct account_id \n    from datalake.imhotep.usersession_with_reach\n    where hour between '2024-06-01' and '2024-07-01'\n        and (not (contains(grp, 'spider') or contains(grp, 'privileged')) or grp is null)\n        and coalesce(islikelybot,0) != 1\n        and account_id > 0\n)\n\nselect \n    sourcing_eligible + has_first_and_last_name_flag + location_geocoded_flag + has_occ_category_suid + has_skills_suid + has_credential_suid + has_min_pay + wordcount_over_50 as num_attr \n    , if(uswr.account_id is not null, 1, 0) active_flag \n    , count(distinct js.account_id) as num_js \nfrom js \nleft join uswr \n    on js.account_id = uswr.account_id \ngroup by 1,2\norder by 1,2",
  "queryTables" : [ "datalakehive.imhotep.js_fact_store_snapshot_prod", "datalakehive.imhotep.usersession_with_reach" ],
  "queryIndex" : 362,
  "runStartToQueryComplete" : 2556
}, {
  "elapsedMillis" : 3842,
  "totalScheduledMillis" : 58305,
  "cpuMillis" : 17829,
  "queuedMillis" : 0,
  "executeMillis" : 2595,
  "getResultMillis" : 0,
  "iterateMillis" : 1266,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 74838346,
  "query" : "SELECT scope, lower(indexname), count(*) as numevents, count(distinct indexname) as numindexnames\nFROM datalake.imhotep.datalakeinversionevent\nWHERE day>='2024-10-27'\nand eventtype='INVERSION_COMPLETE'\n\ngroup by 1, 2\nhaving count(distinct indexname) > 1\nLIMIT 1000",
  "queryTables" : [ "datalakehive.imhotep.datalakeinversionevent" ],
  "queryIndex" : 363,
  "runStartToQueryComplete" : 2562
}, {
  "elapsedMillis" : 9393,
  "totalScheduledMillis" : 538356,
  "cpuMillis" : 58869,
  "queuedMillis" : 0,
  "executeMillis" : 3792,
  "getResultMillis" : 0,
  "iterateMillis" : 5620,
  "rows" : 112290,
  "error" : null,
  "scannedBytes" : 10678095442,
  "query" : "SELECT \nappName,\n\tadvertiserId,\n\tadvertisementId,\n    adsAdvertisementAction.unixTime,\n    format_datetime(from_unixtime(adsAdvertisementAction.unixTime), 'yyyy-MM-dd') as occurred,\n    \n    timeStamp,\n    status,\n    action,\n    jobsQuery,\n    \n    startDate,\n    format_datetime(from_unixtime(startDate), 'yyyy-MM-dd') as startDateParsed,\n    endDate,\n    format_datetime(from_unixtime(endDate), 'yyyy-MM-dd') as startDateParsed,\n    budgetType,\n    budgetOnetimeLimitWithCurrency_currency,\n    budgetMonthlyLimitWithCurrency_currency,\n    CASE budgetType\n    \tWHEN 'AVG_DAILY'|| 'LIFETIME' THEN  budgetOnetimeLimitWithCurrency_currency\n        WHEN 'MONTHLY' THEN budgetMonthlyLimitWithCurrency_currency\n        \n    END as budgetCurrency,\n    currencyCode,\n    CASE budgetType\n    \tWHEN 'AVG_DAILY'|| 'LIFETIME' THEN  budgetOnetimeLimitWithCurrency_amount\n        WHEN 'MONTHLY' THEN CAST(budgetMonthlyLimitWithCurrency_amount AS bigint)\n        \n    END as budgetValue,\n    budgetProrationBehavior__autosync, --prorateFirstMonth,\n    channelConfigs__autosync, --selectedChannels,\n    name,\n    trackingToken,\n    ctxAccountId__autosync,--accountId,\n    srep, --masquerade user\n    ctxAccountId__autosync,\n    ctxOAuthClientId__autosync,  -- Oyster API app\n\temp.primary_work_email as indeedUser\nFROM datalake.imhotep.adsAdvertisementAction\nLEFT JOIN datalake.imhotep.indeedemployeesnapshot emp ON srep = emp.id AND emp.unixtime BETWEEN IMHOTEP_UNIXTIME('10d') AND IMHOTEP_UNIXTIME('today')\nWHERE adsAdvertisementAction.unixtime BETWEEN IMHOTEP_UNIXTIME('10d') AND IMHOTEP_UNIXTIME('today')\nand srep is null-- and emp.primary_work_email is null\nAND appName in (\n\t'OcampPluginWebappDaemon', \n    'CamtPluginWebappDaemon', \n    'eax-api', \n    'EaxApiDaemon', \n    'one-host-prod', \n    'one-host-prod__objective-campaign',\n    'one-host-prod__curios',\n\t'one-host-prod__sjm-st-recommendations-panel',\n    'one-host-prod__eax-reporting'\n) -- configurable*/\nand ctxAccountId__autosync is not null\n--and (budgetMonthlyLimitWithCurrency_currency is null OR budgetMonthlyLimitWithCurrency_currency is null)\n--and\tctxAccountId__autosync = 265254074 \n--and advertiserId = 9709551\n --and advertiserId = 68631927 \n-- and advertisementId = 423211709\nORDER BY advertiserId, advertisementId, unixtime DESC\n--limit 100\n",
  "queryTables" : [ "datalakehive.imhotep.adsadvertisementaction", "datalakehive.imhotep.indeedemployeesnapshot" ],
  "queryIndex" : 364,
  "runStartToQueryComplete" : 2579
}, {
  "elapsedMillis" : 25259,
  "totalScheduledMillis" : 31006226,
  "cpuMillis" : 9532104,
  "queuedMillis" : 0,
  "executeMillis" : 7256,
  "getResultMillis" : 0,
  "iterateMillis" : 18041,
  "rows" : 2632,
  "error" : null,
  "scannedBytes" : 319095609731,
  "query" : "with sj_perf as (select\na.activity_month,\na.advertiser_id,\na.advertisement_id,\na.job_id,\n'sponsored' as sponsored,\nsum(a.impressions) sj_impressions,\nsum(a.clicks) sj_clicks,\nsum(a.apply_starts) sj_apply_starts,\nsum(a.applies) sj_applies,\nsum(a.charged_amount_local) charged_amount_local\nfrom datalake.core.jobs_fct_job_performance_sponsored_monthly a\nwhere a.activity_month between cast('2023-10-01' as date) and cast('2024-09-30' as date)\nand a.advertiser_id in (72681337)\ngroup by 1,2,3,4\n),\n\noj_id as (select distinct\na.job_id\nfrom datalake.core.jobs_dim_job_attributes_latest a\nwhere source_id in (1008003) and upper(a.job_country) IN ('IT') --and source_id in (2071173,17291098,19548234,10719845)\n),\n\noj_perf as (select\na.activity_month,\na.job_id,\nsum(a.impressions) oj_impressions,\nsum(a.clicks) oj_clicks,\nsum(a.apply_starts) oj_apply_starts,\nsum(a.applies) oj_applies\nfrom datalake.core.jobs_fct_job_performance_organic_monthly a\ninner join oj_id b\non a.job_id = b.job_id\nwhere a.activity_month between cast('2023-10-01' as date) and cast('2024-09-30' as date)\ngroup by 1,2\n),\n\nall_perf as (select\nCOALESCE(a.activity_month,b.activity_month) activity_month,\nCOALESCE(a.job_id,b.job_id) job_id,\na.advertisement_id,\na.sponsored,\na.sj_impressions,\na.sj_clicks,\na.sj_apply_starts,\na.sj_applies,\na.charged_amount_local,\nb.oj_impressions,\nb.oj_clicks,\nb.oj_apply_starts,\nb.oj_applies\nfrom sj_perf a\nfull outer join oj_perf b\non a.job_id = b.job_id\nand a.activity_month = b.activity_month\n)\n\nselect\n--a.activity_month,\na.advertisement_id,\na.job_id,\nCOALESCE(a.sponsored,'organic') job_type,\nc.campaign_name,\nb.job_city,\n--b.job_state,\nb.job_country,\nb.norm_title,\nb.norm_title_category,\nb.actual_title,\na.sj_impressions,\na.sj_clicks,\na.sj_apply_starts,\na.sj_applies,\na.charged_amount_local,\na.oj_impressions,\na.oj_clicks,\na.oj_apply_starts,\na.oj_applies\n\nfrom all_perf a\n\nleft join datalake.core.jobs_dim_job_attributes_latest b\non a.job_id = b.job_id\n\nleft join datalake.core.jobs_dim_campaign_latest c  \non a.advertisement_id = c.advertisement_id  ",
  "queryTables" : [ "datalakehive.core.jobs_dim_campaign_latest", "datalakehive.core.jobs_dim_job_attributes_latest", "datalakehive.core.jobs_dim_job_attributes_latest", "datalakehive.core.jobs_fct_job_performance_organic_monthly", "datalakehive.core.jobs_fct_job_performance_sponsored_monthly" ],
  "queryIndex" : 365,
  "runStartToQueryComplete" : 2605
}, {
  "elapsedMillis" : 68416,
  "totalScheduledMillis" : 32698708,
  "cpuMillis" : 9369099,
  "queuedMillis" : 0,
  "executeMillis" : 46151,
  "getResultMillis" : 0,
  "iterateMillis" : 22305,
  "rows" : 126402,
  "error" : null,
  "scannedBytes" : 97938035993,
  "query" : "with rules as (SELECT distinct rule_id\nFROM datalake.imhotep.waldorulesnapshot\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-10-01') AND IMHOTEP_UNIXTIME('2024-10-08') \nAND CONTAINS(rule_tags, 'cat_risk') AND type=0 AND visibility='nowhere'),\n\nmatches as (SELECT distinct jobid, ruleid\nFROM datalake.imhotep.waldorulematch\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-10-01') AND IMHOTEP_UNIXTIME('2024-10-08')),\n\nsj as (SELECT distinct jobid, 1 as nowhere\nFROM datalake.imhotep.searchablejobs\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-10-01') AND IMHOTEP_UNIXTIME('2024-10-08')\nAND waldovisibilitylevel='nowhere' AND feedid!=50461),\n\nfiji as (select distinct jobid, feedSourceId, feedid, sourceid\nfrom datalake.imhotep.fijievents \nwhere unixtime BETWEEN IMHOTEP_UNIXTIME('2024-10-01') AND IMHOTEP_UNIXTIME('2024-10-08')\nAND event='jobScanned'),\n\nfraudulent_jobs as (select matches.jobid, 1 as fraud\nfrom matches\ninner join rules\nON matches.ruleid=rules.rule_id\ninner join sj\nON matches.jobid = sj.jobid\nwhere sj.nowhere=1)\n\nselect feedSourceId, CAST(sourceid as VARCHAR) as sourceid, CAST(feedid as VARCHAR) as feedid, count() as numJobs, sum(fraud) as numFrauds, sum(fraud) * 100.000/count() as fraud_percent\nfrom (select fiji.*, coalesce(fraud, 0) as fraud\n      from fiji\n      left join fraudulent_jobs\n      on fiji.jobid=fraudulent_jobs.jobid)\ngroup by feedSourceId, sourceid, feedid\nORDER BY fraud_percent DESC",
  "queryTables" : [ "datalakehive.imhotep.fijievents", "datalakehive.imhotep.searchablejobs", "datalakehive.imhotep.waldorulematch", "datalakehive.imhotep.waldorulesnapshot" ],
  "queryIndex" : 366,
  "runStartToQueryComplete" : 2648
}, {
  "elapsedMillis" : 2360,
  "totalScheduledMillis" : 342,
  "cpuMillis" : 96,
  "queuedMillis" : 0,
  "executeMillis" : 1866,
  "getResultMillis" : 0,
  "iterateMillis" : 506,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 15157758,
  "query" : "SELECT *\nFROM datalake.imhotep.prestoquery\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\nLIMIT 10",
  "queryTables" : [ "datalakehive.imhotep.prestoquery" ],
  "queryIndex" : 367,
  "runStartToQueryComplete" : 2584
}, {
  "elapsedMillis" : 12958,
  "totalScheduledMillis" : 465020,
  "cpuMillis" : 217366,
  "queuedMillis" : 0,
  "executeMillis" : 2810,
  "getResultMillis" : 0,
  "iterateMillis" : 10259,
  "rows" : 6602453,
  "error" : null,
  "scannedBytes" : 612147512,
  "query" : "WITH date_range AS (\n    SELECT\n        IMHOTEP_UNIXTIME('1month') AS start_date,\n        IMHOTEP_UNIXTIME('today') AS end_date\n)\nSELECT\n    signin.accountid\nFROM\n    datalake.imhotep.passsigninattempt signin\nJOIN\n    date_range dr ON signin.unixtime BETWEEN dr.start_date AND dr.end_date\nWHERE\n    signin.successful = 1\nGROUP BY\n    signin.accountid\nHAVING\n    COUNT(signin.accountid) >= 2",
  "queryTables" : [ "datalakehive.imhotep.passsigninattempt" ],
  "queryIndex" : 368,
  "runStartToQueryComplete" : 2600
}, {
  "elapsedMillis" : 7957,
  "totalScheduledMillis" : 478927,
  "cpuMillis" : 183497,
  "queuedMillis" : 0,
  "executeMillis" : 5854,
  "getResultMillis" : 0,
  "iterateMillis" : 2142,
  "rows" : 4747,
  "error" : null,
  "scannedBytes" : 4316953610,
  "query" : "WITH \nmost_recent_appid AS (\n\tSELECT j.appid, MAX(j.unixtime) AS lastStartupUnixtime \n    FROM datalake.imhotep.javaruntimeversions j\n    WHERE \n    \tj.unixtime BETWEEN IMHOTEP_UNIXTIME('2023-01-01') AND IMHOTEP_UNIXTIME('today') \n        AND j.env='prod'\n\tGROUP BY appid\n),\nmost_recent_appname AS (\n\tSELECT j.appinstance, MAX(j.unixtime) AS lastStartupUnixtime \n    FROM datalake.imhotep.javaruntimeversions j\n    WHERE \n    \tj.unixtime BETWEEN IMHOTEP_UNIXTIME('2023-01-01') AND IMHOTEP_UNIXTIME('today') \n        AND j.env='prod'\n\tGROUP BY appinstance\n),\njava_starts_appid AS (\n    SELECT \n        FROM_UNIXTIME(j.unixtime) AS startupTime,\n        j.appid,\n        j.gitRepo AS gitRepository,\n        CASE\t\n            WHEN javaversion LIKE '1.8.%' THEN 8\n            WHEN javaversion LIKE '11.%' THEN 11\n            WHEN javaversion LIKE '17.%' THEN 17 \n            ELSE -1\n        END AS javaMajorVersion\n    FROM datalake.imhotep.javaruntimeversions j \n    JOIN \n        most_recent_appid m ON j.appid=m.appid AND m.lastStartupUnixtime=j.unixtime\n    WHERE \n        j.unixtime BETWEEN IMHOTEP_UNIXTIME('2023-01-01') AND IMHOTEP_UNIXTIME('today')\n        AND j.env='prod'\n    ORDER BY startupTime DESC\n),\njava_starts_appname AS (\n    SELECT \n        FROM_UNIXTIME(j.unixtime) AS startupTime,\n        j.appinstance,\n        j.gitRepo AS gitRepository,\n        CASE\t\n            WHEN javaversion LIKE '1.8.%' THEN 8\n            WHEN javaversion LIKE '11.%' THEN 11\n            WHEN javaversion LIKE '17.%' THEN 17 \n            ELSE -1\n        END AS javaMajorVersion\n    FROM datalake.imhotep.javaruntimeversions j \n    JOIN \n        most_recent_appname m ON j.appinstance=m.appinstance AND m.lastStartupUnixtime=j.unixtime\n    WHERE \n        j.unixtime BETWEEN IMHOTEP_UNIXTIME('2023-01-01') AND IMHOTEP_UNIXTIME('today')\n        AND j.env='prod'\n    ORDER BY startupTime DESC\n)\n\nSELECT \n    j.startupTime,\n\tsrs.applicationId,\n    srs.applicationName,\n    j.javaMajorVersion,\n    srs.giturl as gitRepository,\n    srs.runtimeType,\n    srs.criticalityTier,\n    srs.applicationType,\n    (srs.applicationType = 'CRONJOB' and CARDINALITY(srs.orcdeploymentnameprod) > 0) isCronJobInProd,\n    srs.lifeCycle,\n    srs.state,\n    srs.teamId,\n    t.displayname, \n    t.intakejira AS teamJira, t.email AS teamEmail, t.usersslackchannel AS teamSlack,\n    t.tier_0, t.tier_1, t.tier_2, t.tier_3, t.tier_4, \n    t.engineeringleadldap AS ldapTDM, \n    t.productleadldap AS ldapPM, \n    t.programleadldap AS ldapPGM, \n    t.technologyleadldap AS ldapTLA\nFROM datalake.imhotep.serviceregistrysnapshots srs\nLEFT JOIN datalake.imhotep.teamwrkssnapshot t ON srs.teamId=t.teamId\n--LEFT JOIN java_starts_appname j ON srs.applicationName=j.appinstance\nLEFT JOIN java_starts_appid j ON srs.applicationId=j.appid\nWHERE\n\tsrs.unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n    AND t.unixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n    AND srs.applicationType IN ('CRONJOB', 'DAEMON')\n    AND arrays_overlap(srs.runtimeType, ARRAY['jvm', 'spark'])\n    AND srs.lifeCycle != 'UNAVAILABLE'",
  "queryTables" : [ "datalakehive.imhotep.javaruntimeversions", "datalakehive.imhotep.javaruntimeversions", "datalakehive.imhotep.serviceregistrysnapshots", "datalakehive.imhotep.teamwrkssnapshot" ],
  "queryIndex" : 369,
  "runStartToQueryComplete" : 2608
}, {
  "elapsedMillis" : 2366,
  "totalScheduledMillis" : 2675865,
  "cpuMillis" : 184414,
  "queuedMillis" : 0,
  "executeMillis" : 976,
  "getResultMillis" : 0,
  "iterateMillis" : 1404,
  "rows" : 0,
  "error" : null,
  "scannedBytes" : 30861737153,
  "query" : "SELECT\n\t\tpath,\n        method,\n        status,\n\t\tmoderationtext,\n        flagged,\n        flaggedcategories,\n        flaggedwords,\n \t\tappName,\n        moderationApi, \n        moderationType, \n   \t\tmodel,\n        moderationHeader,\n        locale,               \n        metric,\n        FROM_UNIXTIME(unixtime) as request_date,\n        requestid,\n        requesttrackingid\nFROM\n      \tdatalake.imhotep.llmproxy lp\n    WHERE\n    \trequestid = '0f7ae361-eeda-45db-90bb-26540b984598'\n        and unixtime > imhotep_unixtime(DATE(CURRENT_DATE) - interval '4' day)\nlimit 50\n",
  "queryTables" : [ "datalakehive.imhotep.llmproxy" ],
  "queryIndex" : 370,
  "runStartToQueryComplete" : 2604
}, {
  "elapsedMillis" : 7652,
  "totalScheduledMillis" : 342525,
  "cpuMillis" : 203440,
  "queuedMillis" : 0,
  "executeMillis" : 6800,
  "getResultMillis" : 0,
  "iterateMillis" : 905,
  "rows" : 1309,
  "error" : null,
  "scannedBytes" : 4313424379,
  "query" : "WITH tickets AS (\n    SELECT \n    \toriginalissuekey AS jiraId,\n        LTRIM(REGEXP_EXTRACT(labels, '(appid--([0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}))'), 'appid--') AS applicationId\n    FROM imhotep.jiraactions\n    WHERE \n        action='create' \n        AND reporterusername='mredding' \n        AND labels LIKE '%Java17_Migration%' \n        AND unixtime BETWEEN IMHOTEP_UNIXTIME('2023-11-01') AND IMHOTEP_UNIXTIME('today')\n), processed AS (\n    SELECT \n        FROM_UNIXTIME(ja.unixtime) AS action_time, \n        ja.originalissuekey AS originalTicketId, \n        ja.issuekey AS currentTicketId, \n        ja.action, \n        ja.prevstatus, \n        ja.status, \n        ja.resolution\n    FROM imhotep.jiraactions ja\n    WHERE\n        ja.originalissuekey IN (SELECT jiraId FROM tickets)\n        AND ((ja.action='create') OR (ja.action='update' AND prevstatus!=status))\n        AND unixtime BETWEEN IMHOTEP_UNIXTIME('2023-11-01') AND IMHOTEP_UNIXTIME('today')\n), most_recent AS (\n\tSELECT originalTicketId, MAX(action_time) AS action_time FROM processed\n    GROUP BY originalTicketId\n)\n\nSELECT p.*, t.applicationId\nFROM processed p\nJOIN \n    most_recent m ON p.originalTicketId=m.originalTicketId AND p.action_time=m.action_time\nJOIN\n\ttickets t ON p.originalTicketId=t.jiraId",
  "queryTables" : [ "skipperhive.imhotep.jiraactions", "skipperhive.imhotep.jiraactions", "skipperhive.imhotep.jiraactions", "skipperhive.imhotep.jiraactions", "skipperhive.imhotep.jiraactions" ],
  "queryIndex" : 371,
  "runStartToQueryComplete" : 2613
}, {
  "elapsedMillis" : 6266,
  "totalScheduledMillis" : 8988110,
  "cpuMillis" : 493393,
  "queuedMillis" : 0,
  "executeMillis" : 3943,
  "getResultMillis" : 0,
  "iterateMillis" : 2466,
  "rows" : 281489,
  "error" : null,
  "scannedBytes" : 33515767614,
  "query" : "WITH jp_js AS (\n        SELECT DISTINCT(account_id) AS accountid\n        FROM datalake.imhotep.js_fact_store_snapshot_prod\n        WHERE hour >= '2024-10-21' AND hour < '2024-10-23'\n        AND (resume_geo_country = 'jp' or resume_location_country='jp' or resume_ip_country='jp' or resume_locale IN ('ja', 'ja_JP'))\n        AND resume_work_size > 0\n    )\n    SELECT DISTINCT mdp.accountid AS acctid\n    FROM datalake.mdp_offline_feature_store.jobseeker_feature_jsdp_resume_extraction_accountid mdp\n    INNER JOIN jp_js ON jp_js.accountid = mdp.accountid\n    WHERE eventtime BETWEEN date_parse('2024-10-18 05:21', '%Y-%m-%d %H:%i') \n          AND date_parse('2024-10-21 06:05', '%Y-%m-%d %H:%i')",
  "queryTables" : [ "datalake.mdp_offline_feature_store.jobseeker_feature_jsdp_resume_extraction_accountid", "datalakehive.imhotep.js_fact_store_snapshot_prod" ],
  "queryIndex" : 372,
  "runStartToQueryComplete" : 2622
}, {
  "elapsedMillis" : 19853,
  "totalScheduledMillis" : 41270430,
  "cpuMillis" : 12033421,
  "queuedMillis" : 0,
  "executeMillis" : 2689,
  "getResultMillis" : 0,
  "iterateMillis" : 17185,
  "rows" : 65,
  "error" : null,
  "scannedBytes" : 162620029970,
  "query" : "SELECT\n\tDATE_TRUNC('month', DATE(SUBSTR(day, 1, 10))) AS activity_month,\n    pcss AS parent_company_size_segment,\n    COUNT(DISTINCT agg_job_id) AS num_jobs\nFROM \n\tdatalake.imhotep.jobactivitymetrics\nWHERE \n\tday >= '2023-10-01'\n    AND day < '2024-11-01'\n\tAND is_job_searchable=1\nGROUP BY\n\t1, 2\n",
  "queryTables" : [ "datalakehive.imhotep.jobactivitymetrics" ],
  "queryIndex" : 373,
  "runStartToQueryComplete" : 2640
}, {
  "elapsedMillis" : 12541,
  "totalScheduledMillis" : 9504382,
  "cpuMillis" : 2522832,
  "queuedMillis" : 0,
  "executeMillis" : 7583,
  "getResultMillis" : 0,
  "iterateMillis" : 7063,
  "rows" : 10,
  "error" : null,
  "scannedBytes" : 35446428790,
  "query" : "WITH scalablesegmenthomepageimpression_ AS (\n  SELECT accountid\n         ,agg_job_id \n         ,qual_attributes_job_js_overlap_positive_count\n         ,qual_job_attributes_count\n         ,qual_job_attributes\n         ,'scalablesegmenthomepageimpression' AS source\n  FROM datalake.imhotep.scalablesegmenthomepageimpression\n  WHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-10-02') AND IMHOTEP_UNIXTIME('2024-10-03')\n  AND qual_attributes_job_js_overlap_positive_count > 0\n  AND  qual_job_attributes_count > 0 \n  GROUP BY 1, 2, 3, 4, 5\n)\n\nSELECT a.account_id\n       ,a.job_id\n       ,a.overlappingjobandjsqualifications AS cnt_overlapping_quals_mce\n       ,b.qual_attributes_job_js_overlap_positive_count AS cnt_overlapping_quals_scalableseg\n       ,a.numjobqualifications AS cnt_job_quals_mce\n       ,b.qual_job_attributes_count AS cnt_job_quals_scalableseg\n       ,b.qual_job_attributes\nFROM datalake.imhotep.mce_evaluation AS a \nINNER JOIN scalablesegmenthomepageimpression_ AS b\nON a.account_id = b.accountid \nAND a.job_id = b.agg_job_id\nWHERE unixtime BETWEEN IMHOTEP_UNIXTIME('2024-10-02') AND IMHOTEP_UNIXTIME('2024-10-03')\nAND a.overlappingjobandjsqualifications != b.qual_attributes_job_js_overlap_positive_count \nAND a.numjobqualifications != b.qual_job_attributes_count\nLIMIT 10 ",
  "queryTables" : [ "datalakehive.imhotep.mce_evaluation", "datalakehive.imhotep.scalablesegmenthomepageimpression" ],
  "queryIndex" : 374,
  "runStartToQueryComplete" : 2638
}, {
  "elapsedMillis" : 6089,
  "totalScheduledMillis" : 2340,
  "cpuMillis" : 1120,
  "queuedMillis" : 0,
  "executeMillis" : 3737,
  "getResultMillis" : 0,
  "iterateMillis" : 2363,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 826077,
  "query" : "SELECT\n    cast(json_extract(element_at(cast(json_parse(chatmessages) as array<JSON>),\n    cardinality(cast(json_parse(chatmessages) as array<JSON>)) - 1), '$.content') as varchar) as job_description,\n    cast(json_extract(element_at(cast(json_parse(chatmessages) as array<JSON>),\n    cardinality(cast(json_parse(chatmessages) as array<JSON>))), '$.content') as varchar) as jobseeker_resume,\n    rawContent as generated_introduction\nFROM logrepo.log.GeneratedContentLog\nWHERE uid='1i53178bs37nf001'",
  "queryTables" : [ "logrepo.log.generatedcontentlog" ],
  "queryIndex" : 375,
  "runStartToQueryComplete" : 2649
}, {
  "elapsedMillis" : 966,
  "totalScheduledMillis" : 676,
  "cpuMillis" : 176,
  "queuedMillis" : 0,
  "executeMillis" : 467,
  "getResultMillis" : 0,
  "iterateMillis" : 509,
  "rows" : 76,
  "error" : null,
  "scannedBytes" : 5380,
  "query" : "desc datalake.imhotep.prestoquery",
  "queryTables" : [ "datalakehive.information_schema.columns" ],
  "queryIndex" : 376,
  "runStartToQueryComplete" : 2660
}, {
  "elapsedMillis" : 146975,
  "totalScheduledMillis" : 824774,
  "cpuMillis" : 410514,
  "queuedMillis" : 0,
  "executeMillis" : 4350,
  "getResultMillis" : 0,
  "iterateMillis" : 142638,
  "rows" : 1,
  "error" : null,
  "scannedBytes" : 181074159,
  "query" : "select count(1) from logrepo.raw_log.orgClk where unixtime >= imhotep_unixtime('2019-11-02 00:00:00') and unixtime < imhotep_unixtime('2019-11-02 01:00:00')",
  "queryTables" : [ "logrepo.raw_log.orgclk" ],
  "queryIndex" : 377,
  "runStartToQueryComplete" : 2848
}, {
  "elapsedMillis" : 1490,
  "totalScheduledMillis" : 1776,
  "cpuMillis" : 378,
  "queuedMillis" : 0,
  "executeMillis" : 1152,
  "getResultMillis" : 0,
  "iterateMillis" : 347,
  "rows" : 11150,
  "error" : null,
  "scannedBytes" : 34364230,
  "query" : "select current_charge from datalake.public.oyster_min_spend_yellowstone_staging where day = '2024-10-23'",
  "queryTables" : [ "datalakehive.public.oyster_min_spend_yellowstone_staging" ],
  "queryIndex" : 378,
  "runStartToQueryComplete" : 2719
}, {
  "elapsedMillis" : 1112,
  "totalScheduledMillis" : 9995,
  "cpuMillis" : 881,
  "queuedMillis" : 0,
  "executeMillis" : 791,
  "getResultMillis" : 0,
  "iterateMillis" : 421,
  "rows" : 100,
  "error" : null,
  "scannedBytes" : 1609485,
  "query" : "  SELECT \n  \tadvertiserid as advertiser_id\n    , t.permission as product_perm\n    , accountid as account_id\n  FROM \n  \tdatalake.imhotep.advertiserusers  \n  \tCROSS JOIN UNNEST (permissionSetNames) as T (permission)\n  WHERE \n  \tunixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n    --AND advertiserid = '39970340'\n  GROUP BY\n    advertiserid \n    , t.permission \n    , accountid\n\nLIMIT 100",
  "queryTables" : [ "datalakehive.imhotep.advertiserusers" ],
  "queryIndex" : 379,
  "runStartToQueryComplete" : 2721
}, {
  "elapsedMillis" : 2352,
  "totalScheduledMillis" : 29537,
  "cpuMillis" : 6903,
  "queuedMillis" : 1,
  "executeMillis" : 865,
  "getResultMillis" : 0,
  "iterateMillis" : 1498,
  "rows" : 4,
  "error" : null,
  "scannedBytes" : 941848926,
  "query" : "  SELECT \n  \tadvertiserid as advertiser_id\n    , t.permission as product_perm\n    , accountid as account_id\n  FROM \n  \tdatalake.imhotep.advertiserusers  \n  \tCROSS JOIN UNNEST (permissionSetNames) as T (permission)\n  WHERE \n  \tunixtime BETWEEN IMHOTEP_UNIXTIME('1d') AND IMHOTEP_UNIXTIME('today')\n    AND advertiserid = '39970340'\n  GROUP BY\n    advertiserid \n    , t.permission \n    , accountid\n\nLIMIT 100",
  "queryTables" : [ "datalakehive.imhotep.advertiserusers" ],
  "queryIndex" : 380,
  "runStartToQueryComplete" : 2722
}, {
  "elapsedMillis" : 727,
  "totalScheduledMillis" : 705,
  "cpuMillis" : 351,
  "queuedMillis" : 0,
  "executeMillis" : 692,
  "getResultMillis" : 0,
  "iterateMillis" : 46,
  "rows" : 11150,
  "error" : null,
  "scannedBytes" : 34364230,
  "query" : "select current_charge from datalake.public.oyster_min_spend_yellowstone_staging where day = '2024-10-23'",
  "queryTables" : [ "datalakehive.public.oyster_min_spend_yellowstone_staging" ],
  "queryIndex" : 381,
  "runStartToQueryComplete" : 2737
} ]