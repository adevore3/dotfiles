#!/bin/bash

function aws_ssm() {
  local __usage="
NAME:
  aws_ssm - ssh into the master instance of a given AWS EMR cluster

SYNOPSIS
  aws_ssm [OPTIONS]...

OPTIONS:
  -h, --help       Prints this message
  -c, --cluster    Name of the cluster to ssh into if exists in the account specified by profile
  -p, --profile    Specifies an aws profile or defaults to di-prod-admin
  -r, --refresh    Refreshes cache of active clusters' info
  -t, --type       Specify the instance type, defaults to 'master'

EXAMPLES:
  aws_ssm -h

  # Profile defaults to di-prod-admin. Prompts for selection of active cluster names
  aws_ssm

  # Refreshes cache of active clusters' info
  aws_ssm -r

  # Attempts to use given cluster name. If cluster not found, then it prompts a selection of active cluster names
  aws_ssm -c emr-di-index-builders

  # After selecting a cluster it will ssm into the first core node found
  aws_ssm -t core

  # Specify an aws profile
  aws_ssm -p ibw-prod-admin -c emr-ibw
"

  while [[ "$1" =~ ^-{1,2}.* ]]; do
    opt="$1"
    shift
    current_arg="$1"

    case "$opt" in
      "-h"|"--help")
        echo "$__usage"
        return 0
        ;;
      "-p"|"--profile")
        local aws_profile=$current_arg
        shift
        ;;
      "-c"|"--cluster")
        local cluster=$current_arg
        shift
        ;;
      "-r"|"--refresh")
        local refresh="yes"
        ;;
      "-t"|"--type")
        local type=$current_arg
        shift
        ;;
      "-v"|"--verbose")
        local verbose="yes"
        ;;
      *)
        >&2 echo ERROR Invalid option: \"$opt\"
        return 1
        ;;
    esac
  done

  function log_debug() {
    local msg=$1
    if [[ "$verbose" == "yes" ]]; then
      echo DEBUG $msg
    fi
  }

  local aws_profile=${aws_profile:-di-prod-admin}
  local type=${type:-master}
  type=$(echo $type | tr '[:lower:]' '[:upper:]')

  if [[ $(ret -e $aws_profile instances) == "no" ]] || [[ "$refresh" == "yes" ]]; then
    echo INFO Pulling info for $aws_profile instances
    aws --profile $aws_profile ec2 describe-instances --filters "Name=instance-state-name,Values=running" --query "Reservations[*].Instances[*].{InstanceId:InstanceId,Tags:Tags[*]}" | cap -q $aws_profile instances
  fi

  local desired_cluster=$cluster
  if [[ -z $(ret $aws_profile instances | \jq .[][] | \jq -rs '.[] | select(.Tags[].Key == "aws:elasticmapreduce:instance-group-role" and .Tags[].Value == "MASTER") | .Tags[] | select(.Key == "emr-cluster-name") | .Value' | sort | egrep "^$cluster$") ]]; then
    echo "WARN Cluster name '$cluster' not found in active clusters"
    select_from_options -d "ret $aws_profile instances | \jq .[][] | \jq -rs '.[] | select(.Tags[].Key == \"aws:elasticmapreduce:instance-group-role\" and .Tags[].Value == \"MASTER\") | .Tags[] | select(.Key == \"emr-cluster-name\") | .Value' | sort"
    desired_cluster=$(ret select_from_options)
  fi

  # jq can't handle arguments with dashes and all cluster names have dashes in them
  # we use select_from_options which gets around this and is useful for choosing core instances
  select_from_options -d "ret $aws_profile instances | \jq .[][] | \jq -rs '.[] | select(.Tags[].Key == \"emr-cluster-name\" and .Tags[].Value == \"$desired_cluster\" and .Tags[].Key == \"aws:elasticmapreduce:instance-group-role\" and .Tags[].Value == \"$type\") | .InstanceId'"

  desired_instance_id=$(ret select_from_options)

  if [ -z $desired_instance_id ]; then
    echo "ERROR Could not find an instance id for cluster '$desired_cluster' and instance type '$type'"
    return 1
  fi

  log_debug "aws --profile $aws_profile ssm start-session --target $desired_instance_id"
  aws --profile $aws_profile ssm start-session --target $desired_instance_id
}

