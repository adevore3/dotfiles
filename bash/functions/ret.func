#!/usr/bin/env bash

# shellcheck disable=SC2155
function ret() {
  local __usage="
This will return the output of a command that was captured by cap either from
the default output file or a custom output file

Usage: ret [OPTIONS] <strings>

OPTIONS:
  -h, --help         Prints this message
  -e, --exists       Returns 'yes' if file exists or 'no' otherwise
  -d, --date         Returns modified date of the file
  -f, --files        Returns the output of N most recently modified outputs of cap command
  --expired          Returns 'yes' if file is older than the number of seconds provided or 'no' otherwise

EXAMPLES:

  # outputs contents of default file /tmp/capture.out
  ret

  # outputs contents of custom named file /tmp/hello-world1.out
  ret hello world1

  # if any files in /tmp match 'hello' then it will output the contents of that file
  ret hello

  # returns yes if default file exists
  ret -e

  # returns yes if /tmp/hello-world.out exists
  ret -e hello world

  # returns the modified date of /tmp/hello-world.out
  ret -d hello world

  # returns output of the first 5 recently modified outputs of cap command
  ret -f 5

  # returns yes if /tmp/hello-world.out is older than 300 seconds
  ret --expired 300 hello world
"

  while [[ "$1" =~ ^-{1,2}.* ]]; do
    opt="$1"
    shift;
    current_arg="$1"
    if [[ ! "$opt" =~ ^(-h|--help)$ ]] && [[ "$current_arg" =~ ^-{1,2}.* ]]; then
      echo WARN You may have left an argument blank. Double check your command
      return 1
    fi

    case "$opt" in
      "-h"|"--help")
        echo "$__usage"
        return 1
        ;;
      "-e"|"--exists")
        local check_exists="yes"
        ;;
      "-d"|"--date")
        local return_date="yes"
        ;;
      "-f"|"--files") # recently modified files
        local return_n_files="yes"
        local num_files="$1"
        shift
        ;;
      "--expired")
        local check_expired="yes"
        local ttl_sec="$1"
        shift
        ;;
      *)
        >&2 echo ERROR Invalid option: \"$opt\"
        return 1
        ;;
    esac
  done


  function determine_file() {
    if [ -z "$joined_arguments" ]; then
      echo /tmp/capture.out

    else
      local file="/tmp/$joined_arguments.out"

      if [ -f "$file" ]; then
        echo "$file"
      else
        local partial_match_file=$(ls /tmp/*.out | grep $joined_arguments | head -n 1)
        if [ -z "$partial_match_file" ] || [ "$partial_match_file" == *"cannot access"* ]; then
          echo ERROR Unable to find an output file in /tmp matching $joined_arguments
        else
          ls /tmp/*.out | grep $joined_arguments | head -n 1
        fi
      fi
    fi
  }

  local joined_arguments=$(join_by - $@)

  local file=$(determine_file $joined_arguments)

  if [ "$check_exists" == "yes" ]; then
    if [ -f "$file" ]; then
      echo yes
    else
      echo no
    fi

    return 0
  fi

  if [[ "$file" =~ ^ERROR ]]; then
    echo $file
    return 1
  fi

  if [ "$return_date" == "yes" ]; then
    date -r $file

    return 0
  fi

  if [ "$return_n_files" == "yes" ]; then
    cat $(ls -lt /tmp/*.out | sed -n 1,${num_files}p | awk '{print $9}')

    return 0
  fi

  if [ "$check_expired" == "yes" ]; then
    local cache_time=$(stat -c "%Y" "$file")
    local current_time=$(date +%s)
    local age=$((current_time - cache_time))

    if [[ ${age} -lt ${ttl_sec} ]]; then
      echo no # File has not expired
    else
      echo yes
    fi

    return 0
  fi

  cat $file
}


