#!/bin/bash

source "${DOTFILES}/bash/functions/log_utils.sh"
source "${DOTFILES}/bash/functions/select_from_options.func"

# shellcheck disable=SC2155
function select_from_last_command() {
  local __usage="
  NAME:
    select_from_last_command - select from a list of options generated by the last command ran

  SYNOPSIS
    select_from_last_command [OPTIONS]... [FILE]...

  OPTIONS:
    -h, --help       Prints this message
    -d, --default    If only 1 option present then auto-select that option
    -q, --quiet      Doesn't output selection
    -v, --verbose    Outputs verbose information

  EXAMPLES:
    select_from_last_command -h

    select_from_last_command 'ls -l'

    select_from_last_command -d 'ls -l | grep very_specific_file_name'

    select_from_last_command -q 'ls -l'
  "

  while [[ "$1" =~ ^-{1,2}.* ]]; do
    opt="$1"
    shift;

    case "$opt" in
      "-h"|"--help")
        echo "$__usage"
        return 1
        ;;
      "-d"|"--default")
        local default=yes
        ;;
      "-q"|"--quiet")
        local quiet=yes
        ;;
      "-v"|"--verbose")
        local -r verbose="yes"
        ;;
      *)
        log_error "Invalid option: \"$opt\""
        return 1
        ;;
    esac
  done

  if [[ "$verbose" == "yes" ]]; then
    set_log_level_debug
  fi

  if [ $# -ne 0 ]; then
    log_error "No arguments required"
    return 1
  fi

  local last_command=$(history 10 | grep -v history | grep -v select_from_last_command | tail -n1 | awk -F 'PST |PDT ' '{print $2}')
  log_debug "last_command: \"$last_command\""

  if [[ "$verbose" == "yes" ]]; then
    set_log_level_info
  fi

  # Shouldn't be possible, but just in case
  if [[ "$last_command" == select_from_last_command* ]]; then
    log_error "Last command: \"$last_command\""
    log_error "Last command starts with select_from_last_command, exiting to avoid infinite loop"
    return 2
  fi

  if [[ -n "$(eval "$last_command")" ]]; then
    local args=()
    if [[ "$default" == "yes" ]]; then
      args+=("-d")
    fi
    if [[ "$quiet" == "yes" ]]; then
      args+=("-q")
    fi

    select_from_options "${args[@]}" "$last_command"

  else
    log_error "Last command had no output: \"$last_command\""
    return 1
  fi
}

