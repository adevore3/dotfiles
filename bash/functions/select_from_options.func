#!/bin/bash

function select_from_options() {
  local __usage="
  NAME:
    select_from_options - select from a list of options generated by the given command

  SYNOPSIS
    select_from_options [OPTIONS]... [FILE]...

  OPTIONS:
    -h, --help       Prints this message
    -d, --default    If only 1 option present then auto-select that option

  EXAMPLES:
    select_from_options -h

    select_from_options 'ls -l'

    select_from_options -d 'ls -l | grep very_specific_file_name'
  "

  while [[ "$1" =~ ^-{1,2}.* ]]; do
    opt="$1"
    shift;
    current_arg="$1"
    if [[ ! "$opt" =~ ^(-h|--help)$ ]] && [[ "$current_arg" =~ ^-{1,2}.* ]]; then
      echo WARN: You may have left an argument blank. Double check your command
      return 1
    fi

    case "$opt" in
      "-h"|"--help")
        echo "$__usage"
        return 1;;
      "-d"|"--default")
        local default=yes;;
      *)
        echo ERROR: Invalid option: \"$opt\" >&2
        return 1;;
    esac
  done

  if [ $# -ne 1 ]; then
    echo ERROR: Must specifiy a command to run
    return 1
  fi

  local command=$1

  # Builds an array from output of command
  mapfile -t options < <( eval $command | egrep -v "^[[:space:]]*$" )

  local size=${#options[@]}

  if [ $size -eq 0 ]; then
    echo "ERROR: No options found from running \"$command\""
    return 0
  fi

  if [ $size -eq 1 ] && [ "$default" == "yes" ]; then
    local desired_option=${options[0]}
  else
    echo INFO: Found $size options

    for index in "${!options[@]}"; do
      local position=$(( $index + 1 ))
      printf "\t%s)\t%s\n" "$position" "${options[$index]}"
    done

    sleep 0.05 # Helps prevent below output mixing in with listing of options

    local desired_position=1
    local number_regex='^[0-9]+$'
    while :; do
      echo
      read -p "Please enter a number between 1 and $size for the desired alias: " number

      [[ $number =~ $number_regex ]] || { echo Please enter a valid number; continue; }

      if ((number >= 1 && number <= $size)); then
        desired_position=$number
        break
      else
        echo ERROR: Number out of range, please try again
      fi
    done

    local desired_index=$(( $desired_position - 1 ))
    local desired_option=${options[$desired_index]}
  fi

  echo -n $desired_option | save_to_all_clipboards | cap select_from_options
  echo
}

